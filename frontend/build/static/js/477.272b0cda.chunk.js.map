{"version":3,"file":"static/js/477.272b0cda.chunk.js","mappings":"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","sources":["pages/NewArticlePageToast.tsx"],"sourcesContent":["/**\n * \n * 注意: 导航栏组件(Navbar和SideNavbar)已移至全局布局，不需要在页面组件中引入\n * 此文件定义了创建或编辑文章页面的 React 组件，使用Toast UI Editor替代CKEditor。\n *\n * 主要功能:\n * - 提供富文本编辑器或其他表单供用户输入新文章的标题、内容、摘要、分类、标签等。\n * - 支持封面图片上传。\n * - 处理文章所属系列的管理。\n * - 提交新文章或更新后的文章数据到后端 API。\n * - 根据路由参数判断是创建新文章还是编辑现有文章。\n *\n * 注意: 这是ToastUI Editor版本的文章编辑页面，用于替代基于CKEditor的版本。\n */\nimport React, { useState, useEffect, useRef, useCallback } from 'react';\nimport { useNavigate, useParams } from 'react-router-dom';\nimport { API_BASE_URL } from '../config';\nimport { useAuth } from '../context/AuthContext';\nimport axios from 'axios';\n// 已移除: import Navbar from \"../components/Navbar\";\nimport SideNavbar from '../components/SideNavbar';\nimport ToastEditorWrapper from '../components/ToastEditorWrapper';\nimport { useSidebar } from '../contexts/SidebarContext';\nimport { useQueryClient } from '@tanstack/react-query';\n\n/**\n * \n * 注意: 导航栏组件(Navbar和SideNavbar)已移至全局布局，不需要在页面组件中引入\n * 文章数据接口定义\n * 用于接收和发送文章相关的API数据\n */\ninterface ArticleData {\n  title: string;\n  content: string;\n  category?: string;\n  tags?: string[];\n  cover_image?: string;\n  is_published?: boolean;\n  series_name?: string;\n  series_order?: number;\n}\n\n// 分类选项\nconst categoryOptions = [\"AI发展\", \"投资\", \"未来\", \"心理\", \"理性\", \"时间\"];\n\nconst NewArticlePageToast: React.FC = () => {\n  const { slug } = useParams<{ slug: string }>();\n  const isEditing = Boolean(slug);\n  const queryClient = useQueryClient();\n\n  const [title, setTitle] = useState('');\n  const [content, setContent] = useState('');\n  const [category, setCategory] = useState('');\n  const [tags, setTags] = useState('');\n  const [coverImage, setCoverImage] = useState<File | string | null>(null);\n  const [coverPreview, setCoverPreview] = useState<string | null>(null);\n  const [initialDataLoading, setInitialDataLoading] = useState(isEditing);\n  \n  const [userSeries, setUserSeries] = useState<string[]>([]);\n  const [selectedSeries, setSelectedSeries] = useState<string>('');\n  const [newSeriesName, setNewSeriesName] = useState<string>('');\n  const [seriesLoading, setSeriesLoading] = useState<boolean>(false);\n  const [seriesError, setSeriesError] = useState<string | null>(null);\n\n  const [error, setError] = useState<string | null>(null);\n  const [success, setSuccess] = useState<string | null>(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const [authChecking, setAuthChecking] = useState(true);\n  const navigate = useNavigate();\n  const { token, user, isLoading: authLoading } = useAuth();\n  const { isSidebarOpen } = useSidebar();\n\n  const fileInputRef = useRef<HTMLInputElement>(null);\n\n  // 定义useCallback函数处理编辑器内容变化\n  const handleEditorChange = useCallback((data: string) => {\n    setContent(data);\n  }, []);\n\n  // 认证检查\n  useEffect(() => {\n    // 只有当认证状态加载完成后才进行检查\n    if (!authLoading) {\n      if (!token) {\n        console.log(\"没有检测到登录令牌，跳转到登录页面\");\n        const from = isEditing ? `/edit-article/${slug}` : '/new-article-toast';\n        navigate('/login', { state: { from } });\n      } else if (!user) {\n        console.log(\"令牌存在但未获取到用户信息\");\n        const from = isEditing ? `/edit-article/${slug}` : '/new-article-toast';\n        navigate('/login', { state: { from } });\n      } else {\n        console.log(\"用户已登录:\", user.email);\n        // 用户已登录，可以继续\n      }\n      setAuthChecking(false); // 认证检查完成\n    }\n  }, [token, user, navigate, authLoading, isEditing, slug]);\n\n  // 如果是编辑模式，获取文章数据\n  useEffect(() => {\n    if (isEditing && slug && token) {\n      const fetchArticleData = async () => {\n        setInitialDataLoading(true);\n        setError(null);\n        try {\n          const response = await axios.get<ArticleData>(`${API_BASE_URL}/api/articles/slug/${slug}`, {\n             headers: { 'Authorization': `Bearer ${token}` }\n          });\n          console.log(\"获取到的文章数据:\", response.data);\n          const articleData = response.data;\n          setTitle(articleData.title || '');\n          setContent(articleData.content || '');\n          setCategory(articleData.category || '');\n          \n          // 标签处理：确保标签数据干净且格式正确\n          if (articleData.tags && Array.isArray(articleData.tags)) {\n            // 清理标签：移除每个标签中的特殊字符（#, [], \"\", 等）\n            const cleanedTags = articleData.tags\n              .map(tag => String(tag).trim())                   // 确保是字符串并去除前后空格\n              .map(tag => tag.replace(/^#+/, ''))               // 移除开头的#号\n              .map(tag => tag.replace(/[\\[\\]\"']/g, ''))        // 移除[]和引号\n              .filter(tag => tag.length > 0);                   // 过滤空标签\n              \n            console.log('清理后的标签:', cleanedTags);\n            // 使用中文逗号连接，符合用户习惯\n            setTags(cleanedTags.join('，')); \n          } else {\n            console.log('文章没有标签或标签格式不正确:', articleData.tags);\n            setTags('');\n          }\n          \n          if (articleData.cover_image) {\n            setCoverImage(articleData.cover_image);\n            setCoverPreview(articleData.cover_image);\n          }\n          setSelectedSeries(articleData.series_name || '');\n        } catch (err: any) {\n          console.error('Error fetching article data for editing:', err);\n          setError(err.response?.data?.error || err.message || '无法加载文章数据进行编辑');\n        } finally {\n          setInitialDataLoading(false);\n        }\n      };\n      fetchArticleData();\n    }\n  }, [isEditing, slug, token]);\n\n  // 获取用户系列\n  useEffect(() => {\n    const fetchSeries = async () => {\n      if (!token || token === 'undefined' || authChecking) return;\n      \n      setSeriesLoading(true);\n      setSeriesError(null);\n      try {\n        console.log(\"开始获取用户系列，令牌:\", token.substring(0, 10) + \"...\");\n        const response = await axios.get(`${API_BASE_URL}/api/articles/user/series`, {\n          headers: { 'Authorization': `Bearer ${token}` }\n        });\n        \n        console.log(\"获取到的系列数据:\", response.data);\n        \n        if (response.data && Array.isArray(response.data.series_names)) { \n          setUserSeries(response.data.series_names || []);\n        } else {\n          console.warn(\"系列数据格式异常:\", response.data);\n          setUserSeries([]);\n        }\n      } catch (err: any) {\n        console.error(\"获取系列失败:\", err);\n        if (err.response && err.response.status === 401) {\n          setSeriesError(\"登录已过期，请重新登录\");\n        } else {\n          setSeriesError(\"无法加载您的系列列表\");\n        }\n      } finally {\n        setSeriesLoading(false);\n      }\n    };\n\n    if (token && token !== 'undefined' && !authChecking) {\n      fetchSeries();\n    }\n  }, [token, authChecking]);\n\n  // 处理表单提交\n  const handleSubmit = async (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n    setError(null);\n    setSuccess(null);\n    setIsLoading(true);\n\n    // 表单验证\n    if (!title.trim()) {\n      setError('请输入文章标题');\n      setIsLoading(false);\n      return;\n    }\n\n    if (!content.trim()) {\n      setError('请输入文章内容');\n      setIsLoading(false);\n      return;\n    }\n\n    try {\n      const formData = new FormData();\n      formData.append('title', title);\n      formData.append('content', content);\n      \n      if (category) {\n        formData.append('category', category);\n      }\n      \n      // 始终处理标签，即使标签字段为空也发送一个空标签数组\n      // 这确保编辑时可以清除标签\n      const tagArray = tags \n        ? tags\n            .replace(/，/g, ',')                          // 将中文逗号替换为英文逗号以统一处理\n            .split(',')                                   // 根据英文逗号分割\n            .map(tag => tag.trim())                       // 去除前后空格\n            .map(tag => tag.replace(/^#+/, ''))           // 移除开头的#号\n            .map(tag => tag.replace(/[\\[\\]\"']/g, ''))     // 移除[]和引号\n            .filter(tag => tag.length > 0)                // 过滤空标签\n        : [];\n        \n      // 修复：处理标签数组，确保清空现有标签时也正确处理\n      // 如果标签数组为空，添加一个空字符串标签，告诉后端清除所有标签\n      if (tagArray.length === 0 && isEditing) {\n        console.log('清空所有标签');\n        formData.append('tags', ''); // 明确告诉后端清空标签\n      } else {\n        // 每个标签单独添加一个'tags'字段\n        tagArray.forEach(tag => {\n          formData.append('tags', tag);\n        });\n      }\n      \n      // 添加调试日志\n      console.log('解析并清理后的标签数组:', tagArray);\n      \n      // 处理系列\n      if (selectedSeries === '新建系列' && newSeriesName.trim()) {\n        formData.append('series_name', newSeriesName.trim());\n      } else if (selectedSeries && selectedSeries !== '无' && selectedSeries !== '新建系列') {\n        formData.append('series_name', selectedSeries);\n      }\n      \n      // 处理封面图片\n      if (coverImage instanceof File) {\n        console.log('正在上传封面图片文件:', (coverImage as File).name);\n        // 修复：使用正确的字段名 'cover_image' 而不是 'cover_image_file'\n        formData.append('cover_image', coverImage);\n      } else if (typeof coverImage === 'string' && isEditing) {\n        // 保留现有封面图片URL\n        console.log('保留现有封面图片:', coverImage);\n        formData.append('keep_cover_image', 'true');\n        // 显式传递现有的封面图片URL，确保后端能正确处理\n        formData.append('existing_cover_image', coverImage);\n      }\n\n      // 记录发送的FormData内容，用于调试\n      console.log('提交的FormData内容:');\n      // 使用Array.from处理FormData迭代\n      const formDataEntries = Array.from(formData.entries());\n      formDataEntries.forEach(([key, value]) => {\n        if (key !== 'cover_image') { // 不输出大型二进制数据\n          console.log(`${key}: ${value}`);\n        } else {\n          console.log(`${key}: [文件数据]`);\n        }\n      });\n\n      const url = isEditing \n        ? `${API_BASE_URL}/api/articles/${slug}` \n        : `${API_BASE_URL}/api/articles/`;\n      \n      const method = isEditing ? 'put' : 'post';\n      \n      const response = await axios({\n        method,\n        url,\n        data: formData,\n        headers: {\n          'Authorization': `Bearer ${token}`,\n          'Content-Type': 'multipart/form-data',\n        }\n      });\n\n      setSuccess(isEditing ? '文章更新成功!' : '文章创建成功!');\n      \n      // 更新后使相关缓存失效，确保下次访问获取最新数据\n      if (isEditing && slug) {\n        console.log(`[NewArticlePageToast] 使文章缓存失效: ${slug}`);\n        // 使特定文章的缓存失效\n        queryClient.invalidateQueries({ queryKey: ['articleDetails', slug] });\n      }\n      \n      // 延迟跳转，让用户看到成功消息\n      setTimeout(() => {\n        navigate(`/article/${response.data.slug}`);\n      }, 1500);\n      \n    } catch (err: any) {\n      console.error('Error submitting article:', err);\n      setError(err.response?.data?.error || '提交文章失败，请稍后重试');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // 处理封面图片变更\n  const handleCoverImageChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    if (event.target.files && event.target.files[0]) {\n      const file = event.target.files[0];\n      setCoverImage(file);\n      \n      console.log('选择了新封面图片:', file.name, '大小:', (file.size / 1024).toFixed(2), 'KB');\n      \n      const reader = new FileReader();\n      reader.onloadend = () => {\n        const preview = reader.result as string;\n        setCoverPreview(preview);\n        console.log('封面预览已生成');\n      };\n      reader.readAsDataURL(file);\n    }\n  };\n\n  // 清除封面图片\n  const clearCoverImage = () => {\n    setCoverImage(null);\n    setCoverPreview(null);\n    if (fileInputRef.current) fileInputRef.current.value = '';\n  };\n\n  // 加载中状态\n  if (authChecking || (isEditing && initialDataLoading)) {\n    return (\n      <div style={{\n        width: '100%',\n        minHeight: '100vh',\n        backgroundColor: 'var(--bg-base-color)',\n        backgroundImage: 'var(--bg-gradient)',\n        display: 'flex',\n        justifyContent: 'center',\n        alignItems: 'center'\n      }}>\n        <div className=\"animate-spin text-white\">\n          <svg className=\"w-8 h-8\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\">\n            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15\"></path>\n          </svg>\n        </div>\n      </div>\n    );\n  }\n\n  if (error && !isEditing && !initialDataLoading) { // Show fatal error if loading failed during edit\n      return (\n          <div className=\"flex flex-col min-h-screen bg-transparent text-gray-100\">\n              {/* 移除Navbar组件 */}\n              <div className=\"flex flex-1 overflow-hidden\">\n                  {/* 移除SideNavbar组件 */}\n                  <main className={`flex-1 px-4 pt-2 pb-4 transition-all duration-300 ease-in-out overflow-y-auto ${isSidebarOpen ? 'lg:ml-56' : 'ml-0'}`}>\n                      <div className=\"bg-red-700 text-white p-4 rounded shadow-lg text-center\">\n                          <p className=\"text-lg font-semibold\">出错了</p>\n                          <p>{error}</p>\n                          <button \n                              onClick={() => navigate(isEditing ? `/article/${slug}` : '/articles')} \n                              className=\"mt-3 bg-white text-red-700 px-4 py-2 rounded\"\n                          >\n                              {isEditing ? '返回文章' : '返回列表'}\n                          </button>\n            </div>\n          </main>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"flex flex-col min-h-screen bg-transparent text-gray-100\">\n      {/* 移除Navbar组件 */}\n      <div className=\"flex flex-1 overflow-hidden\">\n        {/* 移除SideNavbar组件 */}\n        <main className={`flex-1 px-4 pt-2 pb-4 transition-all duration-300 ease-in-out overflow-y-auto ${isSidebarOpen ? 'lg:ml-56' : 'ml-0'}`}>\n          <h1 className=\"text-2xl font-bold mb-4\">{isEditing ? '编辑文章' : '创建新文章'}</h1>\n          {error && <div className=\"bg-red-700 text-white p-3 rounded mb-4\">{error}</div>}\n          {success && <div className=\"bg-green-700 text-white p-3 rounded mb-4\">{success}</div>}\n\n          <form\n            onSubmit={handleSubmit}\n            className=\"bg-gray-850/70 p-6 rounded-lg shadow-xl\"\n            onKeyDown={(e) => {\n              // 只允许提交按钮的回车提交表单\n              if (e.key === 'Enter' && e.target instanceof HTMLElement && e.target.tagName !== 'BUTTON') {\n                // 只有在textarea中且同时按下Shift键时才允许换行\n                if (!(e.target.tagName === 'TEXTAREA' && e.shiftKey)) {\n                  e.stopPropagation();\n                }\n              }\n            }}\n          >\n            <div className=\"mb-4\">\n              <label htmlFor=\"title\" className=\"block text-gray-200 mb-2 font-medium\">\n                文章标题\n              </label>\n              <input\n                type=\"text\"\n                id=\"title\"\n                value={title}\n                onChange={(e) => setTitle(e.target.value)}\n                onKeyDown={(e) => {\n                  if (e.key === 'Enter') {\n                    e.preventDefault();\n                  }\n                }}\n                required\n                className=\"w-full p-2 border border-gray-600 rounded bg-gray-700 text-gray-100 focus:ring-indigo-500 focus:border-indigo-500 placeholder-gray-400\"\n                placeholder=\"输入文章标题...\"\n              />\n            </div>\n\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-x-4 gap-y-5 mb-6\">\n              <div>\n                <label htmlFor=\"category\" className=\"block text-gray-200 mb-2 text-sm font-medium\">\n                  文章分类\n                </label>\n                <select\n                  id=\"category\"\n                  value={category}\n                  onChange={(e) => setCategory(e.target.value)}\n                  className=\"w-full p-2 border border-gray-600 rounded bg-gray-700 text-gray-100 text-sm focus:ring-indigo-500 focus:border-indigo-500\"\n                >\n                  <option value=\"\">-- 选择分类 --</option>\n                  {categoryOptions.map((option) => (\n                    <option key={option} value={option}>\n                      {option}\n                    </option>\n                  ))}\n                </select>\n              </div>\n\n              <div>\n                <label htmlFor=\"tags\" className=\"block text-gray-200 mb-2 text-sm font-medium\">\n                  标签 (用逗号分隔多个标签)\n                </label>\n                <input\n                  type=\"text\"\n                  id=\"tags\"\n                  value={tags}\n                  onChange={(e) => setTags(e.target.value)}\n                  className=\"w-full p-2 border border-gray-600 rounded bg-gray-700 text-gray-100 text-sm focus:ring-indigo-500 focus:border-indigo-500 placeholder-gray-400\"\n                  placeholder=\"支持中英文逗号，如：AI，机器学习,数据分析\"\n                />\n                <p className=\"mt-1 text-xs text-gray-400\">输入单个标签或用逗号分隔多个标签，无需添加#或其他字符</p>\n              </div>\n\n              <div>\n                <label htmlFor=\"series\" className=\"block text-gray-200 mb-2 text-sm font-medium\">\n                  所属系列\n                </label>\n                <select\n                  id=\"series\"\n                  value={selectedSeries}\n                  onChange={(e) => setSelectedSeries(e.target.value)}\n                  className=\"w-full p-2 border border-gray-600 rounded bg-gray-700 text-gray-100 text-sm focus:ring-indigo-500 focus:border-indigo-500\"\n                >\n                  <option value=\"\">-- 无 --</option>\n                  {userSeries.map((series) => (\n                    <option key={series} value={series}>\n                      {series}\n                    </option>\n                  ))}\n                  <option value=\"新建系列\">+ 新建系列</option>\n                </select>\n                {seriesError && <p className=\"mt-1 text-red-500 text-xs\">{seriesError}</p>}\n\n                {selectedSeries === '新建系列' && (\n                  <div className=\"mt-2\">\n                    <label htmlFor=\"newSeries\" className=\"sr-only\">\n                      新系列名称\n                    </label>\n                    <input\n                      type=\"text\"\n                      id=\"newSeries\"\n                      value={newSeriesName}\n                      onChange={(e) => setNewSeriesName(e.target.value)}\n                      className=\"w-full p-2 border border-gray-600 rounded bg-gray-700 text-gray-100 text-sm focus:ring-indigo-500 focus:border-indigo-500 placeholder-gray-400\"\n                      placeholder=\"输入新系列名称\"\n                    />\n                  </div>\n                )}\n              </div>\n\n              <div className=\"md:col-span-2 lg:col-span-3\">\n                 <label className=\"block text-gray-200 mb-2 text-sm font-medium\">\n                   封面图片\n                 </label>\n                 <div className=\"flex items-center space-x-3\">\n                   <input\n                     type=\"file\"\n                     ref={fileInputRef}\n                     onChange={handleCoverImageChange}\n                     accept=\"image/*\"\n                     className=\"text-sm text-gray-300 file:mr-4 file:py-2 file:px-4 file:rounded file:border-0 file:text-sm file:font-semibold file:bg-indigo-600 file:text-white hover:file:bg-indigo-700 cursor-pointer\"\n                   />\n                   {coverPreview && (\n                     <button\n                       type=\"button\"\n                       onClick={clearCoverImage}\n                       className=\"py-1 px-3 bg-red-600 text-white rounded text-sm hover:bg-red-700 focus:outline-none focus:ring-2 focus:ring-red-500 focus:ring-opacity-50\"\n                     >\n                       清除\n                     </button>\n                   )}\n                 </div>\n                 {coverPreview && (\n                   <div className=\"mt-3\">\n                     <img src={coverPreview} alt=\"Cover preview\" className=\"max-h-32 rounded\" />\n                   </div>\n                 )}\n               </div>\n            </div>\n\n            <div className=\"mb-6\">\n              <label className=\"block text-gray-200 mb-2 font-medium\">\n                文章内容\n              </label>\n              <ToastEditorWrapper\n                initialData={content}\n                onChange={handleEditorChange}\n                token={token}\n                placeholder=\"开始写作...\"\n              />\n            </div>\n\n            <div className=\"flex justify-end mt-6\">\n              <button\n                type=\"submit\"\n                disabled={isLoading || authChecking || initialDataLoading}\n                className=\"bg-indigo-600 hover:bg-indigo-700 text-white font-bold py-2 px-4 rounded disabled:opacity-50\"\n              >\n                {isLoading ? '正在提交...' : (isEditing ? '更新文章' : '发布文章')}\n              </button>\n            </div>\n          </form>\n        </main>\n      </div>\n    </div>\n  );\n};\n\nexport default NewArticlePageToast; "],"names":["categoryOptions","NewArticlePageToast","slug","useParams","isEditing","Boolean","queryClient","useQueryClient","title","setTitle","useState","content","setContent","category","setCategory","tags","setTags","coverImage","setCoverImage","coverPreview","setCoverPreview","initialDataLoading","setInitialDataLoading","userSeries","setUserSeries","selectedSeries","setSelectedSeries","newSeriesName","setNewSeriesName","seriesLoading","setSeriesLoading","seriesError","setSeriesError","error","setError","success","setSuccess","isLoading","setIsLoading","authChecking","setAuthChecking","navigate","useNavigate","token","user","authLoading","useAuth","isSidebarOpen","useSidebar","fileInputRef","useRef","handleEditorChange","useCallback","data","useEffect","console","log","email","state","from","async","response","axios","get","API_BASE_URL","headers","articleData","Array","isArray","cleanedTags","map","tag","String","trim","replace","filter","length","join","cover_image","series_name","err","_err$response","_err$response$data","message","fetchArticleData","substring","series_names","warn","status","fetchSeries","_jsx","style","width","minHeight","backgroundColor","backgroundImage","display","justifyContent","alignItems","children","className","fill","stroke","viewBox","xmlns","strokeLinecap","strokeLinejoin","strokeWidth","d","_jsxs","onSubmit","event","preventDefault","formData","FormData","append","tagArray","split","forEach","File","name","entries","_ref","key","value","url","method","invalidateQueries","queryKey","setTimeout","_err$response2","_err$response2$data","onKeyDown","e","target","HTMLElement","tagName","shiftKey","stopPropagation","htmlFor","type","id","onChange","required","placeholder","option","series","ref","files","file","size","toFixed","reader","FileReader","onloadend","preview","result","readAsDataURL","accept","onClick","clearCoverImage","current","src","alt","ToastEditorWrapper","initialData","disabled"],"sourceRoot":""}