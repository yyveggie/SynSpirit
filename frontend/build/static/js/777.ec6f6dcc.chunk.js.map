{"version":3,"file":"static/js/777.ec6f6dcc.chunk.js","mappings":"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","sources":["pages/Community.tsx"],"sourcesContent":["import React, { useState, useCallback, useEffect, useRef } from 'react';\nimport { useNavigate } from 'react-router-dom'; // 导入 useNavigate\nimport ReactFlow, {\n  Controls, // 导入控制按钮\n  Background, // 导入背景\n  addEdge, // 用于添加边的辅助函数\n  Connection, // 连接类型\n  Edge, // 边类型\n  Node, // 节点类型\n  useNodesState, // 管理节点状态的 Hook\n  useEdgesState, // 管理边状态的 Hook\n  NodeMouseHandler, // 导入节点鼠标事件处理器类型\n  OnNodesChange, // 节点变化事件类型\n} from 'reactflow';\nimport 'reactflow/dist/style.css';\nimport axios from 'axios'; // Import axios for API calls\nimport { API_BASE_URL } from '../config'; // Import API base URL\nimport { useSidebar } from '../contexts/SidebarContext'; // 引入 useSidebar\n\n// 为 Node 类型扩展，或者在 data 中添加 slug\ninterface TopicNodeData {\n  label: string;\n  slug?: string; // 添加 slug 字段\n}\n\n// --- REMOVE STATIC DATA ---\n// const initialNodes: Node<TopicNodeData>[] = [ ... ];\n// const initialEdges: Edge[] = [ ... ];\n// --- END REMOVE STATIC DATA ---\n\nconst CommunityPage: React.FC = () => {\n  const navigate = useNavigate(); // 获取 navigate 函数\n  const { isSidebarOpen } = useSidebar(); // 使用 Context\n  const [nodes, setNodes, onNodesChange] = useNodesState([]); \n  const [edges, setEdges, onEdgesChange] = useEdgesState([]);\n  const [isLoading, setIsLoading] = useState(true); // Add loading state\n  const [error, setError] = useState<string | null>(null); // Add error state\n  const [isAuthenticated, setIsAuthenticated] = useState(false); // 添加认证状态\n  const [saveStatus, setSaveStatus] = useState<'idle' | 'saving' | 'saved' | 'error'>('idle'); // 保存状态\n  const saveTimeoutRef = useRef<NodeJS.Timeout | null>(null); // 用于保存延迟的引用\n  const [hasLayoutChanged, setHasLayoutChanged] = useState(false); // 添加布局是否已更改状态\n\n  // 检查用户登录状态\n  useEffect(() => {\n    const token = localStorage.getItem('token');\n    if (token) {\n      setIsAuthenticated(true);\n    }\n  }, []);\n\n  // Fetch data from backend on component mount\n  useEffect(() => {\n    const fetchNetworkData = async () => {\n      setIsLoading(true);\n      setError(null);\n      try {\n        const token = localStorage.getItem('token');\n        const isLoggedIn = !!token;\n        setIsAuthenticated(isLoggedIn);\n        \n        // 根据用户登录状态使用不同的API端点\n        const endpoint = isLoggedIn \n          ? `${API_BASE_URL}/api/topics/user_network`\n          : `${API_BASE_URL}/api/topics/network`;\n        \n        // 如果用户已登录，添加授权头\n        const config = isLoggedIn \n          ? { headers: { Authorization: `Bearer ${token}` } }\n          : {};\n        \n        const response = await axios.get<{ nodes: Node<TopicNodeData>[], edges: Edge[] }>(\n          endpoint, \n          config\n        );\n        \n        console.log(\"Fetched network data:\", response.data);\n        setNodes(response.data.nodes || []); \n        setEdges(response.data.edges || []);\n      } catch (err) {\n        console.error(\"Failed to fetch topic network:\", err);\n        setError('无法加载社区网络图数据。');\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    fetchNetworkData();\n  }, [setNodes, setEdges]); // Dependencies ensure fetch runs once on mount\n\n  // 当用户尝试连接节点时调用的回调函数\n  const onConnect = useCallback(\n    (params: Edge | Connection) => setEdges((eds) => addEdge(params, eds)),\n    [setEdges],\n  );\n\n  // 保存节点位置的函数\n  const saveNodePositions = useCallback(async () => {\n    if (!isAuthenticated || !hasLayoutChanged) {\n      return; // 未登录或布局未变化时不保存\n    }\n    \n    setSaveStatus('saving');\n    try {\n      const token = localStorage.getItem('token');\n      const response = await axios.post(\n        `${API_BASE_URL}/api/topics/save_positions`,\n        { nodes },\n        { headers: { Authorization: `Bearer ${token}` } }\n      );\n      \n      console.log('Positions saved:', response.data);\n      setSaveStatus('saved');\n      setHasLayoutChanged(false); // 重置布局变化状态\n      \n      // 3秒后重置保存状态\n      setTimeout(() => {\n        setSaveStatus('idle');\n      }, 3000);\n    } catch (err) {\n      console.error('Failed to save node positions:', err);\n      setSaveStatus('error');\n    }\n  }, [nodes, isAuthenticated, hasLayoutChanged]);\n  \n  // 使用 Debounce 延迟保存，避免频繁 API 调用\n  const debounceSavePositions = useCallback(() => {\n    if (saveTimeoutRef.current) {\n      clearTimeout(saveTimeoutRef.current);\n    }\n    \n    saveTimeoutRef.current = setTimeout(() => {\n      saveNodePositions();\n    }, 2000); // 2秒后保存\n  }, [saveNodePositions]);\n\n  // 当节点拖拽结束时调用\n  const handleNodeDragStop = useCallback(() => {\n    console.log('Node dragging stopped, scheduling position save');\n    setHasLayoutChanged(true); // 标记布局已变化\n    debounceSavePositions();\n  }, [debounceSavePositions]);\n\n  // 节点点击事件处理器\n  const handleNodeClick: NodeMouseHandler = useCallback((event, node) => {\n    const nodeSlug = node.data?.slug; // 获取节点的 slug\n    if (nodeSlug) {\n      console.log(`节点 ${node.id} (${node.data.label}) 被点击, slug: ${nodeSlug}, 导航到 /community/topic/${nodeSlug}`);\n      navigate(`/community/topic/${nodeSlug}`); // 跳转到对应社区主题页面\n    } else {\n      console.warn(`节点 ${node.id} (${node.data.label}) 被点击, 但缺少 slug 数据`);\n    }\n  }, [navigate]);\n\n  // --- 新增：边点击事件处理器 ---\n  const handleEdgeClick = useCallback(async (event: React.MouseEvent, edge: Edge) => {\n    console.log(`边 ${edge.id} (从 ${edge.source} 到 ${edge.target}) 被点击`);\n    \n    // 检查用户是否登录\n    const token = localStorage.getItem('token');\n    if (!token) {\n      // 可以提示用户登录或重定向到登录页\n      // 为了简单起见，暂时只在控制台打印信息\n      console.warn('用户未登录，无法创建或跳转到关系主题。');\n      // 可以添加 toast 提示:\n      // toast.warn('请登录后查看或创建关系讨论区');\n      return; \n    }\n\n    try {\n      // 调用后端接口创建或获取关系主题\n      const response = await axios.post(\n        `${API_BASE_URL}/api/relationship-topics/from-topics`,\n        { \n          topic_id_1: parseInt(edge.source), // 确保 ID 是数字\n          topic_id_2: parseInt(edge.target)  // 确保 ID 是数字\n        },\n        { \n          headers: { Authorization: `Bearer ${token}` } \n        }\n      );\n      \n      // 从响应中获取 slug\n      const relationshipSlug = response.data?.slug;\n      \n      if (relationshipSlug) {\n        console.log(`获取到关系主题 slug: ${relationshipSlug}, 导航到 /community/relationship-topic/${relationshipSlug}`);\n        // 跳转到关系主题页面\n        navigate(`/community/relationship-topic/${relationshipSlug}`);\n      } else {\n        console.error('从后端获取关系主题 slug 失败', response.data);\n        // 可以添加 toast 错误提示:\n        // toast.error('无法获取关系讨论区信息');\n      }\n    } catch (err: any) {\n      console.error('调用 /from-topics 接口失败:', err);\n      // 可以根据错误类型显示不同的提示\n      if (err.response && err.response.status === 401) {\n         console.error('认证失败或令牌过期');\n         // toast.error('请重新登录');\n         // 可能需要清除本地 token 并重定向到登录页\n         // localStorage.removeItem('token');\n         // navigate('/login');\n      } else {\n        // toast.error('加载关系讨论区时出错');\n      }\n    }\n  }, [navigate]); // 依赖 navigate\n  // --- 结束新增 ---\n\n  // 清理 timeout\n  useEffect(() => {\n    return () => {\n      if (saveTimeoutRef.current) {\n        clearTimeout(saveTimeoutRef.current);\n      }\n    };\n  }, []);\n\n  return (\n    <div className=\"flex flex-col h-screen text-white\">\n      <div className=\"flex flex-1 overflow-hidden pt-16\">\n        <main className={`flex-1 transition-all duration-300 ease-in-out overflow-auto ${isSidebarOpen ? 'lg:ml-56' : 'ml-0'}`}>\n          <div className=\"w-full h-full relative\">\n            {isLoading && (\n              <div className=\"absolute inset-0 flex items-center justify-center bg-gray-900/50 z-10\">\n                <p className=\"text-white text-lg\">正在加载网络图...</p>\n              </div>\n            )}\n            {error && (\n              <div className=\"absolute inset-0 flex items-center justify-center bg-red-900/80 z-10\">\n                <p className=\"text-white text-lg\">错误: {error}</p>\n              </div>\n            )}\n            \n            {saveStatus !== 'idle' && (\n              <div className={`absolute top-4 left-4 py-2 px-4 rounded-md z-20 transition-opacity duration-300 \n                backdrop-filter backdrop-blur-md border border-gray-200/30\n                ${\n                  saveStatus === 'saving' ? 'bg-blue-500/70 text-white' : \n                  saveStatus === 'saved' ? 'bg-green-500/70 text-white' : \n                  'bg-red-500/70 text-white'\n                }`}>\n                  {saveStatus === 'saving' ? '保存中...' : saveStatus === 'saved' ? '已保存' : '保存失败'}\n              </div>\n            )}\n            \n            {!isLoading && !error && (\n              <ReactFlow\n                nodes={nodes}\n                edges={edges}\n                onNodesChange={onNodesChange as OnNodesChange}\n                onEdgesChange={onEdgesChange}\n                onConnect={onConnect}\n                onNodeDragStop={handleNodeDragStop}\n                onNodeClick={handleNodeClick}\n                onEdgeClick={handleEdgeClick}\n                fitView\n                className=\"bg-transparent\"\n              >\n                <Controls />\n                <Background \n                   // variant=\"dots\" // Temporarily remove variant to fix type error\n                   gap={12} \n                   size={1} \n                   color=\"#4a5568\"\n                />\n              </ReactFlow>\n            )}\n          </div>\n        </main>\n      </div>\n    </div>\n  );\n};\n\nexport default CommunityPage; "],"names":["CommunityPage","navigate","useNavigate","isSidebarOpen","useSidebar","nodes","setNodes","onNodesChange","useNodesState","edges","setEdges","onEdgesChange","useEdgesState","isLoading","setIsLoading","useState","error","setError","isAuthenticated","setIsAuthenticated","saveStatus","setSaveStatus","saveTimeoutRef","useRef","hasLayoutChanged","setHasLayoutChanged","useEffect","localStorage","getItem","async","token","isLoggedIn","endpoint","API_BASE_URL","config","headers","Authorization","response","axios","get","console","log","data","err","fetchNetworkData","onConnect","useCallback","params","eds","addEdge","saveNodePositions","post","setTimeout","debounceSavePositions","current","clearTimeout","handleNodeDragStop","handleNodeClick","event","node","_node$data","nodeSlug","slug","id","label","warn","handleEdgeClick","edge","source","target","_response$data","topic_id_1","parseInt","topic_id_2","relationshipSlug","status","_jsx","className","children","_jsxs","ReactFlow","onNodeDragStop","onNodeClick","onEdgeClick","fitView","Controls","Background","gap","size","color"],"sourceRoot":""}