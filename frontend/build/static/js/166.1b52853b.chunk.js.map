{"version":3,"file":"static/js/166.1b52853b.chunk.js","mappings":"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","sources":["components/SideNavbar.tsx","components/UserListModal.tsx","components/FollowStats.tsx","pages/ProfilePage.tsx"],"sourcesContent":["/**\n * 此文件定义了 SideNavbar 组件，即应用程序的侧边导航栏。\n * 注意：该组件当前已被禁用，导航功能已移至顶部导航栏。\n * 保留此文件是为了将来可能的扩展或恢复需求。\n *\n * 主要功能:\n * - 提供垂直的导航链接列表。\n * - 侧边栏的展开和收起状态由全局 SidebarContext 管理。\n * - 包含到应用主要部分的链接 (如首页、文章、工具、社区、聊天等)。\n * - 使用 TanStack Query (`useUserFavorites`) 获取并显示用户收藏的社区列表。\n * - 可能包含热门工具或其他动态内容的展示区域。\n * - 响应式设计，可能在小屏幕上隐藏或以不同方式显示。\n * - 选中导航项时显示优雅的渐变背景（浅绿到浅蓝）、微发光和放大动画，无边框。\n * - 当选中收藏的社区时，\"社区\"导航项不显示选中状态。\n *\n * 注意: 如果新增、删除或修改功能，必须在这开头的注释中同步修改，\n * 如发现功能与注释描述不同，也可以在确定后修改。\n *\n * --- 重构说明 ---\n * - 收藏列表现在由 TanStack Query (`useUserFavorites`) 管理，移除了手动缓存和状态管理。\n * - `favoritesUpdated` 事件现在通过 invalidate 查询来更新列表，而不是手动更新状态。\n * - 选中样式更新为渐变背景、微发光和优雅动画，防止其他选项移动。\n * - 调整社区选中逻辑，收藏社区选中时社区导航不激活。\n */\nimport React, { useEffect, useCallback, memo } from 'react';\nimport { Link, useLocation } from 'react-router-dom';\nimport { useAuth } from '../context/AuthContext';\nimport { useSidebar } from '../contexts/SidebarContext';\nimport { useQueryClient } from '@tanstack/react-query';\nimport { useUserFavorites, FavoriteItem } from '../hooks/useFavoriteQueries';\n\n// --- Memoized FavoriteList Component ---\nconst FavoriteList = memo(({ items, locationPathname }: { items: FavoriteItem[], locationPathname: string }) => {\n  return (\n    <div className=\"mt-1 space-y-1\">\n      {items.map(item => (\n        <Link\n          key={`${item.type}-${item.id}`}\n          to={item.type === 'topic' ? `/community/topic/${item.slug}` : `/community/relationship-topic/${item.slug}`}\n          className={`group flex items-center px-2 py-1.5 text-sm font-medium rounded-md transition-all duration-200 ease-[cubic-bezier(0.4,0,0.2,1)] ${\n            locationPathname.endsWith(`/${item.slug}`)\n              ? 'text-white bg-gradient-to-r from-green-200/30 to-blue-200/30 scale-103 opacity-100 shadow-inner'\n              : 'text-gray-300 hover:bg-gradient-to-r hover:from-green-200/10 hover:to-blue-200/10 hover:scale-103 hover:opacity-90 hover:shadow-sm'\n          }`}\n        >\n          <span className={`mr-2.5 h-2 w-2 rounded-full flex-shrink-0 ${\n            item.type === 'topic' ? 'bg-gradient-to-r from-cyan-400 to-blue-500' : 'bg-gradient-to-r from-purple-400 to-pink-500'\n          }`}></span>\n          <span className=\"truncate\">{item.name}</span>\n        </Link>\n      ))}\n    </div>\n  );\n});\nFavoriteList.displayName = 'FavoriteList';\n\nconst SideNavbar: React.FC = () => {\n  const { isSidebarOpen } = useSidebar();\n  const location = useLocation();\n  const { user, token } = useAuth();\n  const queryClient = useQueryClient();\n\n  const {\n    data: favoriteItems = [],\n    isLoading: loadingFavorites,\n  } = useUserFavorites(token);\n\n  const handleFavoritesUpdated = useCallback(() => {\n    queryClient.invalidateQueries({ queryKey: ['userFavorites'] });\n  }, [queryClient]);\n\n  useEffect(() => {\n    window.addEventListener('favoritesUpdated', handleFavoritesUpdated);\n    return () => {\n      window.removeEventListener('favoritesUpdated', handleFavoritesUpdated);\n    };\n  }, [handleFavoritesUpdated]);\n\n  const isActive = (path: string) => {\n    return location.pathname === path;\n  };\n\n  const isActivePrefix = (prefix: string) => {\n    if (prefix === '/community') {\n      return location.pathname === '/community';\n    }\n    return location.pathname.startsWith(prefix);\n  };\n\n  // 组件被保留但不再显示，返回null\n  return null;\n};\n\nexport default SideNavbar;","import React, { useState, useEffect, useRef } from 'react';\nimport { Link } from 'react-router-dom'; // 用于链接到用户主页\n\n// 定义列表中的用户信息接口\ninterface UserInfo {\n  id: number;\n  nickname: string;\n  avatar: string | null;\n}\n\ninterface UserListModalProps {\n  isOpen: boolean;                // Modal 是否可见\n  onClose: () => void;           // 关闭 Modal 的回调函数\n  title: string;                  // Modal 标题 (\"关注列表\" 或 \"粉丝列表\")\n  users: UserInfo[];              // 要显示的用户列表\n  isLoading: boolean;             // 是否正在加载列表数据\n}\n\n/**\n * @component UserListModal\n * @description 一个可重用的模态框组件，用于显示用户列表（关注/粉丝）。\n *              支持平滑动画过渡和现代UI设计。\n */\nconst UserListModal: React.FC<UserListModalProps> = ({ \n  isOpen,\n  onClose,\n  title,\n  users,\n  isLoading \n}) => {\n  // 使用内部状态来控制动画，确保动画在挂载/卸载时正确执行\n  const [showModal, setShowModal] = useState(false);\n  const [animationClass, setAnimationClass] = useState('');\n  const timerRef = useRef<NodeJS.Timeout | null>(null);\n\n  useEffect(() => {\n    if (isOpen) {\n      // 打开动画：分两步执行\n      setShowModal(true); // 先挂载组件\n      // 确保模态框打开时禁止页面滚动\n      document.body.style.overflow = 'hidden';\n      \n      // 短暂延迟后添加动画类，创造渐入效果\n      timerRef.current = setTimeout(() => {\n        setAnimationClass('modal-enter-active');\n      }, 50); // 小延迟确保DOM已渲染\n    } else {\n      // 关闭动画：先设置关闭动画类\n      setAnimationClass('modal-exit-active');\n      \n      // 等待动画结束后卸载\n      timerRef.current = setTimeout(() => {\n        setShowModal(false);\n        // 恢复页面滚动\n        document.body.style.overflow = '';\n      }, 600); // 延长退出动画时间\n    }\n    \n    return () => {\n      // 清理定时器\n      if (timerRef.current) {\n        clearTimeout(timerRef.current);\n      }\n    };\n  }, [isOpen]);\n\n  // 如果内部状态为 false，则不渲染任何内容\n  if (!showModal) {\n    return null;\n  }\n\n  return (\n    // 背景容器\n    <div \n      className={`fixed inset-0 z-50 flex items-center justify-center ${animationClass}`}\n      onClick={onClose}\n      style={{\n        // 添加过渡样式\n        transition: 'opacity 500ms ease-out',\n        opacity: animationClass === 'modal-enter-active' ? 1 : 0\n      }}\n    >\n      {/* Modal 内容区域 - 使用渐变背景 */} \n      <div \n        className={`\n          relative mb-16 \n          overflow-hidden flex flex-col \n          w-full max-w-lg max-h-[85vh]\n          rounded-2xl\n          border border-white/10 \n          shadow-[0_10px_40px_rgba(0,0,0,0.3)]\n        `}\n        onClick={(e) => e.stopPropagation()}\n        style={{\n          background: 'linear-gradient(135deg, rgba(59, 73, 111, 0.85) 0%, rgba(45, 51, 77, 0.9) 100%)',\n          backdropFilter: 'blur(12px)',\n          transform: animationClass === 'modal-enter-active' \n            ? 'translateY(0) scale(1)' \n            : 'translateY(80px) scale(0.95)',\n          opacity: animationClass === 'modal-enter-active' ? 1 : 0,\n          transition: 'transform 700ms cubic-bezier(0.19, 1, 0.22, 1), opacity 700ms cubic-bezier(0.19, 1, 0.22, 1)',\n        }}\n      >\n        {/* 装饰性光晕效果 */}\n        <div className=\"absolute -top-20 -right-20 w-40 h-40 rounded-full bg-indigo-500/20 blur-3xl pointer-events-none\"></div>\n        <div className=\"absolute -bottom-20 -left-20 w-40 h-40 rounded-full bg-purple-500/20 blur-3xl pointer-events-none\"></div>\n        \n        {/* Modal 头部 */} \n        <div className=\"flex items-center justify-between px-6 py-4 border-b border-white/10 relative z-10\">\n          <h2 className=\"text-lg font-medium text-white\">{title}</h2>\n          <button \n            onClick={onClose}\n            className=\"w-8 h-8 flex items-center justify-center rounded-full text-white/70 hover:text-white hover:bg-white/10 transition-all duration-300\"\n            aria-label=\"关闭\"\n          >\n            <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-5 w-5\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\" strokeWidth={1.5}>\n              <path strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"M6 18L18 6M6 6l12 12\" />\n            </svg>\n          </button>\n        </div>\n\n        {/* Modal 内容 (用户列表) */} \n        <div className=\"p-4 overflow-y-auto flex-grow relative z-10\">\n          {isLoading ? (\n            // 加载状态 - 更精致的加载动画\n            <div className=\"flex flex-col justify-center items-center h-40 text-white/80\">\n              <div className=\"relative w-12 h-12 mb-4\">\n                <div className=\"absolute inset-0 rounded-full border-2 border-indigo-400/20 border-t-indigo-400 animate-spin\"></div>\n              </div>\n              <p className=\"text-sm font-light\">正在加载用户列表...</p>\n            </div>\n          ) : users.length > 0 ? (\n            // 用户列表 - 现代卡片式设计\n            <ul className=\"space-y-1.5\">\n              {users.map(user => (\n                <li key={user.id} className=\"group rounded-xl overflow-hidden hover:bg-white/10 transition-all duration-300\">\n                  <Link to={`/profile/${user.id}`} className=\"p-3 flex items-center space-x-3\" onClick={onClose}> \n                    {/* 用户头像 */}\n                    <div className=\"relative flex-shrink-0\">\n                      {user.avatar ? (\n                        <img \n                          src={user.avatar} \n                          alt={`${user.nickname}的头像`} \n                          className=\"w-10 h-10 rounded-full object-cover border-2 border-transparent group-hover:border-indigo-400/60 transition-all duration-300\"\n                        />\n                      ) : (\n                        <div className=\"w-10 h-10 rounded-full bg-gradient-to-br from-indigo-400 to-purple-500 flex items-center justify-center text-white text-lg font-medium border-2 border-transparent group-hover:border-indigo-400/60 transition-all duration-300 shadow-inner\">\n                          {user.nickname?.charAt(0).toUpperCase() || 'U'}\n                        </div>\n                      )}\n                      <div className=\"absolute inset-0 rounded-full bg-black/0 group-hover:bg-black/10 transition-colors duration-300\"></div>\n                    </div>\n                    \n                    {/* 用户名称 */}\n                    <div className=\"flex-grow overflow-hidden\">\n                      <p className=\"font-medium text-white truncate group-hover:text-indigo-300 transition-colors duration-300\">\n                        {user.nickname || '未设置昵称'}\n                      </p>\n                    </div>\n                    \n                    {/* 箭头指示器 */}\n                    <div className=\"text-white/40 group-hover:text-indigo-300 transform translate-x-0 group-hover:translate-x-2 transition-all duration-500 ease-out\">\n                      <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-4 w-4\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                        <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M9 5l7 7-7 7\" />\n                      </svg>\n                    </div>\n                  </Link>\n                </li>\n              ))}\n            </ul>\n          ) : (\n            // 空状态 - 优雅的设计\n            <div className=\"flex flex-col items-center justify-center py-14 text-center\">\n              <div className=\"w-16 h-16 rounded-full bg-white/10 flex items-center justify-center mb-4\">\n                <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-8 w-8 text-white/40\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                  <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={1.5} d=\"M12 4.354a4 4 0 110 5.292M15 21H3v-1a6 6 0 0112 0v1zm0 0h6v-1a6 6 0 00-9-5.197M13 7a4 4 0 11-8 0 4 4 0 018 0z\" />\n                </svg>\n              </div>\n              <p className=\"text-white/60 font-light\">暂无用户</p>\n            </div>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default UserListModal; ","import React, { useState, useEffect, useCallback } from 'react';\nimport axios from 'axios';\nimport { API_BASE_URL } from '../config';\nimport { useAuth } from '../context/AuthContext'; // 用于获取当前用户信息和 token\nimport { toast } from 'react-toastify';\nimport UserListModal from './UserListModal'; // <-- 导入 Modal 组件\n\n// 定义列表中的用户信息接口 (也可以单独放到 types 文件中)\ninterface UserInfo {\n  id: number;\n  nickname: string;\n  avatar: string | null;\n}\n\ninterface FollowStatsProps {\n  targetUserId: number;   // 目标用户的 ID\n  isOwnProfile: boolean; // 是否是当前登录用户自己的主页\n}\n\n/**\n * @component FollowStats\n * @description 显示用户的关注数、粉丝数，并提供关注/取消关注按钮（如果不是用户自己的主页）。\n */\nconst FollowStats: React.FC<FollowStatsProps> = ({ targetUserId, isOwnProfile }) => {\n  const { user: currentUser, token } = useAuth(); // 获取当前登录用户和 token\n  const [followerCount, setFollowerCount] = useState<number | null>(null);\n  const [followingCount, setFollowingCount] = useState<number | null>(null);\n  const [isFollowing, setIsFollowing] = useState<boolean>(false); // 当前登录用户是否关注了目标用户\n  const [isLoadingCounts, setIsLoadingCounts] = useState(true);\n  const [isLoadingStatus, setIsLoadingStatus] = useState(true); // 加载关注状态\n  const [isProcessingFollow, setIsProcessingFollow] = useState(false); // 正在处理关注/取关请求\n\n  // --- 新增 Modal 相关状态 ---\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const [modalTitle, setModalTitle] = useState(''); // Modal 标题\n  const [userList, setUserList] = useState<UserInfo[]>([]); // 存储从 API 获取的用户列表\n  const [isLoadingList, setIsLoadingList] = useState(false); // 列表加载状态\n  const [listType, setListType] = useState<'following' | 'followers' | null>(null); // 当前加载的列表类型\n  // 可选：添加分页状态\n  // const [currentPage, setCurrentPage] = useState(1);\n  // const [totalPages, setTotalPages] = useState(1);\n  // const [hasMore, setHasMore] = useState(true);\n  // --- 结束新增 --- \n\n  // 获取关注数和粉丝数\n  const fetchCounts = useCallback(async () => {\n    setIsLoadingCounts(true);\n    try {\n      const [followersRes, followingRes] = await Promise.all([\n        axios.get<{ count: number }>(`${API_BASE_URL}/api/users/${targetUserId}/followers/count`),\n        axios.get<{ count: number }>(`${API_BASE_URL}/api/users/${targetUserId}/following/count`),\n      ]);\n      setFollowerCount(followersRes.data.count);\n      setFollowingCount(followingRes.data.count);\n    } catch (error) {\n      // 可以选择设置错误状态或显示默认值\n      setFollowerCount(0);\n      setFollowingCount(0);\n    } finally {\n      setIsLoadingCounts(false);\n    }\n  }, [targetUserId]);\n\n  // 获取当前用户的关注状态\n  const fetchFollowStatus = useCallback(async () => {\n    // 只有登录用户才能检查关注状态，且目标不是自己\n    if (!token || isOwnProfile) {\n      setIsLoadingStatus(false);\n      setIsFollowing(false); // 未登录或看自己主页，肯定没关注\n      return;\n    }\n    setIsLoadingStatus(true);\n    try {\n      const response = await axios.get<{ isFollowing: boolean }>(\n        `${API_BASE_URL}/api/users/${targetUserId}/follow-status`,\n        { headers: { Authorization: `Bearer ${token}` } }\n      );\n      setIsFollowing(response.data.isFollowing);\n    } catch (error) {\n      setIsFollowing(false); // 出错时默认为未关注\n    } finally {\n      setIsLoadingStatus(false);\n    }\n  }, [targetUserId, token, isOwnProfile]);\n\n  // 首次加载或 targetUserId 变化时，获取数据\n  useEffect(() => {\n    fetchCounts();\n    fetchFollowStatus();\n  }, [targetUserId, fetchCounts, fetchFollowStatus]); // 依赖 targetUserId 和回调函数\n\n  // 处理关注操作\n  const handleFollow = async () => {\n    if (!token || isProcessingFollow || isOwnProfile) return;\n    setIsProcessingFollow(true);\n    try {\n      const response = await axios.post(\n        `${API_BASE_URL}/api/users/${targetUserId}/follow`,\n        {}, // POST 请求体为空\n        { headers: { Authorization: `Bearer ${token}` } }\n      );\n      if (response.status === 201 || response.status === 200) {\n        setIsFollowing(true);\n        // 关注成功后，粉丝数+1\n        setFollowerCount(prev => (prev !== null ? prev + 1 : 1));\n        toast.success('关注成功！');\n      } else {\n          throw new Error(response.data?.error || '关注失败');\n      }\n    } catch (error: any) {\n      toast.error(`关注失败: ${error.response?.data?.error || error.message}`);\n    } finally {\n      setIsProcessingFollow(false);\n    }\n  };\n\n  // 处理取消关注操作\n  const handleUnfollow = async () => {\n    if (!token || isProcessingFollow || isOwnProfile) return;\n    setIsProcessingFollow(true);\n    try {\n      const response = await axios.delete(\n        `${API_BASE_URL}/api/users/${targetUserId}/follow`,\n        { headers: { Authorization: `Bearer ${token}` } }\n      );\n      if (response.status === 200) {\n        setIsFollowing(false);\n        // 取关成功后，粉丝数-1\n        setFollowerCount(prev => (prev !== null && prev > 0 ? prev - 1 : 0));\n        toast.info('已取消关注');\n      } else {\n         throw new Error(response.data?.error || '取消关注失败');\n      }\n    } catch (error: any) {\n       toast.error(`取消关注失败: ${error.response?.data?.error || error.message}`);\n    } finally {\n      setIsProcessingFollow(false);\n    }\n  };\n\n  /**\n   * @function fetchUserList\n   * @description 获取关注列表或粉丝列表\n   * @param type {'following' | 'followers'} 要获取的列表类型\n   */\n  const fetchUserList = useCallback(async (type: 'following' | 'followers') => {\n    if (!targetUserId) return;\n    setIsLoadingList(true);\n    setUserList([]); // 清空旧列表\n    setListType(type);\n    setModalTitle(type === 'following' ? '关注列表' : '粉丝列表');\n    setIsModalOpen(true);\n    // setCurrentPage(1); // 重置分页\n\n    try {\n      const response = await axios.get<{users: UserInfo[], total: number, page: number, pages: number}>(\n        `${API_BASE_URL}/api/users/${targetUserId}/${type}`,\n        { params: { page: 1, limit: 50 } } // 暂时一次加载较多，后续可实现分页\n      );\n      if (response.data && response.data.users) {\n        setUserList(response.data.users);\n        // setTotalPages(response.data.pages);\n        // setHasMore(response.data.page < response.data.pages);\n      } else {\n        setUserList([]);\n        // setTotalPages(1);\n        // setHasMore(false);\n      }\n    } catch (error) {\n      toast.error(`加载${type === 'following' ? '关注' : '粉丝'}列表失败`);\n      setUserList([]);\n      // setTotalPages(1);\n      // setHasMore(false);\n      setIsModalOpen(false); // 出错时关闭 Modal\n    } finally {\n      setIsLoadingList(false);\n    }\n  }, [targetUserId]);\n\n  // 打开 Modal 的辅助函数\n  const openFollowingList = () => fetchUserList('following');\n  const openFollowersList = () => fetchUserList('followers');\n  const closeModal = () => setIsModalOpen(false);\n\n  // 渲染加载状态或数字的函数\n  const renderCount = (count: number | null, label: string, onClickHandler: () => void) => {\n    const isLoading = isLoadingCounts; // 使用关注/粉丝总数的加载状态\n    const numberToShow = count ?? 0;\n\n    return (\n      <button \n        className=\"text-center cursor-pointer group disabled:cursor-default\" \n        onClick={onClickHandler} \n        disabled={isLoading || numberToShow === 0} // 加载中或数量为0时不可点击\n        title={isLoading ? '加载中' : (numberToShow > 0 ? `查看${label}列表` : `暂无${label}`)}\n      >\n        <span className={`block text-base font-semibold text-white group-hover:text-indigo-300 transition-colors ${isLoading || numberToShow === 0 ? 'text-gray-500 group-hover:text-gray-500' : ''}`}>\n          {isLoading ? '...' : numberToShow}\n        </span>\n        <span className={`block text-xs group-hover:text-gray-200 transition-colors ${isLoading || numberToShow === 0 ? 'text-gray-600 group-hover:text-gray-600' : 'text-gray-400'}`}>\n          {label}\n        </span>\n      </button>\n    );\n  };\n\n  return (\n    <>\n      {/* 关注/粉丝显示区域 */} \n      <div className=\"mt-4 flex items-center justify-center space-x-4 p-2\">\n        {/* 关注数 - 可点击 */}\n        {renderCount(followingCount, '关注', openFollowingList)}\n\n        {/* 分隔线 */}\n        <div className=\"h-6 w-px bg-gray-500/40\"></div>\n\n        {/* 粉丝数 - 可点击 */}\n        {renderCount(followerCount, '粉丝', openFollowersList)}\n\n        {/* 关注/取消关注按钮 */}\n        {!isOwnProfile && currentUser && (\n          <>\n            <div className=\"h-6 w-px bg-gray-500/40\"></div>\n            <button\n              onClick={isFollowing ? handleUnfollow : handleFollow}\n              disabled={isLoadingStatus || isProcessingFollow}\n              className={`px-3 py-1 rounded-md text-xs font-medium transition-colors duration-200 flex items-center justify-center min-w-[70px] ${ \n                isProcessingFollow ? 'opacity-50 cursor-not-allowed' : ''\n              } ${ \n                isFollowing\n                  ? 'bg-gray-600/70 text-gray-300 hover:bg-gray-500/70' \n                  : 'bg-indigo-600 text-white hover:bg-indigo-700'\n              }`}\n            >\n              {isLoadingStatus ? (\n                <svg className=\"animate-spin h-4 w-4 text-white\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\">\n                  <circle className=\"opacity-25\" cx=\"12\" cy=\"12\" r=\"10\" stroke=\"currentColor\" strokeWidth=\"4\"></circle>\n                  <path className=\"opacity-75\" fill=\"currentColor\" d=\"M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z\"></path>\n                </svg>\n              ) : isProcessingFollow ? (\n                   isFollowing ? '取消中...' : '关注中...'\n              ) : (\n                isFollowing ? '已关注' : '+ 关注'\n              )}\n            </button>\n          </>\n        )}\n      </div>\n\n      {/* 用户列表 Modal */}\n      <UserListModal \n        isOpen={isModalOpen}\n        onClose={closeModal}\n        title={modalTitle}\n        users={userList}\n        isLoading={isLoadingList}\n      />\n    </>\n  );\n};\n\nexport default FollowStats; ","import React, { useState, useEffect, useRef, useCallback } from 'react';\nimport { useNavigate, Link, useParams } from 'react-router-dom';\nimport SideNavbar from '../components/SideNavbar';\nimport api from '../utils/api'; // 导入api工具\nimport { API_BASE_URL } from '../config'; // 导入API基础URL\nimport { useAuth } from '../context/AuthContext'; // Import useAuth to check login status\nimport axios from 'axios'; // Use axios for simplicity with interceptor\nimport { toast } from 'react-toastify'; // 导入 toast\nimport { useSidebar } from '../contexts/SidebarContext'; // <-- 导入 useSidebar\n// --- 新增：重新导入 DynamicDetails --- \nimport { DynamicDetails } from '../components/QuotedDynamicView'; \n// --- 结束新增 ---\nimport FollowStats from '../components/FollowStats'; // <-- 导入新组件\n\ninterface ProfilePageProps {\n  isMe: boolean; // 由路由传递，指示是否是 /profile/me\n}\n\ninterface UserData {\n  id: number;\n  email: string; // Keep for login reference if needed, but might hide from display\n  is_active: boolean;\n  is_admin: boolean;\n  last_login: string | null;\n  created_at: string;\n  bio?: string | null;\n  nickname?: string | null; // Add nickname\n  avatar?: string | null; // 确认 avatar 字段存在\n  tags?: string[]; // 用户标签数组\n}\n\ninterface ArticleSummary {\n    id: number;\n    title: string;\n    slug: string;\n    summary?: string | null;\n    content?: string; // For excerpt generation\n    created_at: string;\n    tags?: string[] | null;\n    series_name?: string | null;\n    series_articles?: any[] | null; // Keep type consistent with ArticleCard\n}\n\ninterface PostSummary {\n    id: number;\n    title: string;\n    slug: string; // 帖子详情页用 ID，但列表可能仍用 slug 预览？或者也改成 id\n    content?: string; // For excerpt generation\n    created_at: string;\n    topic?: { // 帖子关联的主题信息\n        id: number;\n        name: string;\n        slug: string;\n    } | null;\n    author: { id: number; }; // 只需要作者 ID 用于权限判断\n}\n\ntype DynamicSummary = DynamicDetails;\n\n// --- 新增：系列名称接口 --- \ninterface SeriesSummary {\n  series_name: string;\n  // 可以添加文章数量等信息 (如果后端支持)\n}\n// --- 结束新增 ---\n\n// --- 新增：通用分页组件 ---\ninterface PaginationProps {\n  currentPage: number;\n  totalPages: number;\n  onPageChange: (page: number) => void;\n  isLoading: boolean;\n}\n\n// 调整Pagination组件的透明度\nconst Pagination: React.FC<PaginationProps> = ({ currentPage, totalPages, onPageChange, isLoading }) => {\n  // 修改判断条件：只在 totalPages < 1 时不渲染\n  if (totalPages < 1) { \n    console.warn(\"[Pagination] totalPages is less than 1, not rendering.\", {totalPages});\n    return null;\n  }\n  \n  // 计算显示哪些页码按钮\n  const getPageNumbers = () => {\n    const pages = [];\n    const maxPagesToShow = 5; // 最多显示的页码数\n    \n    // --- 确保 totalPages === 1 时返回 [1] --- \n    if (totalPages === 1) {\n      return [1];\n    }\n    // --- 结束修改 ---\n    \n    if (totalPages <= maxPagesToShow) {\n      // 如果总页数少于最大显示数（且大于1），则显示所有页码\n      for (let i = 1; i <= totalPages; i++) {\n        pages.push(i);\n      }\n    } else {\n      // ... (处理多页的逻辑保持不变) ...\n      pages.push(1);\n      let startPage = Math.max(2, currentPage - 1);\n      let endPage = Math.min(totalPages - 1, currentPage + 1);\n      if (endPage - startPage + 1 < 3) {\n        if (startPage === 2) {\n          endPage = Math.min(totalPages - 1, startPage + 2);\n        } else if (endPage === totalPages - 1) {\n          startPage = Math.max(2, endPage - 2);\n        }\n      }\n      if (startPage > 2) {\n        pages.push('...');\n      }\n      for (let i = startPage; i <= endPage; i++) {\n        pages.push(i);\n      }\n      if (endPage < totalPages - 1) {\n        pages.push('...');\n      }\n      if (totalPages > 1) { // 这个判断其实可以移除，因为上面 totalPages === 1 的情况已处理\n        pages.push(totalPages);\n      }\n    }\n    \n    return pages;\n  };\n  \n  // --- 修改：当只有1页时，不显示箭头按钮 --- \n  return (\n    <div className=\"fixed bottom-4 left-0 right-0 z-50 flex items-center justify-center pointer-events-none\">\n      <div className=\"flex items-center justify-center space-x-6 py-2 px-4 rounded-full pointer-events-auto min-w-[100px]\"> \n        {/* 上一页按钮 - 仅在多页时显示 */} \n        {totalPages > 1 && (\n          <button\n            onClick={() => !isLoading && currentPage > 1 && onPageChange(currentPage - 1)}\n            disabled={currentPage === 1 || isLoading}\n            className={`text-2xl transition-colors duration-200 flex-shrink-0 ${\n              currentPage === 1 || isLoading\n                ? 'text-gray-600 cursor-not-allowed'\n                : 'text-gray-200 hover:text-indigo-300'\n            }`}\n            aria-label=\"上一页\"\n          >\n            <span>&#8249;</span>\n          </button>\n        )}\n        \n        {/* 页码按钮容器 */}\n        <div className=\"flex-grow flex items-center justify-center space-x-4\">\n          {getPageNumbers().map((page, index) => (\n            <button\n              key={index}\n              onClick={() => !isLoading && typeof page === 'number' ? onPageChange(page) : null}\n              disabled={typeof page !== 'number' || isLoading || page === currentPage} // 禁用当前页\n              className={`text-lg transition-colors duration-200 min-w-[24px] text-center ${\n                page === currentPage\n                  ? 'text-indigo-300 font-bold cursor-default' // 当前页样式\n                  : typeof page === 'number'\n                  ? 'text-gray-200 hover:text-indigo-300'\n                  : 'text-gray-500 cursor-default'\n              }`}\n            >\n              {page}\n            </button>\n          ))}\n        </div>\n        \n        {/* 下一页按钮 - 仅在多页时显示 */}\n        {totalPages > 1 && (\n          <button\n            onClick={() => !isLoading && currentPage < totalPages && onPageChange(currentPage + 1)}\n            disabled={currentPage === totalPages || isLoading}\n            className={`text-2xl transition-colors duration-200 flex-shrink-0 ${\n              currentPage === totalPages || isLoading\n                ? 'text-gray-600 cursor-not-allowed'\n                : 'text-gray-200 hover:text-indigo-300'\n            }`}\n            aria-label=\"下一页\"\n          >\n            <span>&#8250;</span>\n          </button>\n        )}\n      </div>\n      \n      {/* 加载指示器 */}\n      {isLoading && (\n        <div className=\"absolute -top-7 left-1/2 transform -translate-x-1/2 flex items-center pointer-events-none\">\n          <div className=\"px-3 py-1 bg-gray-800/50 rounded-full flex items-center\">\n            <div className=\"w-3 h-3 rounded-full bg-indigo-400 animate-ping mr-2 opacity-75\"></div>\n            <span className=\"text-xs text-gray-300\">加载中</span>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n// --- 结束新增 ---\n\nconst ProfilePage: React.FC<ProfilePageProps> = ({ isMe }) => {\n  const { user: currentUser, token, logout, updateUser } = useAuth(); // 重命名为 currentUser 避免混淆\n  const { userId: userIdFromUrl } = useParams<{ userId?: string }>(); // 获取 URL 中的 userId 参数\n  const { isSidebarOpen } = useSidebar(); // <-- 使用全局 Hook\n  \n  // --- 新增：判断是否为用户自己的主页 --- \n  const [isOwnProfile, setIsOwnProfile] = useState<boolean | null>(null); // null 表示尚未确定\n  const [targetUserId, setTargetUserId] = useState<number | null>(null); // 要加载数据的用户 ID\n  // --- 结束新增 ---\n  \n  const [userData, setUserData] = useState<UserData | null>(null);\n  // --- 修改：确保初始状态为空数组 --- \n  const [myArticles, setMyArticles] = useState<ArticleSummary[]>([]); // 保持不变，文章加载逻辑似乎正常\n  const [myPosts, setMyPosts] = useState<PostSummary[]>([]); // 确保初始为空\n  const [myDynamics, setMyDynamics] = useState<DynamicSummary[]>([]); // 确保初始为空\n  // --- 新增：系列状态 --- \n  const [mySeries, setMySeries] = useState<string[]>([]); \n  // --- 结束新增 ---\n  const [isLoadingProfile, setIsLoadingProfile] = useState(true);\n  const [isLoadingArticles, setIsLoadingArticles] = useState(false); // 改为 false，由 useEffect 控制\n  const [isLoadingPosts, setIsLoadingPosts] = useState(false);     // 改为 false，由 useEffect 控制\n  const [isLoadingDynamics, setIsLoadingDynamics] = useState(false); // 改为 false，由 useEffect 控制\n  // --- 新增：系列加载状态 --- \n  const [isLoadingSeries, setIsLoadingSeries] = useState(false);\n  // --- 结束新增 ---\n  const [error, setError] = useState('');\n  const navigate = useNavigate();\n\n  // --- State for Bio Editing ---\n  const [isEditingBio, setIsEditingBio] = useState(false);\n  const [bioInput, setBioInput] = useState('');\n  const [isSavingBio, setIsSavingBio] = useState(false);\n  const [bioError, setBioError] = useState<string | null>(null);\n  // --- End Bio Editing State ---\n\n  // --- State for Nickname Editing ---\n  const [isEditingNickname, setIsEditingNickname] = useState(false);\n  const [nicknameInput, setNicknameInput] = useState('');\n  const [isSavingNickname, setIsSavingNickname] = useState(false);\n  const [nicknameError, setNicknameError] = useState<string | null>(null);\n  // --- End Nickname Editing State ---\n\n  // --- 恢复：标签编辑状态 --- \n  const [isEditingTags, setIsEditingTags] = useState(false);\n  const [tagsArray, setTagsArray] = useState<string[]>([]); \n  const [newTagInput, setNewTagInput] = useState(''); \n  const [isSavingTags, setIsSavingTags] = useState(false);\n  const [tagsError, setTagsError] = useState<string | null>(null);\n  const tagsEditorRef = useRef<HTMLDivElement>(null);\n  // --- 结束恢复 ---\n\n  // --- 修改：当前激活的标签页状态，添加 'series' ---\n  const [activeTab, setActiveTab] = useState<'articles' | 'posts' | 'dynamics' | 'series'>('articles');\n  // --- 结束修改 ---\n\n  // --- 新增：头像上传状态 --- \n  const [selectedAvatar, setSelectedAvatar] = useState<File | null>(null);\n  const [isUploadingAvatar, setIsUploadingAvatar] = useState(false);\n  const [avatarError, setAvatarError] = useState<string | null>(null);\n  const fileInputRef = useRef<HTMLInputElement>(null); // 用于触发文件选择\n  // --- 结束新增 ---\n\n  // --- 新增：useEffect 来判断 isOwnProfile 和 targetUserId --- \n  useEffect(() => {\n    console.log(\"Determining targetUserId and isOwnProfile...\");\n    let idToLoad: number | null = null;\n    let ownProfile = false;\n\n    if (isMe) {\n      console.log(\"isMe is true, using currentUser.id\");\n      if (currentUser) {\n        idToLoad = currentUser.id;\n        ownProfile = true;\n      } else {\n        console.warn(\"isMe is true but currentUser is null, redirecting to login\");\n        navigate('/login'); // Redirect to login if /me but not logged in\n        return;\n      }\n    } else if (userIdFromUrl) {\n      console.log(`Raw userIdFromUrl is: ${userIdFromUrl}`);\n      // --- 修改：清理 userIdFromUrl，只取数字部分 --- \n      const cleanedUserIdString = userIdFromUrl.split(':')[0].trim(); // 取冒号前的部分并去除空格\n      console.log(`Cleaned userId string: ${cleanedUserIdString}`);\n      const parsedId = parseInt(cleanedUserIdString, 10); \n      // --- 结束修改 ---\n      \n      if (!isNaN(parsedId)) {\n        console.log(`Parsed target user ID: ${parsedId}`);\n        idToLoad = parsedId;\n        ownProfile = !!currentUser && currentUser.id === parsedId;\n      } else {\n        console.error(`Invalid userId after cleaning: ${userIdFromUrl} -> ${cleanedUserIdString}`);\n        setError('无效的用户ID格式。');\n        setIsLoadingProfile(false);\n        return;\n      }\n    } else {\n      console.error(\"No user ID found (isMe=false, no userId in URL)\");\n      setError('未指定用户。');\n      setIsLoadingProfile(false);\n      return;\n    }\n\n    console.log(`Setting targetUserId=${idToLoad}, isOwnProfile=${ownProfile}`);\n    setTargetUserId(idToLoad);\n    setIsOwnProfile(ownProfile);\n    // 仅当 isOwnProfile 首次被确定时（从 null 变为 true/false）才重置 isLoadingProfile?\n    // 或者让 fetchUserData 自己处理\n    // setIsLoadingProfile(false); // 可能不应该在这里设置\n\n  }, [isMe, userIdFromUrl, currentUser, navigate]);\n\n  // --- Function to fetch user data --- \n  const fetchUserData = useCallback(async () => {\n    // 仅当 targetUserId 确定后才执行加载\n    if (targetUserId === null) {\n      console.log(\"fetchUserData: targetUserId is null, skipping fetch.\");\n      return; \n    }\n\n    console.log(`fetchUserData called for targetUserId: ${targetUserId}, isOwnProfile: ${isOwnProfile}`);\n    setIsLoadingProfile(true);\n    setError('');\n    setUserData(null); // Clear previous data\n\n    let apiUrl = '';\n    let headers: { [key: string]: string } = {};\n\n    // 根据是否是自己的主页选择不同的 API 端点\n    if (isOwnProfile) {\n      console.log(\"Fetching own profile data...\");\n      apiUrl = `${API_BASE_URL}/api/users/profile`;\n      if (token) {\n        headers['Authorization'] = `Bearer ${token}`;\n      }\n    } else {\n      console.log(\"Fetching public profile data for user:\", targetUserId);\n      // --- 修改：确保 URL 正确，移除可能导致 `:1` 的错误拼接 --- \n      apiUrl = `${API_BASE_URL}/api/users/public/${targetUserId}`; \n      // 移除任何可能导致错误拼接的代码，比如附加分页参数\n      console.log(\"Constructed public API URL:\", apiUrl); \n      // 获取公共信息通常不需要 token\n    }\n\n    try {\n      console.log(`Making API request to: ${apiUrl}`);\n      const response = await axios.get(apiUrl, { headers });\n      console.log(\"API Response received:\", response);\n\n      // --- 关键修改：根据 isOwnProfile 处理不同的响应结构 --- \n      let userObject: UserData | null = null;\n      let isValidResponse = false;\n\n        if (isOwnProfile) {\n        // 自己的主页，期望数据在 response.data.user\n        if (response.status === 200 && response.data && response.data.user && response.data.user.id) {\n          userObject = response.data.user;\n          isValidResponse = true;\n        } else {\n          console.warn('[Self Profile] Invalid response structure or missing user data:', response.data);\n          setError('无法加载您的个人资料。');\n        }\n      } else {\n        // 查看他人主页，期望数据直接在 response.data\n        console.log('[Public Profile] Checking response data:', response.data); // 打印原始数据\n        console.log('[Public Profile] Type of response.data:', typeof response.data); // 打印数据类型\n        const publicData = response.data; // 赋值给变量以便检查\n\n        // 更严格和明确的检查\n        if (\n          response.status === 200 && \n          publicData && \n          typeof publicData === 'object' && \n          typeof publicData.id === 'number' && \n          publicData.id > 0\n        ) {\n          console.log('[Public Profile] Condition PASSED.');\n          userObject = publicData as UserData; // 明确断言类型\n          isValidResponse = true;\n        } else {\n          // 如果条件失败，打印详细原因\n          console.warn('[Public Profile] Condition FAILED. Checking details:', {\n            isStatusOK: response.status === 200,\n            isDataPresent: !!publicData,\n            isDataAnObject: typeof publicData === 'object',\n            isIdANumber: typeof publicData?.id === 'number',\n            isIdPositive: publicData?.id > 0,\n            responseData: publicData // 再次打印数据供检查\n          });\n          setError('无法加载该用户的公开资料。');\n      }\n      }\n\n      // --- 最详细的检查 --- \n      console.log(`[Final Check] Before final if: isValidResponse = ${isValidResponse}, userObject ID = ${userObject?.id}`);\n      \n      // 如果响应有效，则更新状态\n      if (isValidResponse && userObject) { \n        console.log(\"[Final Check] Entering final if block. User data processed successfully:\", userObject);\n        setUserData(userObject);\n        setError(''); // 清除之前的错误\n        \n        // 只有在自己的主页才初始化编辑字段\n        if (isOwnProfile) {\n          setBioInput(userObject.bio || '');\n          setNicknameInput(userObject.nickname || '');\n          setTagsArray(userObject.tags || []);\n        }\n      } else {\n         // 如果最终判断失败，也记录日志\n         console.warn(\"[Final Check] Final if condition FAILED.\", { isValidResponse, userObject });\n      }\n      // 如果响应无效，上面已经设置了错误状态，这里不再处理\n      \n    } catch (err: any) {\n      console.error('获取用户资料失败:', err);\n      if (axios.isAxiosError(err)) {\n          console.error('Axios error details:', err.response?.status, err.response?.data);\n          if (err.response?.status === 404) {\n              setError('无法找到该用户。');\n          } else if (err.response?.status === 401 && !isOwnProfile) {\n              // If trying to access public profile but get 401, maybe endpoint needs auth?\n              setError('无法访问该用户信息，可能需要权限。'); \n          } else if (err.response?.status === 401 && isOwnProfile) {\n              // If fetching own profile fails with 401, likely token issue\n              setError('认证失败，请重新登录。');\n              logout(); // Log out if token is invalid\n              navigate('/login');\n          } else {\n              setError(err.response?.data?.error || '加载用户信息时出错。');\n          }\n      } else {\n          setError('加载用户信息时发生未知错误。');\n      }\n      setUserData(null); // Clear data on error\n    } finally {\n      console.log(\"Finished fetching user data, setting isLoadingProfile to false\");\n      setIsLoadingProfile(false);\n    }\n  // --- 修改：添加 isOwnProfile 和 token 作为依赖 --- \n  }, [targetUserId, isOwnProfile, token, navigate, logout]); // 依赖 targetUserId 和 isOwnProfile\n  // --- 结束修改 ---\n\n  // --- useEffect to trigger data fetching when targetUserId is set --- \n  useEffect(() => {\n    if (targetUserId !== null) {\n      console.log(\"targetUserId changed or component mounted with targetUserId. Resetting content and fetching profile.\");\n      // Fetch profile data when target user changes\n      fetchUserData();\n      \n      // Reset content states ONLY when the target user ID actually changes\n      console.log(\"Resetting content lists because targetUserId changed.\");\n      setActiveTab('articles');\n      setMyArticles([]);\n      setMyPosts([]);\n      setMyDynamics([]);\n      setMySeries([]);\n      setArticlesPage(1);\n      setPostsPage(1);\n      setDynamicsPage(1);\n      setArticlesTotalPages(0);\n      setPostsTotalPages(0);\n      setDynamicsTotalPages(0);\n    } else {\n      console.log(\"targetUserId is null, waiting...\");\n    }\n    // --- 关键修改：移除 fetchUserData 依赖 --- \n  }, [targetUserId]); // 只依赖 targetUserId\n\n  // Fetch User Articles Data (已修改)\n  useEffect(() => {\n    // 只有在 isOwnProfile 和 targetUserId 都已确定后才执行获取\n    if (isOwnProfile === null || targetUserId === null) {\n        // console.log(`跳过 fetchUserData: isOwnProfile=${isOwnProfile}, targetUserId=${targetUserId}`);\n        return; // 等待状态确定\n    }\n\n    const fetchUserData = async () => {\n      // console.log(`执行 fetchUserData: isOwnProfile=${isOwnProfile}, targetUserId=${targetUserId}`);\n      setIsLoadingProfile(true);\n      try {\n        let response;\n        if (isOwnProfile) {\n          if (!token) {\n             setError('请先登录以查看您的个人资料');\n             setIsLoadingProfile(false);\n             return;\n           }\n           console.log(\"获取自己的资料 /api/users/profile\");\n           response = await axios.get(`${API_BASE_URL}/api/users/profile`, {\n             headers: { 'Authorization': `Bearer ${token}` }\n        });\n        } else if (targetUserId) { // 确保 targetUserId 有效\n           console.log(`获取用户 ${targetUserId} 的公开资料 /api/users/public/${targetUserId}`);\n           // !!! 后端需要实现 GET /api/users/public/:userId 接口 !!!\n           response = await axios.get(`${API_BASE_URL}/api/users/public/${targetUserId}`); \n        } else {\n          throw new Error(\"无法确定要获取的用户 ID\");\n        }\n        // ... (处理响应和错误的代码保持不变) ...\n        if (response.data && response.data.user) {\n          setUserData(response.data.user);\n          setError(''); \n          if (isOwnProfile) { \n          setBioInput(response.data.user?.bio || '');\n          setNicknameInput(response.data.user?.nickname || '');\n          }\n        } else {\n          // throw new Error(\"服务器未返回有效的用户数据\");\n        }\n      } catch (err: any) { // ... (错误处理保持不变) ... \n        console.error('获取用户资料失败:', err);\n        if (err.response && err.response.status === 401 && isOwnProfile) {\n          localStorage.removeItem('token');\n          localStorage.removeItem('authUser');\n          setError('登录已过期，请重新登录');\n        } else if (err.response && err.response.status === 404) {\n           setError(\"用户不存在或未公开\"); \n        } else {\n          const errorMessage = err.response?.data?.error || err.message || '获取用户资料失败';\n          setError(errorMessage);\n        }\n        setUserData(null); \n      } finally {\n        setIsLoadingProfile(false);\n      }\n    };\n    \n      fetchUserData();\n\n  }, [isOwnProfile, targetUserId, token]); // 依赖 isOwnProfile, targetUserId 和 token\n\n  // --- 新增：文章分页状态 ---\n  const [articlesPage, setArticlesPage] = useState(1);\n  const [hasMoreArticles, setHasMoreArticles] = useState(true);\n  const [isLoadingMoreArticles, setIsLoadingMoreArticles] = useState(false);\n  const [articlesTotalPages, setArticlesTotalPages] = useState(1);\n\n  // --- 新增：帖子分页状态 ---\n  const [postsPage, setPostsPage] = useState(1);\n  const [hasMorePosts, setHasMorePosts] = useState(true);\n  const [isLoadingMorePosts, setIsLoadingMorePosts] = useState(false);\n  const [postsTotalPages, setPostsTotalPages] = useState(1);\n\n  // --- 新增：动态分页状态 ---\n  const [dynamicsPage, setDynamicsPage] = useState(1);\n  const [hasMoreDynamics, setHasMoreDynamics] = useState(true);\n  const [isLoadingMoreDynamics, setIsLoadingMoreDynamics] = useState(false);\n  const [dynamicsTotalPages, setDynamicsTotalPages] = useState(1);\n\n  // --- 修改：获取用户文章数据 (支持分页) ---\n  const fetchMyArticles = useCallback(async (pageToLoad: number = 1, forceRefresh = false) => {\n    let loadingTimeout: NodeJS.Timeout | null = null;\n    if (targetUserId === null) return;\n\n    if (pageToLoad === 1) {\n      loadingTimeout = setTimeout(() => setIsLoadingArticles(true), 300);\n    } else {\n      if (!forceRefresh && isLoadingMoreArticles) return;\n      loadingTimeout = setTimeout(() => setIsLoadingMoreArticles(true), 300);\n    }\n\n    try {\n      const limit = 10;\n      const response = await axios.get<{ articles: ArticleSummary[]; pages?: number; total?: number }>(\n        `${API_BASE_URL}/api/users/${targetUserId}/articles`,\n        { params: { page: pageToLoad, limit: limit } }\n      );\n      if (loadingTimeout) clearTimeout(loadingTimeout);\n\n      const newArticles = response.data.articles || [];\n      const apiPages = response.data.pages;\n      const apiTotal = response.data.total;\n      let calculatedTotalPages = 1;\n      if (apiPages !== undefined && apiPages > 0) {\n          calculatedTotalPages = apiPages;\n      } else if (apiTotal !== undefined && apiTotal >= 0) {\n          calculatedTotalPages = Math.max(1, Math.ceil(apiTotal / limit));\n      } else {\n          // console.warn(`[Fetch articles] API did not return 'pages' or 'total'. Assuming 1 page.`);\n      }\n      // console.log(`[Fetch articles] API Response Data:`, response.data);\n      // console.log(`[Fetch articles] Calculated Total Pages: ${calculatedTotalPages}`);\n      \n      setMyArticles(newArticles);\n      setArticlesPage(pageToLoad);\n      setHasMoreArticles(pageToLoad < calculatedTotalPages);\n      setArticlesTotalPages(calculatedTotalPages);\n\n    } catch (err: any) {\n      if (loadingTimeout) clearTimeout(loadingTimeout);\n      console.error('获取文章失败:', err);\n      setError(prev => prev || '获取文章列表失败');\n      setHasMoreArticles(false);\n      if (pageToLoad === 1) setMyArticles([]);\n    } finally {\n      if (loadingTimeout) clearTimeout(loadingTimeout);\n      setIsLoadingArticles(false);\n      setIsLoadingMoreArticles(false);\n    }\n  }, [targetUserId, isLoadingMoreArticles]); \n\n  // --- 修改：初始加载文章 (依赖 activeTab) ---\n  useEffect(() => {\n    // 只有当 targetUserId 确定，且文章标签页激活时才考虑加载\n    if (targetUserId !== null && activeTab === 'articles') {\n       // 修改：移除 myArticles.length === 0 判断，切换到此tab就尝试加载第一页\n       console.log('[ProfilePage] Articles tab active, initiating fetch page 1.');\n       fetchMyArticles(1, false); // fetchMyArticles内部会处理是否正在加载\n    }\n    // 当 targetUserId 或 activeTab 变化时，此 effect 会重新评估\n  }, [targetUserId, activeTab, fetchMyArticles]); // 移除 myArticles.length 依赖\n  // --- 结束修改 ---\n\n  // Fetch User Posts Data\n  useEffect(() => {\n    if (targetUserId === null) return; // 确保有目标用户 ID\n    const fetchMyPosts = async () => {\n      setIsLoadingPosts(true);\n      try {\n        // 使用 targetUserId 获取数据\n        const response = await axios.get<{ posts: PostSummary[] }>(`${API_BASE_URL}/api/users/${targetUserId}/posts`);\n        setMyPosts(response.data.posts || []);\n      } catch (err: any) {\n        console.error('获取帖子失败:', err);\n        setError('获取帖子列表失败');\n      } finally {\n        setIsLoadingPosts(false);\n      }\n    };\n        fetchMyPosts();\n  }, [targetUserId]); // 依赖 targetUserId\n\n  // Fetch User Dynamics Data\n  useEffect(() => {\n    if (targetUserId === null) return; // 确保有目标用户 ID\n    const fetchMyDynamics = async () => {\n      setIsLoadingDynamics(true);\n      try {\n        // 使用 targetUserId 获取数据\n        const response = await axios.get<{ dynamics: DynamicSummary[] }>(`${API_BASE_URL}/api/users/${targetUserId}/dynamics`);\n        setMyDynamics(response.data.dynamics || []);\n      } catch (err: any) {\n        console.error('获取动态失败:', err);\n        setError('获取动态列表失败');\n      } finally {\n        setIsLoadingDynamics(false);\n      }\n    };\n        fetchMyDynamics();\n  }, [targetUserId]); // 依赖 targetUserId\n\n  // Fetch User Series Data\n  useEffect(() => {\n    if (targetUserId === null || !isOwnProfile) return; // 只获取自己的系列列表\n    const fetchMySeries = async () => {\n      if (!token) return; // 获取自己的系列需要 token\n      setIsLoadingSeries(true);\n      try {\n        // 假设获取系列名称的 API 总是获取当前登录用户的\n        const response = await axios.get<{ series: string[] }>(`${API_BASE_URL}/api/users/series`, { \n          headers: { 'Authorization': `Bearer ${token}` }\n        });\n        setMySeries(response.data.series || []);\n      } catch (err: any) {\n        console.error('获取系列列表失败:', err);\n      } finally {\n        setIsLoadingSeries(false);\n      }\n    };\n        fetchMySeries();\n  }, [targetUserId, isOwnProfile, token]); // 依赖 targetUserId, isOwnProfile, token\n\n  const handleLogout = () => {\n    logout(); // 使用AuthContext提供的logout方法\n    navigate('/login');\n  };\n  \n  // Helper to format date\n  const formatDate = (dateString: string | null | undefined): string => {\n    if (!dateString) {\n      return '日期未知';\n    }\n    try {\n      const date = new Date(dateString);\n      // 检查日期是否有效\n      if (isNaN(date.getTime())) {\n        console.warn(`[formatDate] Invalid date string received: ${dateString}`);\n        return '无效日期';\n      }\n      return date.toLocaleDateString('zh-CN');\n    } catch (error) {\n      console.error(`[formatDate] Error parsing date string: ${dateString}`, error);\n      return '日期错误';\n    }\n  };\n\n  // Combine loading states\n  const isLoading = isLoadingProfile || isLoadingArticles || isLoadingPosts || isLoadingDynamics;\n\n  // --- Handle Bio Save --- \n  const handleSaveBio = useCallback(async () => {\n    if (!userData || !token) return; \n    console.log('[handleSaveBio] Starting save. Current userData:', userData);\n    setIsSavingBio(true);\n    setBioError(null);\n    try {\n        const response = await axios.put(`${API_BASE_URL}/api/users/profile`, \n          { bio: bioInput },\n          {\n            headers: {\n              'Authorization': `Bearer ${token}`\n            }\n          }\n        );\n        console.log('[handleSaveBio] Received response:', response);\n        if (response.status === 200 && response.data.user) {\n            console.log('[handleSaveBio] PUT Success. User data from response:', response.data.user);\n            // 只更新bio字段，保留其他用户数据不变\n            setUserData(prevData => {\n              console.log('[handleSaveBio] Updating local userData. PrevData:', prevData);\n              if (!prevData) return response.data.user;\n              const newData = { ...prevData, bio: response.data.user.bio };\n              console.log('[handleSaveBio] New local userData will be:', newData);\n              return newData;\n            });\n            \n            if (updateUser && currentUser) {\n              console.log('[handleSaveBio] Updating global currentUser. Prev currentUser:', currentUser);\n              // 对于全局用户状态也仅更新bio\n              const newGlobalUser = { ...currentUser, bio: response.data.user.bio };\n              console.log('[handleSaveBio] New global currentUser will be:', newGlobalUser);\n              updateUser(newGlobalUser);\n            }\n            setIsEditingBio(false); // Exit editing mode on success\n            toast.success(\"个性签名已保存！\");\n        } else {\n            throw new Error(response.data?.error || \"保存简介失败\");\n        }\n    } catch (err: any) {\n        console.error(\"Error saving bio:\", err);\n        const errorMsg = err.response?.data?.error || err.message || \"保存简介时出错\";\n        setBioError(errorMsg);\n        toast.error(`保存失败: ${errorMsg}`);\n        // Don't exit editing mode on error\n    } finally {\n        setIsSavingBio(false);\n    }\n  }, [userData, token, bioInput, updateUser, currentUser]);\n\n  // --- Handle Nickname Save --- \n  const handleSaveNickname = async () => {\n      if (!userData) return;\n      console.log('[handleSaveNickname] Starting save. Current userData:', userData);\n      setIsSavingNickname(true);\n      setNicknameError(null);\n      try {\n          // Basic client-side length check\n          if (nicknameInput.length > 50) {\n              throw new Error(\"昵称不能超过 50 个字符\");\n          }\n          const response = await axios.put(`${API_BASE_URL}/api/users/profile`, \n            { nickname: nicknameInput || null }, // Send null if empty\n            {\n              headers: {\n                'Authorization': `Bearer ${token}`\n              }\n            }\n          );\n          console.log('[handleSaveNickname] Received response:', response);\n          if (response.status === 200) {\n              console.log('[handleSaveNickname] PUT Success. User data from response:', response.data.user);\n              // 只更新nickname字段，保留其他用户数据不变\n              setUserData(prevData => {\n                console.log('[handleSaveNickname] Updating local userData. PrevData:', prevData);\n                if (!prevData) return response.data.user;\n                const newData = { ...prevData, nickname: response.data.user.nickname };\n                console.log('[handleSaveNickname] New local userData will be:', newData);\n                return newData;\n              });\n              \n              if (updateUser && currentUser) {\n                console.log('[handleSaveNickname] Updating global currentUser. Prev currentUser:', currentUser);\n                // 对于全局用户状态也仅更新nickname\n                const newGlobalUser = { ...currentUser, nickname: response.data.user.nickname };\n                console.log('[handleSaveNickname] New global currentUser will be:', newGlobalUser);\n                updateUser(newGlobalUser);\n              }\n              \n              setIsEditingNickname(false); // Exit editing mode\n          } else {\n              throw new Error(response.data?.error || \"保存昵称失败\");\n          }\n      } catch (err: any) {\n          console.error(\"Error saving nickname:\", err);\n          setNicknameError(err.response?.data?.error || err.message || \"保存昵称时出错\");\n      } finally {\n          setIsSavingNickname(false);\n      }\n  };\n  // --- End Handle Nickname Save ---\n\n  // --- 恢复：标签处理函数 --- \n  // 初始化标签状态\n  useEffect(() => {\n    // 只有在查看自己的主页时才初始化编辑状态\n    if (isOwnProfile && userData?.tags) {\n      setTagsArray(userData.tags);\n    } else if (!isOwnProfile) { // 如果查看他人主页，确保编辑状态是空的\n      setTagsArray(userData?.tags || []); // 只显示，不用于编辑\n    } else { // 自己主页但 userData 还未加载或无 tags\n       setTagsArray([]);\n    }\n    // 重置编辑相关状态，防止残留\n    setIsEditingTags(false);\n    setNewTagInput('');\n    setTagsError(null);\n  }, [userData, isOwnProfile]);\n\n  // 处理添加新标签\n  const handleAddTag = useCallback(() => {\n    const newTag = newTagInput.trim();\n    setTagsError(null); \n    if (!newTag) return; \n    if (newTag.length > 15) { setTagsError('单个标签不能超过15个字符'); return; }\n    if (newTag.includes(',')) { setTagsError('单个标签不能包含逗号'); return; }\n    if (tagsArray.length >= 20) { setTagsError('最多只能添加20个标签'); return; }\n    if (tagsArray.some(t => t.toLowerCase() === newTag.toLowerCase())) { setTagsError('该标签已存在'); return; }\n    setTagsArray([...tagsArray, newTag]);\n    setNewTagInput(''); \n  }, [newTagInput, tagsArray]);\n\n  // 处理移除标签\n  const handleRemoveTag = useCallback((tagToRemove: string) => {\n    setTagsArray(prevTags => prevTags.filter(tag => tag !== tagToRemove));\n    setTagsError(null); \n  }, []);\n\n  // 处理保存用户标签\n  const handleSaveTags = useCallback(async () => {\n    if (!isEditingTags || !isOwnProfile || !token || isSavingTags) return; \n    if (tagsArray.length > 20) { setTagsError('最多只能添加20个标签'); return; }\n    \n    console.log('[handleSaveTags] Starting save. Current userData:', userData);\n    console.log('[handleSaveTags] Tags to save:', tagsArray);\n    setIsSavingTags(true);\n    setTagsError(null);\n    \n    try {\n      const response = await fetch(`${API_BASE_URL}/api/users/update-tags`, {\n        method: 'PUT',\n        headers: {'Content-Type': 'application/json', 'Authorization': `Bearer ${token}`},\n        body: JSON.stringify({ tags: tagsArray })\n      });\n       console.log('[handleSaveTags] Received fetch response object:', response);\n       if (!response.ok) { \n          const errorBody = await response.text(); // Read body as text first\n          console.error('[handleSaveTags] Save failed. Status:', response.status, 'Body:', errorBody);\n          let errorMessage = '保存标签失败';\n          try {\n              const errorJson = JSON.parse(errorBody);\n              errorMessage = errorJson.message || errorJson.error || errorMessage;\n          } catch (e) { /* Ignore if body is not JSON */ }\n          throw new Error(errorMessage);\n       }\n      \n      const updatedUserDataResponse = await response.json();\n      console.log('[handleSaveTags] PUT Success. Parsed JSON response:', updatedUserDataResponse);\n      const updatedUserFromServer = updatedUserDataResponse.user;\n      console.log('[handleSaveTags] User data from response:', updatedUserFromServer);\n\n      // 只更新tags字段，保留其他用户数据不变\n      setUserData(prevData => {\n        console.log('[handleSaveTags] Updating local userData. PrevData:', prevData);\n        if (!prevData) return updatedUserFromServer;\n        const newData = { ...prevData, tags: updatedUserFromServer?.tags || [] };\n        console.log('[handleSaveTags] New local userData will be:', newData);\n        return newData;\n      });\n      \n      // 更新 AuthContext 中的用户数据，仅更新tags\n      if (updateUser && currentUser) {\n         console.log('[handleSaveTags] Updating global currentUser. Prev currentUser:', currentUser);\n        const newGlobalUser = { ...currentUser, tags: updatedUserFromServer?.tags || [] };\n        console.log('[handleSaveTags] New global currentUser will be:', newGlobalUser);\n        updateUser(newGlobalUser);\n      }\n      \n      // 更新 tagsArray 状态 (虽然 userData 更新了，但为了同步性也更新)\n      setTagsArray(updatedUserFromServer?.tags || []);\n      console.log('[ProfilePage] Set tagsArray to:', updatedUserFromServer?.tags || []);\n      \n      setIsEditingTags(false); \n      setNewTagInput(''); \n      toast.success(\"标签已成功保存！\"); \n\n    } catch (error) {\n      console.error('保存标签出错:', error);\n      const errorMsg = error instanceof Error ? error.message : '保存标签失败';\n      setTagsError(errorMsg);\n      toast.error(`保存标签失败: ${errorMsg}`); \n    } finally {\n      setIsSavingTags(false);\n    }\n  }, [isEditingTags, isOwnProfile, token, tagsArray, isSavingTags, updateUser, currentUser, userData]); // Added userData dependency because it's logged\n\n  // 处理点击外部保存标签\n  useEffect(() => {\n    if (!isEditingTags || isSavingTags || !isOwnProfile) return;\n    const handleClickOutside = (event: MouseEvent) => {\n      if (tagsEditorRef.current && !tagsEditorRef.current.contains(event.target as Node)) {\n        console.log('[ProfilePage - Click Outside] Saving tags...');\n        handleSaveTags(); \n      }\n    };\n    document.addEventListener('mousedown', handleClickOutside);\n    return () => { document.removeEventListener('mousedown', handleClickOutside); };\n  }, [isEditingTags, isSavingTags, handleSaveTags, isOwnProfile]); \n  // --- 结束恢复 ---\n\n  // --- 新增：头像上传状态 --- \n  const handleAvatarChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    if (event.target.files && event.target.files[0]) {\n      const file = event.target.files[0];\n      // 可选：添加文件大小或类型的前端校验\n      if (file.size > 5 * 1024 * 1024) { // 限制 5MB\n          setAvatarError('文件大小不能超过 5MB');\n          return;\n      }\n      if (!['image/jpeg', 'image/png', 'image/gif'].includes(file.type)) {\n           setAvatarError('请选择 JPG, PNG, 或 GIF 格式的图片');\n           return;\n      }\n      setSelectedAvatar(file);\n      setAvatarError(null);\n      // 选中文件后立即触发上传\n      handleAvatarUpload(file);\n    } else {\n      setSelectedAvatar(null);\n    }\n  };\n  // --- 结束新增 ---\n\n  // --- 新增：处理头像上传 --- \n  const handleAvatarUpload = async (fileToUpload: File | null) => {\n    if (!fileToUpload || !token) {\n      setAvatarError('没有选择文件或用户未登录');\n      return;\n    }\n\n    setIsUploadingAvatar(true);\n    setAvatarError(null);\n\n    const formData = new FormData();\n    formData.append('avatar', fileToUpload);\n\n    try {\n      const response = await axios.post<{ message: string; avatar_url: string }>(\n        `${API_BASE_URL}/api/users/avatar`,\n        formData,\n        {\n          headers: {\n            'Authorization': `Bearer ${token}`,\n            'Content-Type': 'multipart/form-data', // 重要：用于文件上传\n          },\n        }\n      );\n\n      if (response.status === 200 && response.data.avatar_url) {\n        const newAvatarUrl = response.data.avatar_url;\n        // 更新本地用户数据状态\n        setUserData(prevData => prevData ? { ...prevData, avatar: newAvatarUrl } : null);\n        // 更新 AuthContext 中的用户数据\n        if (updateUser && currentUser) {\n          updateUser({ ...currentUser, avatar: newAvatarUrl });\n        }\n        toast.success('头像上传成功！');\n        setSelectedAvatar(null); // 清除选中的文件状态\n      } else {\n        throw new Error(response.data.message || '头像上传失败');\n      }\n    } catch (err: any) {\n      console.error('头像上传失败:', err);\n      const errorMsg = err.response?.data?.error || err.message || '头像上传失败';\n      setAvatarError(errorMsg);\n      toast.error(`头像上传失败: ${errorMsg}`);\n    } finally {\n      setIsUploadingAvatar(false);\n    }\n  };\n  // --- 结束新增 ---\n\n  // --- 触发文件选择的函数 ---\n  const triggerFileInput = () => {\n    fileInputRef.current?.click();\n  };\n  // --- 结束新增 ---\n\n  // --- 添加：处理文章删除 ---\n  const handleDeleteArticle = async (articleId: number, articleSlug: string, articleTitle: string) => {\n    if (!token || !isOwnProfile) return; // 确保是自己的主页\n\n    // 使用文章标题进行确认，更友好\n    if (window.confirm(`您确定要删除文章 \\\"${articleTitle}\\\" 吗？此操作无法撤销。`)) {\n      try {\n        const response = await axios.delete(`${API_BASE_URL}/api/articles/${articleSlug}`, {\n          headers: { 'Authorization': `Bearer ${token}` },\n          // 添加validateStatus配置\n          validateStatus: function(status) {\n            return true; // 不抛出任何HTTP错误，我们手动处理所有状态码\n          }\n        });\n\n        if (response.status === 200 || response.status === 204) {\n          // 删除成功，更新前端状态\n          setMyArticles(prevArticles => prevArticles.filter(article => article.id !== articleId));\n          toast.success('文章已成功删除！');\n        } else if (response.status === 401) {\n          // 特殊处理身份验证失败情况\n          console.warn('删除文章时身份验证失败，但不自动登出');\n          toast.error(\"身份验证失败，请刷新页面后重试。\");\n        } else {\n          throw new Error(response.data?.error || \"删除文章失败：服务器返回非成功状态码\");\n        }\n      } catch (err: any) {\n        console.error(`删除文章 ${articleSlug} 失败:`, err);\n        const errorMsg = err.response?.data?.error || err.message || \"删除文章时出错\";\n        toast.error(`删除失败: ${errorMsg}`);\n      }\n    }\n  };\n  // --- 结束：处理文章删除 ---\n\n  // --- 新增：处理帖子删除\n  const handleDeletePost = async (postId: number, postTitle: string) => {\n    if (!token || !isOwnProfile) return; // 确保是自己的主页\n    \n    // 确认删除\n    if (window.confirm(`您确定要删除帖子 \\\"${postTitle}\\\" 吗？此操作无法撤销。`)) {\n      try {\n        // 调用删除帖子的 API\n        const response = await axios.delete(`${API_BASE_URL}/api/posts/${postId}`, { \n          headers: { 'Authorization': `Bearer ${token}` },\n          // 添加validateStatus配置\n          validateStatus: function(status) {\n            return true; // 不抛出任何HTTP错误，我们手动处理所有状态码\n          }\n        });\n\n        // 检查状态码\n        if (response.status === 200 || response.status === 204) {\n          // 更新帖子列表状态\n          setMyPosts(prev => prev.filter(post => post.id !== postId));\n          toast.success(`帖子 \"${postTitle}\" 已删除。`);\n        } else if (response.status === 401) {\n          // 特殊处理身份验证失败情况\n          console.warn('删除帖子时身份验证失败，但不自动登出');\n          toast.error(\"身份验证失败，请刷新页面后重试。\");\n        } else {\n          throw new Error(response.data?.error || \"删除帖子失败：服务器返回非成功状态码\");\n        }\n      } catch (err: any) {\n        console.error('删除帖子失败:', err);\n        const errorMsg = err.response?.data?.error || err.message || '删除帖子失败';\n        toast.error(`删除失败: ${errorMsg}`);\n      }\n    }\n  };\n  // --- 结束新增 ---\n\n  // --- 新增：处理删除动态的函数\n  const handleDeleteDynamic = async (actionId: number, contentPreview: string) => {\n    if (window.confirm(`确定要删除这条动态吗？\\n\"${contentPreview.substring(0, 50)}${contentPreview.length > 50 ? '...' : ''}\"`)) {\n      try {\n        // 调用删除 Action 的 API\n        const response = await axios.delete(`${API_BASE_URL}/api/actions/${actionId}`, {\n          headers: { 'Authorization': `Bearer ${token}` },\n          // 添加一个validateStatus配置，允许所有状态码通过，我们在下面手动处理\n          validateStatus: function(status) {\n            return true; // 不抛出任何HTTP错误，我们手动处理所有状态码\n          }\n        });\n\n        // 检查状态码\n        if (response.status === 200 || response.status === 204) {\n          // 更新动态列表状态\n          setMyDynamics(prev => prev.filter(dyn => dyn.action_id !== actionId));\n          toast.success(\"动态已删除。\"); // 使用 toast 提示\n        } else if (response.status === 401) {\n          // 特殊处理身份验证失败情况\n          console.warn('删除动态时身份验证失败，但不自动登出');\n          toast.error(\"身份验证失败，请刷新页面后重试。\");\n        } else {\n          throw new Error(response.data?.error || \"删除动态失败：服务器返回非成功状态码\");\n        }\n      } catch (err: any) {\n        console.error('删除动态失败:', err);\n        const errorMsg = err.response?.data?.error || err.message || '删除动态失败';\n        toast.error(`删除失败: ${errorMsg}`);\n      }\n    }\n  };\n  // --- 结束新增 ---\n\n  // --- 重新添加：getImageUrl 辅助函数 --- \n  const getImageUrl = (imagePath: string | null): string | undefined => {\n    if (!imagePath) return undefined;\n    if (imagePath.startsWith('http://') || imagePath.startsWith('https://')) {\n      if (imagePath.includes('cos.ap-shanghai.myqcloud.com')) {\n        return `/api/proxy-image?url=${encodeURIComponent(imagePath)}`;\n      }\n      return imagePath;\n    }\n    if (imagePath.startsWith('/static')) {\n      const urlParts = API_BASE_URL.split('/');\n      const baseUrlWithoutPath = `${urlParts[0]}//${urlParts[2]}`;\n      return `${baseUrlWithoutPath}${imagePath}`;\n    }\n    if (imagePath.startsWith('uploads/')) {\n         const urlParts = API_BASE_URL.split('/');\n         const baseUrlWithoutPath = `${urlParts[0]}//${urlParts[2]}`;\n         return `${baseUrlWithoutPath}/static/${imagePath}`;\n    }\n    return imagePath; \n  };\n  // --- 结束重新添加 ---\n\n  // --- 新增：获取用户帖子数据 (支持分页) ---\n  const fetchMyPosts = useCallback(async (pageToLoad: number = 1, forceRefresh = false) => {\n      // ... (检查和日志保持不变) ...\n      if (!forceRefresh && pageToLoad > 1 && isLoadingMorePosts) return;\n      if (targetUserId === null) return;\n\n      console.log(`[ProfilePage] Fetching posts page ${pageToLoad}, forceRefresh: ${forceRefresh}`);\n\n      // 不直接设置加载中状态，而是延迟一下\n      let loadingTimeout: NodeJS.Timeout | null = null;\n      \n      if (pageToLoad === 1) {\n        loadingTimeout = setTimeout(() => {\n          setIsLoadingPosts(true);\n        }, 300);\n        \n        if (!forceRefresh) {\n          console.log(\"[ProfilePage] Preparing to load page 1.\");\n          // 不立即清空列表\n        }\n      } else {\n        loadingTimeout = setTimeout(() => {\n          setIsLoadingMorePosts(true);\n        }, 300);\n      }\n\n      try {\n        const limit = 10; // 每页显示10项，方便管理分页\n        const response = await axios.get<{ posts: PostSummary[]; pages?: number; total?: number }>(\n            `${API_BASE_URL}/api/users/${targetUserId}/posts`,\n            { params: { page: pageToLoad, limit: limit } }\n        );\n\n        // A取消加载超时\n        if (loadingTimeout) clearTimeout(loadingTimeout);\n\n        const newPosts = response.data.posts || [];\n        \n        // --- 关键：计算总页数并添加日志 ---\n        const apiPages = response.data.pages;\n        const apiTotal = response.data.total;\n        let calculatedTotalPages = 1;\n        if (apiPages !== undefined && apiPages > 0) {\n            calculatedTotalPages = apiPages;\n        } else if (apiTotal !== undefined && apiTotal >= 0) {\n            calculatedTotalPages = Math.max(1, Math.ceil(apiTotal / limit));\n        } else {\n            console.warn(`[Fetch posts] API did not return 'pages' or 'total'. Assuming 1 page.`);\n        }\n        console.log(`[Fetch posts] API Response Data:`, response.data);\n        console.log(`[Fetch posts] Calculated Total Pages: ${calculatedTotalPages}`);\n        // --- 结束计算和日志 ---\n        \n        setMyPosts(newPosts);\n        setPostsPage(pageToLoad);\n        setHasMorePosts(pageToLoad < calculatedTotalPages);\n        setPostsTotalPages(calculatedTotalPages); // 使用计算出的总页数\n\n      } catch (err: any) {\n        if (loadingTimeout) clearTimeout(loadingTimeout);\n        \n        console.error('获取帖子失败:', err);\n        setError(prev => prev || '获取帖子列表失败');\n        setHasMorePosts(false);\n        if (pageToLoad === 1) setMyPosts([]);\n      } finally {\n        if (loadingTimeout) clearTimeout(loadingTimeout);\n        \n        setIsLoadingPosts(false);\n        setIsLoadingMorePosts(false);\n      }\n  }, [targetUserId, isLoadingMorePosts]); \n\n  // --- 修改：初始加载帖子 (依赖 activeTab) ---\n  useEffect(() => {\n      if (targetUserId !== null && activeTab === 'posts') {\n          // 修改：移除 myPosts.length === 0 判断\n          console.log('[ProfilePage] Posts tab active, initiating fetch page 1.');\n          fetchMyPosts(1, false);\n      }\n  }, [targetUserId, activeTab, fetchMyPosts]); // 移除 myPosts.length 依赖\n  // --- 结束修改 ---\n\n  // --- 新增：获取用户动态数据 (支持分页) ---\n  const fetchMyDynamics = useCallback(async (pageToLoad: number = 1, forceRefresh = false) => {\n      // ... (检查和日志保持不变) ...\n      if (!forceRefresh && pageToLoad > 1 && isLoadingMoreDynamics) return;\n      if (targetUserId === null) return;\n\n      console.log(`[ProfilePage] Fetching dynamics page ${pageToLoad}, forceRefresh: ${forceRefresh}`);\n\n      // 不直接设置加载中状态，而是延迟一下\n      let loadingTimeout: NodeJS.Timeout | null = null;\n      \n      if (pageToLoad === 1) {\n        loadingTimeout = setTimeout(() => {\n          setIsLoadingDynamics(true);\n        }, 300);\n        \n        if (!forceRefresh) {\n          console.log(\"[ProfilePage] Preparing to load page 1.\");\n          // 不立即清空列表\n        }\n      } else {\n        loadingTimeout = setTimeout(() => {\n          setIsLoadingMoreDynamics(true);\n        }, 300);\n      }\n\n      try {\n        const limit = 10; // 每页显示10项，方便管理分页\n        const response = await axios.get<{ dynamics: DynamicSummary[]; pages?: number; total?: number }>(\n            `${API_BASE_URL}/api/users/${targetUserId}/dynamics`,\n            { params: { page: pageToLoad, limit: limit } }\n        );\n\n        if (loadingTimeout) clearTimeout(loadingTimeout);\n\n        const newDynamics = response.data.dynamics || [];\n        \n        // 过滤掉已删除的动态\n        const filteredDynamics = newDynamics.filter(dynamic => !dynamic.is_deleted);\n        console.log(`[Fetch dynamics] 过滤前: ${newDynamics.length}个动态, 过滤后: ${filteredDynamics.length}个动态`);\n        \n        // --- 关键：计算总页数并添加日志 ---\n        const apiPages = response.data.pages;\n        const apiTotal = response.data.total;\n        let calculatedTotalPages = 1;\n        if (apiPages !== undefined && apiPages > 0) {\n            calculatedTotalPages = apiPages;\n        } else if (apiTotal !== undefined && apiTotal >= 0) {\n            calculatedTotalPages = Math.max(1, Math.ceil(apiTotal / limit));\n        } else {\n            console.warn(`[Fetch dynamics] API did not return 'pages' or 'total'. Assuming 1 page.`);\n        }\n        console.log(`[Fetch dynamics] API Response Data:`, response.data);\n        console.log(`[Fetch dynamics] Calculated Total Pages: ${calculatedTotalPages}`);\n        // --- 结束计算和日志 ---\n\n        setMyDynamics(filteredDynamics);\n        setDynamicsPage(pageToLoad);\n        setHasMoreDynamics(pageToLoad < calculatedTotalPages);\n        setDynamicsTotalPages(calculatedTotalPages); // 使用计算出的总页数\n\n      } catch (err: any) {\n        if (loadingTimeout) clearTimeout(loadingTimeout);\n        \n        console.error('获取动态失败:', err);\n        setError(prev => prev || '获取动态列表失败');\n        setHasMoreDynamics(false);\n        if (pageToLoad === 1) setMyDynamics([]);\n      } finally {\n        if (loadingTimeout) clearTimeout(loadingTimeout);\n        \n        setIsLoadingDynamics(false);\n        setIsLoadingMoreDynamics(false);\n      }\n  }, [targetUserId, isLoadingMoreDynamics]); \n\n  // --- 修改：初始加载动态 (依赖 activeTab) ---\n  useEffect(() => {\n      if (targetUserId !== null && activeTab === 'dynamics') {\n          // 修改：移除 myDynamics.length === 0 判断\n          console.log('[ProfilePage] Dynamics tab active, initiating fetch page 1.');\n          fetchMyDynamics(1, false);\n      }\n  }, [targetUserId, activeTab, fetchMyDynamics]); // 移除 myDynamics.length 依赖\n  // --- 结束修改 ---\n\n  // 新增：Effect to reset page numbers when tab changes\n  useEffect(() => {\n    console.log(`[ProfilePage] Active tab changed to: ${activeTab}. Resetting pages.`);\n    setArticlesPage(1);\n    setPostsPage(1);\n    setDynamicsPage(1);\n    // 注意：这里不需要重新获取数据，因为各自的 useEffect 会在 activeTab 变化时\n    // 判断是否需要获取第一页的数据。\n  }, [activeTab]);\n\n  // Restore the mainScrollRef definition\n  const mainScrollRef = useRef<HTMLElement>(null); // Ref for the main scrolling element\n\n  // Add ref for Bio editor\n  const bioEditorRef = useRef<HTMLDivElement>(null);\n\n  // Modify useEffect for click outside to save Bio\n  useEffect(() => {\n    if (!isEditingBio || isSavingBio || !isOwnProfile) return;\n    \n    const handleClickOutside = (event: MouseEvent) => {\n      // Check if the click is outside the bio editor area\n      if (bioEditorRef.current && !bioEditorRef.current.contains(event.target as Node)) {\n        console.log('[ProfilePage - Click Outside Bio] Attempting to save and exit...');\n        // Attempt to save\n        handleSaveBio(); \n        // Immediately exit editing mode regardless of save outcome\n        setIsEditingBio(false); \n      }\n    };\n    \n    document.addEventListener('mousedown', handleClickOutside);\n    return () => {\n      document.removeEventListener('mousedown', handleClickOutside);\n    };\n    // Ensure handleSaveBio is included in dependencies, as it's called here\n  }, [isEditingBio, isSavingBio, handleSaveBio, isOwnProfile, bioEditorRef]);\n\n  // Render profile page content\n  return (\n    <div className=\"flex flex-col min-h-screen text-white\">\n      <div className=\"flex flex-1 overflow-hidden\">\n        <SideNavbar /* 移除 isOpen prop */ />\n        <main \n           ref={mainScrollRef} \n           className={`flex-1 transition-all duration-500 ease-out overflow-y-auto ${isSidebarOpen ? 'ml-48' : 'ml-0'} p-6 pb-16`} // 使用全局 isSidebarOpen\n        >\n          {isLoadingProfile && <p className=\"text-center py-10\">正在加载个人资料...</p>}\n          \n          {userData ? (\n            <div className=\"max-w-4xl mx-auto\">\n              <div className=\"mb-12\">\n                <div className=\"flex flex-col md:flex-row md:items-start md:space-x-8\">\n                  {/* 头像部分 */}\n                  <div className=\"flex flex-col items-center mb-6 md:mb-0\">\n                    {/* 移除原来的退出按钮，将放置在昵称旁边 */}\n                    <div className={`relative ${isOwnProfile ? 'group cursor-pointer' : ''}`} \n                     onClick={isOwnProfile ? triggerFileInput : undefined}\n                     title={isOwnProfile ? \"点击更换头像\" : undefined}\n                     >\n                   {isOwnProfile && (\n                     <div className=\"absolute inset-0 bg-black/50 rounded-full flex items-center justify-center opacity-0 group-hover:opacity-100 transition-opacity duration-300\">\n                       {isUploadingAvatar ? (\n                          <svg className=\"animate-spin h-6 w-6 text-white\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\">\n                                <circle className=\"opacity-25\" cx=\"12\" cy=\"12\" r=\"10\" stroke=\"currentColor\" strokeWidth=\"4\"></circle>\n                                <path className=\"opacity-75\" fill=\"currentColor\" d=\"M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z\"></path>\n                          </svg>\n                        ) : (\n                          <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-6 w-6 text-white\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\" strokeWidth={2}>\n                             <path strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"M3 9a2 2 0 012-2h.93a2 2 0 001.664-.89l.812-1.22A2 2 0 0110.07 4h3.86a2 2 0 011.664.89l.812 1.22A2 2 0 0018.07 7H19a2 2 0 012 2v9a2 2 0 01-2 2H5a2 2 0 01-2-2V9z\" />\n                             <path strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"M15 13a3 3 0 11-6 0 3 3 0 016 0z\" />\n                          </svg>\n                       )}\n                     </div>\n                   )}\n                      \n                      {/* 显示用户头像 */}\n                      {userData.avatar ? (\n                        <img \n                          src={userData.avatar} \n                          alt={`${userData.nickname || 'User'}'s avatar`} \n                          className=\"w-32 h-32 rounded-full object-cover border-2 border-indigo-600/50\"\n                        />\n                      ) : (\n                        <div className=\"w-32 h-32 rounded-full bg-gradient-to-br from-indigo-500 to-purple-700 flex items-center justify-center text-white text-3xl font-bold border-2 border-indigo-600/50\">\n                          {(userData.nickname || userData.email || 'U').charAt(0).toUpperCase()}\n                        </div>\n                      )}\n                 </div>\n\n                  {/* --- 在头像下方添加 FollowStats 组件 --- */}\n                  {targetUserId !== null && isOwnProfile !== null && ( // 确保 targetUserId 和 isOwnProfile 已确定\n                     <FollowStats\n                       targetUserId={targetUserId}\n                       isOwnProfile={isOwnProfile} // 直接使用 boolean\n                     />\n                  )}\n                  \n                {isOwnProfile && <input type=\"file\" ref={fileInputRef} onChange={handleAvatarChange} accept=\"image/*\" className=\"hidden\" />} \n                {avatarError && <p className=\"text-xs text-red-400 mt-1 text-center\">{avatarError}</p>}\n                  </div>\n\n                  {/* 用户信息部分 */}\n                  <div className=\"flex-1 flex flex-col\">\n                    <div className={`group relative mb-3 ${isOwnProfile ? '' : 'pointer-events-none'}`}> \n                      <div className=\"flex items-center\">\n                        <h1 className=\"text-4xl md:text-5xl font-bold text-white inline\">{userData.nickname || <span className=\"italic text-gray-400\">未设置昵称</span>}</h1>\n                        \n                        {/* 移除此处的退出按钮 */}\n                      </div>\n                      \n                      {isOwnProfile && (\n                        <button \n                          onClick={() => setIsEditingNickname(true)}\n                          className=\"absolute -right-6 top-1/2 -translate-y-1/2 ml-2 text-blue-400 hover:text-blue-300 opacity-0 group-hover:opacity-100 transition-opacity duration-200\"\n                          title=\"编辑昵称\"\n                          hidden={isEditingNickname}\n                        >\n                          <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-5 w-5\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\" strokeWidth={2}> <path strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"M15.232 5.232l3.536 3.536m-2.036-5.036a2.5 2.5 0 113.536 3.536L6.5 21.036H3v-3.572L16.732 3.732z\" /> </svg>\n                        </button>\n                      )}\n                    </div>\n                    \n                    {isOwnProfile && isEditingNickname && (\n                      <div className=\"mt-2 mb-3 flex items-center space-x-2\">\n                                <input \n                                    type=\"text\"\n                                    value={nicknameInput}\n                                    onChange={(e) => setNicknameInput(e.target.value)}\n                                    placeholder=\"设置您的昵称\"\n                                    maxLength={50}\n                      className=\"flex-grow max-w-xs px-3 py-1.5 bg-gray-700/60 border border-gray-600 rounded-md focus:outline-none focus:ring-2 focus:ring-indigo-500 sm:text-lg text-white\"\n                                />\n                                 <button\n                                    onClick={handleSaveNickname}\n                                    disabled={isSavingNickname}\n                                    className={`px-3 py-1 bg-indigo-600 hover:bg-indigo-700 text-white rounded-md text-xs transition-colors ${isSavingNickname ? 'opacity-50 cursor-not-allowed' : ''}`}\n                                >\n                                    {isSavingNickname ? '保存中' : '保存'}\n                                </button>\n                                <button\n                                    onClick={() => { setIsEditingNickname(false); setNicknameInput(userData?.nickname || ''); setNicknameError(null); }}\n                                    className=\"px-3 py-1 bg-gray-600 hover:bg-gray-500 text-white rounded-md text-xs transition-colors\"\n                                >\n                                    取消\n                                </button>\n                            </div>\n                )}\n                    {nicknameError && !isEditingNickname && <p className=\"text-xs text-red-400 mt-1\">{nicknameError}</p>}\n\n                    <p className=\"text-sm text-gray-400 mt-1 mb-4\">用户 ID: {userData.id} · 用户自 {new Date(userData.created_at).toLocaleDateString('zh-CN')} 加入</p>\n\n                    {/* --- 修改：Bio 编辑区域 --- */}\n                    <div \n                      ref={bioEditorRef} // Add ref here\n                      className={`mt-2 group relative max-w-xl ${\n                        isOwnProfile && !isEditingBio ? 'cursor-pointer' : ''\n                      }`}\n                      onClick={() => {\n                        // Only allow clicking to edit if it's own profile and not already editing\n                        if (isOwnProfile && !isEditingBio) {\n                          setBioInput(userData?.bio || ''); // Ensure input starts with current bio\n                          setIsEditingBio(true);\n                          setBioError(null); // Clear previous errors\n                        }\n                      }}\n                    >\n                      {!isEditingBio ? (\n                        // Display Bio Text\n                        <p \n                          className={`whitespace-pre-wrap break-words text-gray-300 ${\n                            !userData.bio ? 'italic text-gray-500' : ''\n                          }`}\n                          title={isOwnProfile ? \"点击编辑个性签名\" : undefined}\n                        >\n                          {userData.bio || (isOwnProfile ? '点击添加个性签名' : '还没有个性签名')}\n                        </p>\n                      ) : (\n                        // Display Bio Editor (Textarea)\n                        <div className=\"space-y-1\"> \n                          <textarea \n                            value={bioInput}\n                            onChange={(e) => setBioInput(e.target.value)}\n                            placeholder=\"简单介绍一下自己...\"\n                            rows={3}\n                            // --- 再次修改样式：移除焦点时的 ring 效果，保持边框颜色不变 --- \n                            className=\"w-full p-2 text-sm text-white bg-gray-700/30 border border-gray-600/50 rounded-md focus:outline-none resize-y placeholder-gray-400\"\n                            autoFocus // Automatically focus the textarea when it appears\n                            onKeyDown={(e) => {\n                              // Optional: Allow saving with Enter/Cmd+Enter if needed, or just rely on click outside\n                              if (e.key === 'Enter' && (e.metaKey || e.ctrlKey)) {\n                                handleSaveBio();\n                              }\n                            }}\n                          />\n                          {bioError && <p className=\"text-xs text-red-400 mt-0.5\">{bioError}</p>}\n                        </div>\n                      )}\n                      {/* Remove the old edit icon button */}\n                    </div>\n                    {/* --- 结束修改：Bio 编辑区域 --- */}\n                    \n                 {/* Remove the old separate Bio editor block */}\n\n                    {/* 标签部分 */}\n                <div className=\"mt-4\">\n                  <div className=\"flex items-center mb-2\">\n                    {isOwnProfile && !isEditingTags && (!tagsArray || tagsArray.length === 0) && (\n                        <h3 className=\"text-sm text-gray-400 mr-2\">标签</h3>\n                    )}\n                  </div>\n                  \n                  {!isEditingTags ? (\n                    <div \n                        className={`flex flex-wrap gap-1 ${isOwnProfile ? 'cursor-pointer min-h-[20px]' : 'min-h-[20px]'}`} \n                        onClick={() => isOwnProfile && setIsEditingTags(true)}\n                        title={isOwnProfile ? \"点击编辑标签\" : undefined}\n                    >\n                        {(isOwnProfile ? tagsArray : (userData.tags || [])).map((tag, index) => (\n                        <span \n                            key={index} \n                            className=\"px-2 py-0.5 text-xs font-medium text-indigo-100 rounded-full bg-indigo-600/70\"\n                        >\n                            {tag}\n                        </span>\n                        ))}\n                        {isOwnProfile && (!tagsArray || tagsArray.length === 0) && (\n                           <span className=\"text-gray-500 text-xs italic\">点击添加标签</span>\n                        )}\n                        {!isOwnProfile && (!userData.tags || userData.tags.length === 0) && (\n                           <span className=\"text-gray-500 text-xs italic\">暂无标签</span>\n                        )}\n                    </div>\n                  ) : (\n                    <div ref={tagsEditorRef} className=\"space-y-1\">\n                        <div className=\"flex flex-wrap items-center gap-1 p-1.5 border border-gray-600/50 rounded-md bg-gray-700/30\">\n                           {tagsArray.map((tag, index) => (\n                             <span key={index} className=\"inline-flex items-center px-1.5 py-0.5 text-xs font-medium text-indigo-100 rounded-full bg-indigo-500/80\">\n                                {tag}\n                                <button onClick={() => handleRemoveTag(tag)} className=\"ml-1 -mr-0.5 p-0.5 rounded-full inline-flex items-center justify-center text-indigo-200 hover:bg-indigo-400/50 hover:text-white focus:outline-none\" aria-label={`移除标签 ${tag}`}>\n                                   <svg className=\"h-2.5 w-2.5\" stroke=\"currentColor\" fill=\"none\" viewBox=\"0 0 8 8\"><path strokeLinecap=\"round\" strokeWidth=\"1.5\" d=\"M1 1l6 6m0-6L1 7\" /></svg>\n                                </button>\n                             </span>\n                           ))}\n                           {tagsArray.length < 20 && (\n                             <input type=\"text\" value={newTagInput} onChange={(e) => setNewTagInput(e.target.value)} onKeyDown={(e) => {if (e.key === 'Enter') {e.preventDefault(); handleAddTag();}}} placeholder=\"添加...\" maxLength={15} className=\"inline-block flex-grow min-w-[60px] h-5 px-1 py-0.5 bg-transparent focus:outline-none sm:text-xs text-white placeholder-gray-400\" />\n                           )}\n                           {tagsArray.length >= 20 && <span className=\"text-xs text-gray-400 italic\">已达上限</span>}\n                        </div>\n                        {tagsError && <p className=\"text-xs text-red-400 mt-0.5\">{tagsError}</p>}\n                    </div>\n                  )}\n                </div>\n                  </div>\n                </div>\n                </div>\n                    \n              <div className=\"mt-10 mb-8 border-b border-gray-700/50\">\n                <nav className=\"-mb-px flex space-x-6 justify-center md:justify-start\" aria-label=\"Tabs\">\n                  {(isOwnProfile ? ['articles', 'posts', 'dynamics', 'series'] : ['articles', 'posts', 'dynamics']).map((tab) => (\n                    <button\n                       key={tab}\n                       onClick={() => setActiveTab(tab as any)}\n                       className={`whitespace-nowrap pb-3 px-1 border-b-2 font-medium text-sm transition-colors duration-200 \n                         ${activeTab === tab \n                      ? 'border-indigo-400 text-indigo-300' \n                      : 'border-transparent text-gray-400 hover:text-gray-200 hover:border-gray-500'}\n                  `}\n                >\n                       {tab === 'articles' ? '文 章' : (tab === 'posts' ? '帖 子' : (tab === 'dynamics' ? '动 态' : '系 列'))} \n                </button>\n                  ))}\n              </nav>\n            </div>\n\n              <div className=\"mt-8\">\n              {activeTab === 'articles' && (\n                  <div className=\"space-y-3 min-h-[300px] relative pb-16\">\n                    {/* 内容过渡动画 */}\n                    <div className={`transition-opacity duration-300 ${isLoadingArticles ? 'opacity-70' : 'opacity-100'}`}>\n                      {myArticles.length > 0 ? (\n                          myArticles.map(article => (\n                            <div key={article.id} className=\"py-2 px-2 border-b border-gray-700/30 flex justify-between items-center group relative hover:bg-gray-700/20 rounded-md transition-colors duration-150\">\n                              {/* 左侧：标题 */}\n                              <Link \n                                to={`/article/${article.slug}`}\n                                className=\"text-gray-200 hover:text-blue-300 truncate flex-grow mr-4\"\n                                title={article.title}\n                              >\n                                {article.series_name && <span className=\"text-xs text-purple-300 mr-1\">[{article.series_name}]</span>}\n                                {article.title}\n                              </Link>\n                              {/* 右侧：日期和按钮 */}\n                              <div className=\"flex items-center space-x-3 flex-shrink-0\">\n                                {/* 日期始终显示 */}\n                                <span className=\"text-xs text-gray-500 whitespace-nowrap\">\n                                  {formatDate(article.created_at)}\n                                </span>\n                                {/* 编辑和删除按钮 (仅自己可见，hover时显示) */}\n                                {isOwnProfile && (\n                                <div className=\"flex items-center space-x-1 opacity-0 group-hover:opacity-100 transition-opacity duration-200\">\n                                  <button\n                                    onClick={() => navigate(`/edit-article/${article.slug}`)}\n                                    className=\"text-blue-400 hover:text-blue-300 p-1 rounded hover:bg-gray-600/50\"\n                                    title=\"编辑文章\"\n                                  >\n                                    <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-4 w-4\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\" strokeWidth={2}> <path strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z\" /> </svg>\n                                  </button>\n                                  <button\n                                    onClick={() => handleDeleteArticle(article.id, article.slug, article.title)}\n                                    className=\"text-red-500 hover:text-red-400 p-1 rounded hover:bg-gray-600/50\"\n                                    title=\"删除文章\"\n                                  >\n                                    <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-4 w-4\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\" strokeWidth={2}> <path strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16\" /> </svg>\n                                  </button>\n                                </div>\n                                )}\n                              </div>\n                            </div>\n                          ))\n                      ) : !isLoadingArticles ? (\n                          <p className=\"text-gray-400 text-center py-4\">{isOwnProfile ? '您还没有发布任何文章。' : '该用户还没有发布任何文章。'}</p>\n                      ) : null}\n                    </div>\n                    \n                    {/* 加载状态指示器 */}\n                    {isLoadingArticles && myArticles.length === 0 && (\n                      <div className=\"absolute inset-0 flex justify-center items-center\">\n                        <div className=\"flex flex-col items-center\">\n                          <svg className=\"animate-spin h-8 w-8 text-indigo-400 mb-2\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\">\n                            <circle className=\"opacity-25\" cx=\"12\" cy=\"12\" r=\"10\" stroke=\"currentColor\" strokeWidth=\"4\"></circle>\n                            <path className=\"opacity-75\" fill=\"currentColor\" d=\"M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z\"></path>\n                          </svg>\n                          <p className=\"text-gray-400\">加载文章中...</p>\n                        </div>\n                      </div>\n                    )}\n                  </div>\n              )}\n              {activeTab === 'posts' && (\n                  <div className=\"space-y-3 min-h-[300px] relative pb-16\">\n                    {/* 内容过渡动画 */}\n                    <div className={`transition-opacity duration-300 ${isLoadingPosts ? 'opacity-70' : 'opacity-100'}`}>\n                      {myPosts.length > 0 ? (\n                          myPosts.map(post => (\n                            <div key={post.id} className=\"py-2 px-2 border-b border-gray-700/30 flex justify-between items-center group relative hover:bg-gray-700/20 rounded-md transition-colors duration-150\">\n                              {/* 左侧：标题 */}\n                              <Link \n                                to={`/posts/${post.slug}`}\n                                className=\"text-gray-200 hover:text-blue-300 truncate flex-grow mr-4\"\n                                title={post.title}\n                              >\n                                {post.title}\n                              </Link>\n                              {/* 右侧：日期和按钮 */}\n                              <div className=\"flex items-center space-x-3 flex-shrink-0\">\n                                {/* 日期始终显示 */}\n                                <span className=\"text-xs text-gray-500 whitespace-nowrap\">\n                                  {formatDate(post.created_at)}\n                                </span>\n                                {/* 编辑和删除按钮 (仅自己可见，hover时显示) */}\n                                {isOwnProfile && (\n                                <div className=\"flex items-center space-x-1 opacity-0 group-hover:opacity-100 transition-opacity duration-200\">\n                                  <button\n                                    onClick={() => navigate(`/edit-post/${post.id}`)} \n                                    className=\"text-blue-400 hover:text-blue-300 p-1 rounded hover:bg-gray-600/50\"\n                                    title=\"编辑帖子\"\n                                  >\n                                    <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-4 w-4\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\" strokeWidth={2}> <path strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z\" /> </svg>\n                                  </button>\n                                  <button\n                                    onClick={() => handleDeletePost(post.id, post.title)}\n                                    className=\"text-red-500 hover:text-red-400 p-1 rounded hover:bg-gray-600/50\"\n                                    title=\"删除帖子\"\n                                  >\n                                    <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-4 w-4\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\" strokeWidth={2}> <path strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16\" /> </svg>\n                                  </button>\n                                </div>\n                                )}\n                              </div>\n                            </div>\n                          ))\n                      ) : !isLoadingPosts ? (\n                          <p className=\"text-gray-400 text-center py-4\">{isOwnProfile ? '您还没有发布任何帖子。' : '该用户还没有发布任何帖子。'}</p>\n                      ) : null}\n                    </div>\n                    \n                    {/* 加载状态指示器 */}\n                    {isLoadingPosts && myPosts.length === 0 && (\n                      <div className=\"absolute inset-0 flex justify-center items-center\">\n                        <div className=\"flex flex-col items-center\">\n                          <svg className=\"animate-spin h-8 w-8 text-indigo-400 mb-2\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\">\n                            <circle className=\"opacity-25\" cx=\"12\" cy=\"12\" r=\"10\" stroke=\"currentColor\" strokeWidth=\"4\"></circle>\n                            <path className=\"opacity-75\" fill=\"currentColor\" d=\"M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z\"></path>\n                          </svg>\n                          <p className=\"text-gray-400\">加载帖子中...</p>\n                        </div>\n                      </div>\n                    )}\n                  </div>\n              )}\n              {activeTab === 'dynamics' && (\n                  <div className=\"space-y-3 min-h-[300px] relative pb-16\">\n                    {/* 内容过渡动画 */}\n                    <div className={`transition-opacity duration-300 ${isLoadingDynamics ? 'opacity-70' : 'opacity-100'}`}>\n                      {myDynamics.length > 0 ? (\n                          myDynamics.map(dynamic => {\n                            // 移除调试代码\n                            return (\n                            // 修改：添加 group hover 背景，调整内部布局\n                            <div key={dynamic.action_id} className=\"py-3 px-2 border-b border-gray-700/30 flex justify-between items-start group relative hover:bg-gray-700/20 rounded-md transition-colors duration-150\">\n                              {/* 左侧内容 */}\n                              <div className=\"flex-grow mr-4\">\n                                  {/* 根据动态类型显示不同内容 */}\n                                  {dynamic.target_type === 'user' ? (\n                                    /* 原创动态 */\n                                    (() => {\n                                      console.log(\"ProfilePage: Rendering original dynamic:\", JSON.stringify(dynamic));\n                                      return (\n                                        <div>\n                                          <span className=\"text-sm text-green-400\">\n                                            发布了原创动态\n                                          </span>\n                                          {dynamic.share_comment && (\n                                            <p className=\"text-gray-200 text-sm mt-1 whitespace-pre-wrap break-words\">\n                                              {dynamic.share_comment}\n                                            </p>\n                                          )}\n                                          {/* 如果有图片，显示第一张图片预览 */}\n                                          {dynamic.images && dynamic.images.length > 0 && (\n                                            <div className=\"mt-2\">\n                                              <img \n                                                src={getImageUrl(dynamic.images[0])} \n                                                alt=\"动态图片\"\n                                                className=\"max-h-32 rounded-md object-cover\"\n                                              />\n                                              {dynamic.images.length > 1 && (\n                                                <span className=\"text-xs text-gray-400 ml-2\">\n                                                  还有 {dynamic.images.length - 1} 张图片\n                                                </span>\n                                              )}\n                                            </div>\n                                          )}\n                                        </div>\n                                      );\n                                    })()\n                                  ) : (\n                                    /* 分享/转发动态 */\n                                    <div>\n                                <span className=\"text-sm text-gray-400\">\n                                  分享了 {dynamic.target_type === 'article' ? '文章:' : dynamic.target_type === 'post' ? '帖子:' : '内容:'}\n                                </span>\n                                {dynamic.target_slug && dynamic.target_title && dynamic.target_type && (\n                                  <Link \n                                    to={dynamic.target_type === 'article' ? `/article/${dynamic.target_slug}` : `/posts/${dynamic.target_slug}`}\n                                    className=\"text-blue-300 hover:text-blue-200 hover:underline ml-1 font-medium\"\n                                  >\n                                    \"{dynamic.target_title}\"\n                                  </Link>\n                                )}\n                                {dynamic.share_comment && (\n                                  <p className=\"text-gray-200 text-sm mt-1 pl-2 border-l-2 border-gray-600/50 whitespace-pre-wrap break-words\">\n                                    {dynamic.share_comment}\n                                  </p>\n                                      )}\n                                    </div>\n                                )}\n                              </div>\n                              {/* 右侧日期和删除按钮 */}\n                              <div className=\"flex flex-col items-end flex-shrink-0 space-y-1\">\n                                {/* 日期始终显示 */}\n                                <span className=\"text-xs text-gray-500 whitespace-nowrap\">\n                                  {formatDate(dynamic.shared_at)} \n                                </span>\n                                {/* 删除按钮仅在自己主页hover时显示 */}\n                                {isOwnProfile && (\n                                  <button\n                                    onClick={() => handleDeleteDynamic(dynamic.action_id, dynamic.share_comment || '')} \n                                    className=\"text-red-500 hover:text-red-400 p-1 rounded hover:bg-gray-600/50 opacity-0 group-hover:opacity-100 transition-opacity duration-200\" // 保持 hover 显示\n                                    title=\"删除动态\"\n                                  >\n                                    <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-4 w-4\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\" strokeWidth={2}> <path strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16\" /> </svg>\n                                  </button>\n                                )}\n                              </div>\n                            </div>\n                            );\n                          })\n                      ) : !isLoadingDynamics ? (\n                          <p className=\"text-gray-400 text-center py-4\">{isOwnProfile ? '您还没有发布任何动态。' : '该用户还没有发布任何动态。'}</p>\n                      ) : null}\n                    </div>\n                    \n                    {/* 加载状态指示器 (保持不变) */}\n                    {isLoadingDynamics && myDynamics.length === 0 && (\n                      <div className=\"absolute inset-0 flex justify-center items-center\">\n                        <div className=\"flex flex-col items-center\">\n                          <svg className=\"animate-spin h-8 w-8 text-indigo-400 mb-2\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\">\n                            <circle className=\"opacity-25\" cx=\"12\" cy=\"12\" r=\"10\" stroke=\"currentColor\" strokeWidth=\"4\"></circle>\n                            <path className=\"opacity-75\" fill=\"currentColor\" d=\"M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z\"></path>\n                          </svg>\n                          <p className=\"text-gray-400\">加载动态中...</p>\n                        </div>\n                      </div>\n                    )}\n                  </div>\n              )}\n                 {activeTab === 'series' && isOwnProfile && (\n                     <div className=\"space-y-3\">\n                         {isLoadingSeries ? (\n                             <p className=\"text-gray-400 text-center py-4\">加载系列中...</p>\n                         ) : mySeries.length > 0 ? (\n                             mySeries.map((seriesName, index) => (\n                                 <div key={index} className=\"py-2 border-b border-gray-700/30\">\n                                     <span className=\"text-gray-200\">{seriesName}</span>\n                                     {/* TODO: 可能添加编辑/删除系列的按钮 */} \n            </div>\n                             ))\n                         ) : (\n                             <p className=\"text-gray-400 text-center py-4\">您还没有创建任何系列。</p>\n                         )}\n          </div>\n                 )}\n              </div>\n              \n              {/* 将分页组件的渲染移回 main 容器内，移除外部条件 */}\n              {/* 将分页组件移回 main 容器内，放在所有 tab 内容之后 */}\n              { (activeTab === 'articles' && articlesTotalPages > 1) ||\n                (activeTab === 'posts' && postsTotalPages > 1) ||\n                (activeTab === 'dynamics' && dynamicsTotalPages > 1) ? (\n                  <Pagination \n                    currentPage={\n                      activeTab === 'articles' ? articlesPage :\n                      activeTab === 'posts' ? postsPage :\n                      dynamicsPage // 'dynamics' is the last possibility here\n                    }\n                    totalPages={\n                      activeTab === 'articles' ? articlesTotalPages :\n                      activeTab === 'posts' ? postsTotalPages :\n                      dynamicsTotalPages // 'dynamics' is the last possibility here\n                    }\n                    onPageChange={(page) => {\n                      if (activeTab === 'articles') fetchMyArticles(page, false);\n                      else if (activeTab === 'posts') fetchMyPosts(page, false);\n                      else if (activeTab === 'dynamics') fetchMyDynamics(page, false);\n                    }}\n                    isLoading={\n                      activeTab === 'articles' ? (isLoadingArticles || isLoadingMoreArticles) :\n                      activeTab === 'posts' ? (isLoadingPosts || isLoadingMorePosts) :\n                      (isLoadingDynamics || isLoadingMoreDynamics)\n                    }\n                  />\n              ) : null }\n            </div> \n          ) : (\n            !isLoadingProfile && <p className=\"text-center text-red-400 py-10\">{error || \"无法加载用户信息\"}</p>\n        )}\n      </main>\n      \n      {/* Click Outside Save for Bio */}\n      {/* This useEffect should now work correctly due to useCallback on handleSaveBio */}\n      {/* useEffect(() => { ... }, [isEditingBio, isSavingBio, handleSaveBio, isOwnProfile]); */}\n    </div>\n  </div>\n  );\n};\n\nexport default ProfilePage;"],"names":["memo","_ref","items","locationPathname","_jsx","className","children","map","item","_jsxs","Link","to","type","slug","endsWith","name","id","displayName","SideNavbar","isSidebarOpen","useSidebar","user","token","useLocation","useAuth","queryClient","useQueryClient","data","favoriteItems","isLoading","loadingFavorites","useUserFavorites","handleFavoritesUpdated","useCallback","invalidateQueries","queryKey","useEffect","window","addEventListener","removeEventListener","isOpen","onClose","title","users","showModal","setShowModal","useState","animationClass","setAnimationClass","timerRef","useRef","document","body","style","overflow","current","setTimeout","clearTimeout","onClick","transition","opacity","e","stopPropagation","background","backdropFilter","transform","xmlns","fill","viewBox","stroke","strokeWidth","strokeLinecap","strokeLinejoin","d","length","_user$nickname","avatar","src","alt","nickname","charAt","toUpperCase","targetUserId","isOwnProfile","currentUser","followerCount","setFollowerCount","followingCount","setFollowingCount","isFollowing","setIsFollowing","isLoadingCounts","setIsLoadingCounts","isLoadingStatus","setIsLoadingStatus","isProcessingFollow","setIsProcessingFollow","isModalOpen","setIsModalOpen","modalTitle","setModalTitle","userList","setUserList","isLoadingList","setIsLoadingList","listType","setListType","fetchCounts","async","followersRes","followingRes","Promise","all","axios","get","API_BASE_URL","count","error","fetchFollowStatus","response","headers","Authorization","fetchUserList","params","page","limit","toast","renderCount","label","onClickHandler","numberToShow","disabled","_Fragment","openFollowingList","openFollowersList","delete","_response$data2","status","Error","prev","info","_error$response2","_error$response2$data","message","post","_response$data","success","_error$response","_error$response$data","cx","cy","r","UserListModal","closeModal","Pagination","currentPage","totalPages","onPageChange","console","warn","getPageNumbers","pages","i","push","startPage","Math","max","endPage","min","index","_ref2","isMe","logout","updateUser","userId","userIdFromUrl","useParams","setIsOwnProfile","setTargetUserId","userData","setUserData","myArticles","setMyArticles","myPosts","setMyPosts","myDynamics","setMyDynamics","mySeries","setMySeries","isLoadingProfile","setIsLoadingProfile","isLoadingArticles","setIsLoadingArticles","isLoadingPosts","setIsLoadingPosts","isLoadingDynamics","setIsLoadingDynamics","isLoadingSeries","setIsLoadingSeries","setError","navigate","useNavigate","isEditingBio","setIsEditingBio","bioInput","setBioInput","isSavingBio","setIsSavingBio","bioError","setBioError","isEditingNickname","setIsEditingNickname","nicknameInput","setNicknameInput","isSavingNickname","setIsSavingNickname","nicknameError","setNicknameError","isEditingTags","setIsEditingTags","tagsArray","setTagsArray","newTagInput","setNewTagInput","isSavingTags","setIsSavingTags","tagsError","setTagsError","tagsEditorRef","activeTab","setActiveTab","selectedAvatar","setSelectedAvatar","isUploadingAvatar","setIsUploadingAvatar","avatarError","setAvatarError","fileInputRef","log","idToLoad","ownProfile","cleanedUserIdString","split","trim","parsedId","parseInt","isNaN","fetchUserData","apiUrl","_userObject","userObject","isValidResponse","publicData","isStatusOK","isDataPresent","isDataAnObject","isIdANumber","isIdPositive","responseData","bio","tags","err","_err$response","_err$response2","_err$response3","_err$response4","_err$response5","isAxiosError","_err$response6","_err$response6$data","setArticlesPage","setPostsPage","setDynamicsPage","setArticlesTotalPages","setPostsTotalPages","setDynamicsTotalPages","_response$data$user","_response$data$user2","localStorage","removeItem","_err$response7","_err$response7$data","errorMessage","articlesPage","hasMoreArticles","setHasMoreArticles","isLoadingMoreArticles","setIsLoadingMoreArticles","articlesTotalPages","postsPage","hasMorePosts","setHasMorePosts","isLoadingMorePosts","setIsLoadingMorePosts","postsTotalPages","dynamicsPage","hasMoreDynamics","setHasMoreDynamics","isLoadingMoreDynamics","setIsLoadingMoreDynamics","dynamicsTotalPages","fetchMyArticles","pageToLoad","arguments","undefined","forceRefresh","loadingTimeout","newArticles","articles","apiPages","apiTotal","total","calculatedTotalPages","ceil","posts","fetchMyPosts","dynamics","fetchMyDynamics","series","fetchMySeries","formatDate","dateString","date","Date","getTime","toLocaleDateString","handleSaveBio","put","prevData","newData","newGlobalUser","_err$response8","_err$response8$data","errorMsg","handleAddTag","newTag","includes","some","t","toLowerCase","handleRemoveTag","tagToRemove","prevTags","filter","tag","handleSaveTags","fetch","method","JSON","stringify","ok","errorBody","text","errorJson","parse","updatedUserDataResponse","json","updatedUserFromServer","handleClickOutside","event","contains","target","handleAvatarUpload","fileToUpload","formData","FormData","append","avatar_url","newAvatarUrl","_err$response10","_err$response10$data","getImageUrl","imagePath","startsWith","encodeURIComponent","urlParts","newPosts","newDynamics","filteredDynamics","dynamic","is_deleted","mainScrollRef","bioEditorRef","ref","triggerFileInput","_fileInputRef$current","click","email","FollowStats","onChange","files","file","size","accept","hidden","value","placeholder","maxLength","_err$response9","_err$response9$data","created_at","rows","autoFocus","onKeyDown","key","metaKey","ctrlKey","preventDefault","tab","article","series_name","articleId","articleSlug","articleTitle","confirm","validateStatus","prevArticles","_response$data3","_err$response11","_err$response11$data","handleDeleteArticle","postId","postTitle","_response$data4","_err$response12","_err$response12$data","handleDeletePost","target_type","share_comment","images","target_slug","target_title","shared_at","actionId","contentPreview","substring","dyn","action_id","_response$data5","_err$response13","_err$response13$data","handleDeleteDynamic","seriesName"],"sourceRoot":""}