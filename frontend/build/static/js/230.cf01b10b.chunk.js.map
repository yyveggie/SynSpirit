{"version":3,"file":"static/js/230.cf01b10b.chunk.js","mappings":"kOAaA,MA0DA,EA1DoCA,KAClC,MAAM,SAAEC,IAAaC,EAAAA,EAAAA,KACfC,GAAWC,EAAAA,EAAAA,OACX,aAAEC,IAAiBC,EAAAA,EAAAA,MAClBC,EAASC,IAAcC,EAAAA,EAAAA,WAAS,IAChCC,EAAOC,IAAYF,EAAAA,EAAAA,UAAwB,MAkClD,OAhCAG,EAAAA,EAAAA,YAAU,KAEmBC,WACzB,IAAKZ,EAGH,OAFAU,EAAS,yCACTH,GAAW,GAIb,IACEA,GAAW,GACX,MAAMM,QAAiBC,EAAAA,EAAMC,IAAI,iBAAiBf,KAC9Ca,EAASG,MAAQH,EAASG,KAAKC,QAEjCb,EAAaS,EAASG,KAAKC,QAC3BV,GAAW,KAEXG,EAAS,wCACTH,GAAW,GAEf,CAAE,MAAOW,GACPC,QAAQV,MAAM,oDAAaS,GAC3BR,EAAS,oDACTH,GAAW,EACb,GAGFa,EAAoB,GACnB,CAACpB,EAAUI,KAKZiB,EAAAA,EAAAA,KAAA,OAAKC,UAAU,4CAA2CC,SACvDjB,GACCe,EAAAA,EAAAA,KAACG,EAAAA,EAAI,CAACC,KAAK,QAAQC,IAAI,sCACrBjB,GACFkB,EAAAA,EAAAA,MAAA,OAAKL,UAAU,cAAaC,SAAA,EAC1BF,EAAAA,EAAAA,KAAA,KAAGC,UAAU,oBAAmBC,SAAEd,KAClCY,EAAAA,EAAAA,KAAA,UACEC,UAAU,6DACVM,QAASA,IAAM1B,EAAS,KAAKqB,SAC9B,gCAID,MACA,C","sources":["pages/DynamicDetailPage.tsx"],"sourcesContent":["/**\n * @file DynamicDetailPage.tsx\n * @description 动态详情页，用于直接通过URL访问特定动态\n * 支持通过URL参数获取动态ID，并展示该动态的完整详情\n * 复用TimelineProvider中的组件，确保视觉体验一致性\n */\nimport React, { useEffect, useState } from 'react';\nimport { useParams, useNavigate } from 'react-router-dom';\nimport axios from 'axios';\nimport { useTimeline } from '../contexts/TimelineContext';\nimport { DynamicItem } from '../components/DynamicFeed';\nimport { Spin } from 'antd';\n\nconst DynamicDetailPage: React.FC = () => {\n  const { actionId } = useParams<{ actionId: string }>();\n  const navigate = useNavigate();\n  const { openTimeline } = useTimeline();\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n\n  useEffect(() => {\n    // 当页面加载时获取动态详情\n    const fetchDynamicDetail = async () => {\n      if (!actionId) {\n        setError('动态ID不存在');\n        setLoading(false);\n        return;\n      }\n\n      try {\n        setLoading(true);\n        const response = await axios.get(`/api/dynamics/${actionId}`);\n        if (response.data && response.data.action) {\n          // 使用Timeline Context打开动态详情\n          openTimeline(response.data.action as DynamicItem);\n          setLoading(false);\n        } else {\n          setError('未找到该动态');\n          setLoading(false);\n        }\n      } catch (err) {\n        console.error('获取动态详情失败:', err);\n        setError('加载动态详情失败');\n        setLoading(false);\n      }\n    };\n\n    fetchDynamicDetail();\n  }, [actionId, openTimeline]);\n\n  // 这个组件实际上不需要渲染任何内容\n  // 它只负责获取动态并触发Timeline打开\n  return (\n    <div className=\"h-screen flex items-center justify-center\">\n      {loading ? (\n        <Spin size=\"large\" tip=\"加载动态中...\" />\n      ) : error ? (\n        <div className=\"text-center\">\n          <p className=\"text-red-500 mb-4\">{error}</p>\n          <button \n            className=\"px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700\"\n            onClick={() => navigate('/')}\n          >\n            返回主页\n          </button>\n        </div>\n      ) : null}\n    </div>\n  );\n};\n\nexport default DynamicDetailPage; "],"names":["DynamicDetailPage","actionId","useParams","navigate","useNavigate","openTimeline","useTimeline","loading","setLoading","useState","error","setError","useEffect","async","response","axios","get","data","action","err","console","fetchDynamicDetail","_jsx","className","children","Spin","size","tip","_jsxs","onClick"],"sourceRoot":""}