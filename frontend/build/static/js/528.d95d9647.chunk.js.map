{"version":3,"file":"static/js/528.d95d9647.chunk.js","mappings":"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","sources":["pages/CommunityTopicPage.tsx","hooks/useTopicQueries.ts"],"sourcesContent":["import React, { useState, useEffect, useRef, useCallback } from 'react';\nimport { useParams, Link, useNavigate } from 'react-router-dom';\nimport CommunityContentPageLayout from '../components/CommunityContentPageLayout';\nimport { useAuth } from '../context/AuthContext';\nimport { useSidebar } from '../contexts/SidebarContext';\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\nimport { useTopicDetails, useTopicPosts, useToggleTopicFavorite } from '../hooks/useTopicQueries';\n\n/**\n * \n * 注意: 导航栏组件(Navbar和SideNavbar)已移至全局布局，不需要在页面组件中引入\n * CommunityTopicPage.tsx\n * \n * 功能注释：\n * 定义特定主题社区页面的 React 组件。\n * 负责协调数据获取、状态管理和 UI 渲染。\n * \n * 主要功能:\n * - 从 URL 参数获取主题 slug。\n * - 使用 TanStack Query 的自定义 Hook (`useTopicDetails`) 获取并缓存特定主题的详细信息。\n * - 使用 TanStack Query 的自定义 Hook (`useTopicPosts`) 获取并缓存该主题下的帖子列表。\n * - 管理用户对该主题的收藏状态 (获取和切换)。\n * - 处理页面加载状态和错误显示。\n * - 将获取到的数据和状态传递给 `CommunityContentPageLayout` 进行布局渲染。\n * - 管理社区实时聊天面板 (`CommunityChatPanel`) 的显隐。\n * \n * 注意: 如果新增、删除或修改功能，必须在这开头的注释中同步修改，\n * 如发现功能与注释描述不同，也可以在确定后修改。\n */\n\nconst CommunityTopicPage: React.FC = () => {\n  const { topicSlug } = useParams<{ topicSlug: string }>();\n  const navigate = useNavigate();\n  const { user, token } = useAuth();\n  const { isSidebarOpen, toggleSidebar } = useSidebar();\n  const queryClient = useQueryClient();\n\n  // --- Use TanStack Query Hooks ---\n  const {\n     data: topicDetails,\n     isLoading: loadingTopic,\n     isError: isTopicError,\n     error: topicError\n  } = useTopicDetails(topicSlug);\n\n  const {\n    data: postsData,\n    isLoading: loadingPosts,\n    isError: isPostsError,\n    error: postsError\n  } = useTopicPosts(topicSlug);\n\n  // Extract posts from postsData\n  const posts = postsData?.posts || [];\n\n  // --- Instantiate Mutation Hook ---\n  const toggleFavoriteMutation = useToggleTopicFavorite(); \n\n  // Determine overall loading and error states based on hooks\n  const isLoadingPage = loadingTopic; // Primarily depends on topic details loading\n  const pageError = isTopicError ? (topicError as Error)?.message || '加载主题详情时出错' \n                   : isPostsError ? (postsError as Error)?.message || '加载帖子列表时出错' \n                   : null;\n\n  const toggleFavorite = useCallback(async () => {\n    if (!topicDetails || !user || toggleFavoriteMutation.isPending) {\n      console.log(\"[DEBUG] toggleFavorite called but prerequisite not met or mutation is pending.\");\n      return;\n    }\n\n    const currentTopicId = topicDetails.id;\n    const currentTopicName = topicDetails.name;\n    const currentlyFavorited = topicDetails.is_favorited || false;\n\n    toggleFavoriteMutation.mutate(\n      {\n        topicId: currentTopicId,\n        token: token,\n        currentFavoriteState: currentlyFavorited,\n        topicName: currentTopicName,\n      },\n      {\n        onSuccess: () => {\n          console.log(`[Toggle Topic Favorite Success] Invalidating topicDetails for slug: ${topicSlug}`);\n          queryClient.invalidateQueries({ queryKey: ['topicDetails', topicSlug] });\n        },\n        onError: () => {\n          // 错误信息由 hook 处理\n        },\n      }\n    );\n  }, [topicDetails, user, token, toggleFavoriteMutation, queryClient, topicSlug]);\n\n  const handleCreatePost = useCallback(() => {\n    if (topicDetails) {\n        navigate(`/community/${topicDetails.slug}/new-post`, { \n            state: { \n                topicId: topicDetails.id, \n                topicName: topicDetails.name \n            } \n        });\n    } else {\n        console.error(\"无法创建帖子，主题详情未加载。\", {topicDetails});\n    }\n  }, [navigate, topicDetails]);\n\n  return (\n    <>\n      <CommunityContentPageLayout\n        isLoading={isLoadingPage}\n        error={pageError}\n        topicDetails={topicDetails ?? null}\n        posts={posts}\n        isLoadingPosts={loadingPosts}\n        parentType='topic'\n        parentSlug={topicDetails?.slug}\n        showFavoriteButton={true}\n        isFavorited={topicDetails?.is_favorited || false}\n        isLoadingFavorite={toggleFavoriteMutation.isPending}\n        onToggleFavorite={toggleFavorite}\n        onCreatePost={handleCreatePost}\n        showChatButton={true}\n        isChatAvailable={true}\n      />\n    </>\n  );\n};\n\nexport default CommunityTopicPage; ","import axios from 'axios';\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\nimport { API_BASE_URL } from '../config';\nimport { toast } from 'react-toastify';\n\n// --- 接口定义 ---\n// 注意：Post 接口可能在多个 Hook 文件中重复，未来可以考虑提取到共享类型文件\n// 帖子数据类型\ninterface Post {\n  id: number;\n  title: string;\n  author: any;\n  content?: string;\n  summary?: string;\n  excerpt?: string;\n  upvotes?: number;\n  comments?: number;\n  created_at?: string;\n  timestamp?: string;\n  cover_image?: string;\n  imageUrl?: string;\n  slug: string;\n  likes_count?: number;\n  collects_count?: number;\n  comments_count?: number;\n  shares_count?: number;\n  like_count?: number;\n  collect_count?: number;\n  comment_count?: number;\n  share_count?: number;\n}\n\n// 主题数据类型\ninterface Topic {\n  id: number;\n  name: string;\n  slug: string;\n  description: string | null;\n  is_favorited?: boolean;\n}\n// --- 结束接口定义 ---\n\n\n// --- Hook for fetching Topic Details ---\nexport const useTopicDetails = (topicSlug: string | undefined) => {\n    const queryKey = ['topicDetails', topicSlug];\n    const queryFn = async () => {\n        if (!topicSlug) throw new Error(\"无效的主题标识符\");\n        console.log(`[useTopicDetails] Fetching details for slug: ${topicSlug}`);\n        const response = await axios.get<Topic>(`${API_BASE_URL}/api/slug/${topicSlug}`);\n        if (!response.data || typeof response.data !== 'object' || !response.data.id) {\n           throw new Error(\"从后端获取的主题数据格式不正确或缺少 ID\");\n        }\n        console.log(\"[useTopicDetails] Fetched details:\", response.data);\n        return response.data;\n    };\n    return useQuery<Topic, Error>(\n        {\n            queryKey: queryKey,\n            queryFn: queryFn,\n            enabled: !!topicSlug,\n            staleTime: 15 * 60 * 1000, // 15 minutes\n            gcTime: 30 * 60 * 1000, // 30 minutes\n            retry: (failureCount, error) => {\n               if ((error as any)?.response?.status === 404) {\n                   return false;\n               }\n               return failureCount < 3;\n            }\n        }\n    );\n};\n\n// --- Hook for fetching Posts for a Topic ---\nexport const useTopicPosts = (topicSlug: string | undefined) => {\n    const queryKey = ['topicPosts', topicSlug];\n    const queryFn = async () => {\n        if (!topicSlug) return { posts: [], total: 0 };\n        console.log(`[useTopicPosts] Fetching posts for slug: ${topicSlug}`);\n        const fieldsToFetch = 'id,title,content,summary,category,tags,author,cover_image,slug,view_count,created_at,like_count,collect_count,share_count,comment_count';\n        \n        // 添加时间戳防止缓存问题\n        const timestamp = new Date().getTime();\n        const url = `${API_BASE_URL}/api/topics/${topicSlug}/posts?fields=${fieldsToFetch}&_=${timestamp}`;\n        \n        console.log(`[useTopicPosts] Request URL: ${url}`);\n        \n        const response = await axios.get<{ posts: Post[], total: number }>(url, {\n            headers: {\n                'Cache-Control': 'no-cache, no-store, must-revalidate',\n                'Pragma': 'no-cache',\n                'Expires': '0'\n            }\n        });\n        \n        if (response.data && Array.isArray(response.data.posts)) {\n            const postsWithoutContent = response.data.posts.filter(post => !post.content);\n            if (postsWithoutContent.length > 0) {\n                console.warn(`[useTopicPosts] 警告: ${postsWithoutContent.length}/${response.data.posts.length} 帖子缺少content字段`);\n                if (postsWithoutContent.length > 0) {\n                    console.warn(`[useTopicPosts] 第一个缺少content的帖子ID: ${postsWithoutContent[0].id}, 标题: ${postsWithoutContent[0].title}`);\n                    // 记录更多字段，帮助调试\n                    console.warn(`[useTopicPosts] 该帖子所有字段:`, JSON.stringify(postsWithoutContent[0], null, 2));\n                }\n            } else {\n                console.log(`[useTopicPosts] 所有帖子都包含content字段，共 ${response.data.posts.length} 篇`);\n                // 记录第一个帖子的content长度\n                if (response.data.posts.length > 0) {\n                    const firstPost = response.data.posts[0];\n                    console.log(`[useTopicPosts] 第一个帖子ID: ${firstPost.id}, 标题: ${firstPost.title}, content长度: ${firstPost.content?.length || 0}`);\n                }\n            }\n        }\n        \n        console.log(\"[useTopicPosts] Fetched posts:\", response.data.posts);\n        return response.data;\n    };\n    return useQuery<{ posts: Post[], total: number }, Error>(\n        {\n            queryKey: queryKey,\n            queryFn: queryFn,\n            enabled: !!topicSlug,\n            // --- 缓存配置 --- \n            // staleTime: 5 分钟。帖子列表可能更新较快，缓存时间设短一些。\n            staleTime: 5 * 60 * 1000, \n            // gcTime: 10 分钟。帖子列表在不活跃后可以更快地被清除。\n            gcTime: 10 * 60 * 1000, \n            // --- 结束缓存配置 ---\n            // 减少缓存，强制刷新\n            refetchOnMount: true,\n            refetchOnWindowFocus: true\n        }\n    );\n};\n\n// --- Mutation Hook: Toggle Topic Favorite Status ---\ninterface ToggleTopicFavoriteVariables {\n  topicId: number;\n  token: string | null;\n  currentFavoriteState: boolean; // Is it currently favorited?\n  topicName: string; // For toast messages\n}\n\nexport const useToggleTopicFavorite = () => {\n    const queryClient = useQueryClient();\n\n    // Define the mutation function\n    const mutationFn = async ({ topicId, token, currentFavoriteState }: ToggleTopicFavoriteVariables) => {\n        if (!token) throw new Error('用户未登录');\n\n        const headers = { Authorization: `Bearer ${token}` };\n        const endpointBase = `${API_BASE_URL}/api/users/favorites/topics`;\n\n        if (currentFavoriteState) {\n            // --- Remove Favorite --- \n            console.log(`[useToggleTopicFavorite] Attempting DELETE for topic ID: ${topicId}`);\n            await axios.delete(`${endpointBase}/${topicId}`, { headers });\n        } else {\n            // --- Add Favorite --- \n            console.log(`[useToggleTopicFavorite] Attempting POST for topic ID: ${topicId}`);\n            await axios.post(endpointBase, { topic_id: topicId }, { headers });\n        }\n    };\n\n    return useMutation<void, Error, ToggleTopicFavoriteVariables>({\n        mutationFn: mutationFn,\n        onSuccess: (data, variables) => {\n            // --- Success Handling --- \n            const action = variables.currentFavoriteState ? '取消收藏' : '收藏';\n            toast.success(`已${action} \"${variables.topicName}\"`);\n            console.log(`[useToggleTopicFavorite Success] Toggled favorite for Topic ID: ${variables.topicId}`);\n            \n            // --- Invalidate relevant queries --- \n            // --- Invalidate 主题详情查询 --- \n            // 需要 slug 来 invalidate，但 variables 中没有 slug\n            // 方案一：如果 Topic ID 和 Slug 总是一起知道，可以在调用 mutate 时传入 slug\n            // 方案二：或者假设 topicDetails 缓存的 key 只用了 topicId (不推荐)\n            // 方案三：更稳妥的方式是在组件的 onSuccess 回调中 invalidate (如下面组件修改所示)\n            // queryClient.invalidateQueries({ queryKey: ['topicDetails', variables.topicSlug] }); // 这里需要 slug!\n            \n            queryClient.invalidateQueries({ queryKey: ['userFavoritesList'] });\n        },\n        onError: (error, variables) => {\n            // --- Error Handling --- \n            console.error(\"[useToggleTopicFavorite Error]:\", error);\n            toast.error('操作失败，请稍后重试');\n            // Note: Optimistic update rollback would happen here if implemented\n            // Since we keep local state for now, the component's rollback is sufficient.\n        },\n    });\n}; "],"names":["CommunityTopicPage","topicSlug","useParams","navigate","useNavigate","user","token","useAuth","isSidebarOpen","toggleSidebar","useSidebar","queryClient","useQueryClient","data","topicDetails","isLoading","loadingTopic","isError","isTopicError","error","topicError","queryKey","useQuery","queryFn","async","Error","console","log","response","axios","get","API_BASE_URL","id","enabled","staleTime","gcTime","retry","failureCount","_response","status","useTopicDetails","postsData","loadingPosts","isPostsError","postsError","posts","total","timestamp","Date","getTime","url","headers","Array","isArray","postsWithoutContent","filter","post","content","length","warn","title","JSON","stringify","_firstPost$content","firstPost","refetchOnMount","refetchOnWindowFocus","useTopicPosts","toggleFavoriteMutation","useToggleTopicFavorite","useMutation","mutationFn","topicId","currentFavoriteState","_ref","Authorization","endpointBase","delete","topic_id","onSuccess","variables","action","toast","success","topicName","invalidateQueries","onError","isLoadingPage","pageError","message","toggleFavorite","useCallback","isPending","currentTopicId","currentTopicName","name","currentlyFavorited","is_favorited","mutate","handleCreatePost","slug","state","_jsx","_Fragment","children","CommunityContentPageLayout","isLoadingPosts","parentType","parentSlug","showFavoriteButton","isFavorited","isLoadingFavorite","onToggleFavorite","onCreatePost","showChatButton","isChatAvailable"],"sourceRoot":""}