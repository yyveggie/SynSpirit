{"version":3,"file":"static/js/278.5f98db96.chunk.js","mappings":"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","sources":["components/SimpleArticleCard.tsx","components/SimplePostCard.tsx","components/SimpleDynamicCard.tsx","pages/UserSpacePage.tsx"],"sourcesContent":["import React from 'react';\nimport { Link } from 'react-router-dom';\n\nexport interface SimpleArticleCardProps {\n  article: {\n    id: number;\n    title: string;\n    coverImage?: string;\n    creator: {\n      id: number;\n      username: string;\n      avatar: string;\n    };\n    createdAt: string;\n  };\n}\n\nconst SimpleArticleCard: React.FC<SimpleArticleCardProps> = ({ article }) => {\n  // 格式化日期函数\n  const formatDate = (date: Date): string => {\n    const now = new Date();\n    const diffMs = now.getTime() - date.getTime();\n    const diffMinutes = Math.floor(diffMs / 1000 / 60);\n    const diffHours = Math.floor(diffMinutes / 60);\n    const diffDays = Math.floor(diffHours / 24);\n\n    if (diffMinutes < 1) return '刚刚';\n    if (diffMinutes < 60) return `${diffMinutes}分钟前`;\n    if (diffHours < 24) return `${diffHours}小时前`;\n    if (diffDays < 30) return `${diffDays}天前`;\n\n    const year = date.getFullYear();\n    const month = date.getMonth() + 1;\n    const day = date.getDate();\n    \n    return year === now.getFullYear() \n      ? `${month}月${day}日` \n      : `${year}年${month}月${day}日`;\n  };\n\n  return (\n    <div className=\"p-4 rounded-lg bg-gray-800/30 hover:bg-gray-800/50 transition-all duration-200\">\n      <Link \n        to={`/article/${article.id}`}\n        className=\"flex items-start gap-4\"\n      >\n        {article.coverImage && (\n          <div className=\"shrink-0 w-24 h-24 overflow-hidden rounded-md\">\n            <img \n              src={article.coverImage}\n              alt={article.title}\n              className=\"w-full h-full object-cover\"\n              onError={(e) => {\n                (e.target as HTMLImageElement).src = '/images/fallback-cover.webp';\n              }}\n            />\n          </div>\n        )}\n\n        <div className=\"flex-grow\">\n          <h3 className=\"text-white text-lg font-medium mb-2 line-clamp-2\">\n            {article.title}\n          </h3>\n          \n          <div className=\"flex items-center text-sm text-gray-300 mt-3\">\n            <div className=\"flex items-center\">\n              <img \n                src={article.creator.avatar || '/images/default-avatar.png'}\n                alt={article.creator.username}\n                className=\"w-5 h-5 rounded-full mr-2\"\n                onError={(e) => {\n                  (e.target as HTMLImageElement).src = '/images/default-avatar.png';\n                }}\n              />\n              <span>{article.creator.username}</span>\n            </div>\n            <span className=\"mx-2\">·</span>\n            <span>{formatDate(new Date(article.createdAt))}</span>\n          </div>\n        </div>\n      </Link>\n    </div>\n  );\n};\n\nexport default SimpleArticleCard; ","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nexport interface SimplePostCardProps {\n  post: {\n    id: number;\n    title: string;\n    coverImage?: string;\n    creator: {\n      id: number;\n      username: string;\n      avatar: string;\n    };\n    createdAt: string;\n  };\n}\n\nconst SimplePostCard: React.FC<SimplePostCardProps> = ({ post }) => {\n  // 格式化日期函数\n  const formatDate = (date: Date): string => {\n    const now = new Date();\n    const diffMs = now.getTime() - date.getTime();\n    const diffMinutes = Math.floor(diffMs / 1000 / 60);\n    const diffHours = Math.floor(diffMinutes / 60);\n    const diffDays = Math.floor(diffHours / 24);\n\n    if (diffMinutes < 1) return '刚刚';\n    if (diffMinutes < 60) return `${diffMinutes}分钟前`;\n    if (diffHours < 24) return `${diffHours}小时前`;\n    if (diffDays < 30) return `${diffDays}天前`;\n\n    const year = date.getFullYear();\n    const month = date.getMonth() + 1;\n    const day = date.getDate();\n    \n    return year === now.getFullYear() \n      ? `${month}月${day}日` \n      : `${year}年${month}月${day}日`;\n  };\n\n  return (\n    <div className=\"p-4 rounded-lg bg-gray-800/30 hover:bg-gray-800/50 transition-all duration-200\">\n      <Link \n        to={`/posts/${post.id}`}\n        className=\"flex items-start gap-4\"\n      >\n        {post.coverImage && (\n          <div className=\"shrink-0 w-24 h-24 overflow-hidden rounded-md\">\n            <img \n              src={post.coverImage}\n              alt={post.title}\n              className=\"w-full h-full object-cover\"\n              onError={(e) => {\n                (e.target as HTMLImageElement).src = '/images/fallback-cover.webp';\n              }}\n            />\n          </div>\n        )}\n\n        <div className=\"flex-grow\">\n          <h3 className=\"text-white text-lg font-medium mb-2 line-clamp-2\">\n            {post.title}\n          </h3>\n          \n          <div className=\"flex items-center text-sm text-gray-300 mt-3\">\n            <div className=\"flex items-center\">\n              <img \n                src={post.creator.avatar || '/images/default-avatar.png'}\n                alt={post.creator.username}\n                className=\"w-5 h-5 rounded-full mr-2\"\n                onError={(e) => {\n                  (e.target as HTMLImageElement).src = '/images/default-avatar.png';\n                }}\n              />\n              <span>{post.creator.username}</span>\n            </div>\n            <span className=\"mx-2\">·</span>\n            <span>{formatDate(new Date(post.createdAt))}</span>\n          </div>\n        </div>\n      </Link>\n    </div>\n  );\n};\n\nexport default SimplePostCard; ","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nexport interface SimpleDynamicCardProps {\n  dynamic: {\n    id: number;\n    content: string;\n    images?: string[];\n    user: {\n      id: number;\n      username: string;\n      avatar: string;\n    };\n    createdAt: string;\n  };\n}\n\nconst SimpleDynamicCard: React.FC<SimpleDynamicCardProps> = ({ dynamic }) => {\n  // 格式化日期函数\n  const formatDate = (date: Date): string => {\n    const now = new Date();\n    const diffMs = now.getTime() - date.getTime();\n    const diffMinutes = Math.floor(diffMs / 1000 / 60);\n    const diffHours = Math.floor(diffMinutes / 60);\n    const diffDays = Math.floor(diffHours / 24);\n\n    if (diffMinutes < 1) return '刚刚';\n    if (diffMinutes < 60) return `${diffMinutes}分钟前`;\n    if (diffHours < 24) return `${diffHours}小时前`;\n    if (diffDays < 30) return `${diffDays}天前`;\n\n    const year = date.getFullYear();\n    const month = date.getMonth() + 1;\n    const day = date.getDate();\n    \n    return year === now.getFullYear() \n      ? `${month}月${day}日` \n      : `${year}年${month}月${day}日`;\n  };\n\n  return (\n    <div className=\"p-4 rounded-lg bg-gray-800/30 hover:bg-gray-800/50 transition-all duration-200\">\n      <Link \n        to={`/dynamic/${dynamic.id}`}\n        className=\"flex flex-col gap-3\"\n      >\n        <div className=\"flex items-center mb-2\">\n          <img \n            src={dynamic.user.avatar || '/images/default-avatar.png'}\n            alt={dynamic.user.username}\n            className=\"w-8 h-8 rounded-full mr-3\"\n            onError={(e) => {\n              (e.target as HTMLImageElement).src = '/images/default-avatar.png';\n            }}\n          />\n          <div>\n            <div className=\"text-white font-medium\">{dynamic.user.username}</div>\n            <div className=\"text-xs text-gray-400\">\n              {formatDate(new Date(dynamic.createdAt))}\n            </div>\n          </div>\n        </div>\n\n        <div className=\"text-gray-100 line-clamp-3\">\n          {dynamic.content}\n        </div>\n        \n        {dynamic.images && dynamic.images.length > 0 && (\n          <div className=\"flex mt-2 gap-2 overflow-hidden\">\n            {dynamic.images.slice(0, 3).map((image, index) => (\n              <div \n                key={index} \n                className=\"w-20 h-20 rounded-md overflow-hidden flex-shrink-0\"\n              >\n                <img \n                  src={image}\n                  alt={`动态图片 ${index + 1}`}\n                  className=\"w-full h-full object-cover\"\n                  onError={(e) => {\n                    (e.target as HTMLImageElement).src = '/images/fallback-image.webp';\n                  }}\n                />\n              </div>\n            ))}\n            {dynamic.images.length > 3 && (\n              <div className=\"w-20 h-20 bg-gray-700/50 rounded-md flex items-center justify-center\">\n                <span className=\"text-white\">+{dynamic.images.length - 3}</span>\n              </div>\n            )}\n          </div>\n        )}\n      </Link>\n    </div>\n  );\n};\n\nexport default SimpleDynamicCard; ","import React, { useState, useEffect } from 'react';\nimport { useAuth } from '../context/AuthContext';\nimport { useNavigate } from 'react-router-dom';\n// 使用现有组件替代自定义UI组件\nimport SimpleArticleCard from '../components/SimpleArticleCard';\nimport SimplePostCard from '../components/SimplePostCard';\nimport SimpleDynamicCard from '../components/SimpleDynamicCard';\n\n/**\n * UserSpacePage 组件\n * \n * 功能：展示当前登录用户的收藏和点赞的文章、帖子和动态\n * - 分类显示用户交互的内容\n * - 支持筛选不同类型的内容和交互\n * - 分页加载\n * - 点击内容可跳转到详情页\n */\nconst UserSpacePage: React.FC = () => {\n  const { token, user } = useAuth();\n  const navigate = useNavigate();\n  const [activeTab, setActiveTab] = useState('all');\n  const [interactionType, setInteractionType] = useState('all');\n  const [interactions, setInteractions] = useState<any[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [pagination, setPagination] = useState({\n    total: 0,\n    pages: 0,\n    page: 1,\n    per_page: 10\n  });\n  const [error, setError] = useState<string | null>(null);\n\n  // 加载用户交互数据\n  const fetchInteractions = async (page = 1, contentType: string | null = null, interactionType: string | null = null) => {\n    setLoading(true);\n    try {\n      let url = `/api/users/me/interactions?page=${page}&per_page=${pagination.per_page}`;\n      \n      // 添加内容类型过滤\n      if (contentType && contentType !== 'all') {\n        url += `&content_type=${contentType}`;\n      }\n      \n      // 添加交互类型过滤\n      if (interactionType && interactionType !== 'all') {\n        url += `&interaction_type=${interactionType}`;\n      }\n      \n      const response = await fetch(url, {\n        headers: {\n          'Authorization': `Bearer ${token}`\n        }\n      });\n      \n      if (!response.ok) {\n        throw new Error('获取数据失败');\n      }\n      \n      const data = await response.json();\n      if (data.code === 200) {\n        setInteractions(data.data.interactions);\n        setPagination(data.data.pagination);\n      } else {\n        setError(data.message || '加载失败');\n      }\n    } catch (err: any) {\n      setError(err.message);\n      console.error('获取交互数据失败:', err);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // 初始加载或者参数变化时重新获取数据\n  useEffect(() => {\n    if (token) {\n      const contentType = activeTab === 'all' ? null : activeTab;\n      const interaction = interactionType === 'all' ? null : interactionType;\n      fetchInteractions(1, contentType, interaction);\n    } else {\n      // 未登录时跳转到登录页\n      navigate('/login');\n    }\n  }, [token, activeTab, interactionType, navigate]);\n\n  // 处理分页\n  const handlePageChange = (newPage: number) => {\n    if (newPage >= 1 && newPage <= pagination.pages) {\n      const contentType = activeTab === 'all' ? null : activeTab;\n      const interaction = interactionType === 'all' ? null : interactionType;\n      fetchInteractions(newPage, contentType, interaction);\n    }\n  };\n\n  // 处理内容类型Tab切换\n  const handleTabChange = (tab: string) => {\n    setActiveTab(tab);\n  };\n\n  // 处理交互类型切换\n  const handleInteractionTypeChange = (type: string) => {\n    setInteractionType(type);\n  };\n\n  // 渲染内容列表\n  const renderContent = () => {\n    if (loading) {\n      return (\n        <div className=\"flex justify-center items-center h-40\">\n          <div className=\"animate-spin rounded-full h-10 w-10 border-b-2 border-white\"></div>\n        </div>\n      );\n    }\n\n    if (error) {\n      return (\n        <div className=\"text-center p-6 text-red-500\">\n          <p>{error}</p>\n          <button\n            className=\"mt-4 px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700\"\n            onClick={() => {\n              setError(null);\n              const contentType = activeTab === 'all' ? null : activeTab;\n              const interaction = interactionType === 'all' ? null : interactionType;\n              fetchInteractions(1, contentType, interaction);\n            }}\n          >\n            重试\n          </button>\n        </div>\n      );\n    }\n\n    if (interactions.length === 0) {\n      return (\n        <div className=\"text-center p-10 text-gray-400\">\n          暂无内容\n        </div>\n      );\n    }\n\n    return (\n      <div className=\"grid gap-6 mt-6\">\n        {interactions.map((item) => {\n          if (item.type === 'article') {\n            return (\n              <SimpleArticleCard\n                key={`article-${item.id}`}\n                article={{\n                  id: item.content_id,\n                  title: item.title,\n                  coverImage: item.cover_image,\n                  creator: item.creator,\n                  createdAt: item.created_at\n                }}\n              />\n            );\n          } else if (item.type === 'post') {\n            return (\n              <SimplePostCard\n                key={`post-${item.id}`}\n                post={{\n                  id: item.content_id,\n                  title: item.title,\n                  coverImage: item.cover_image,\n                  creator: item.creator,\n                  createdAt: item.created_at\n                }}\n              />\n            );\n          } else if (item.type === 'action') {\n            // 确保images是数组类型\n            let imagesArray: string[] = [];\n            \n            // 检查item.images是否存在且是数组\n            if (item.images) {\n              if (Array.isArray(item.images)) {\n                imagesArray = item.images;\n              } else if (typeof item.images === 'string') {\n                // 如果是字符串(但可能是空字符串)，尝试分割\n                imagesArray = item.images.trim() ? item.images.split(',') : [];\n              }\n            }\n            \n            return (\n              <SimpleDynamicCard\n                key={`action-${item.id}`}\n                dynamic={{\n                  id: item.content_id,\n                  content: item.content_preview || item.content,\n                  images: imagesArray,\n                  user: item.creator,\n                  createdAt: item.created_at\n                }}\n              />\n            );\n          }\n          return null;\n        })}\n      </div>\n    );\n  };\n\n  // 渲染分页控件\n  const renderPagination = () => {\n    if (pagination.pages <= 1) return null;\n    \n    return (\n      <div className=\"flex justify-center mt-8 mb-4\">\n        <div className=\"flex space-x-2\">\n          <button\n            className={`px-4 py-2 rounded border border-blue-400/30 text-white ${\n              pagination.page === 1 ? 'opacity-50 cursor-not-allowed' : 'hover:bg-blue-100/10'\n            }`}\n            disabled={pagination.page === 1}\n            onClick={() => handlePageChange(pagination.page - 1)}\n          >\n            上一页\n          </button>\n          \n          <span className=\"flex items-center px-4 bg-purple-100 text-purple-800 rounded\">\n            {pagination.page} / {pagination.pages}\n          </span>\n          \n          <button\n            className={`px-4 py-2 rounded border border-blue-400/30 text-white ${\n              pagination.page === pagination.pages ? 'opacity-50 cursor-not-allowed' : 'hover:bg-blue-100/10'\n            }`}\n            disabled={pagination.page === pagination.pages}\n            onClick={() => handlePageChange(pagination.page + 1)}\n          >\n            下一页\n          </button>\n        </div>\n      </div>\n    );\n  };\n\n  return (\n    <div className=\"container mx-auto px-4 py-8\">\n      <h1 className=\"text-2xl font-bold text-white mb-6\">我的空间</h1>\n      \n      {/* 交互类型过滤器 */}\n      <div className=\"mb-6 flex gap-4\">\n        <button\n          className={`px-4 py-2 rounded font-medium ${\n            interactionType === 'all' \n              ? 'bg-purple-600 hover:bg-purple-700 text-white' \n              : 'bg-transparent hover:bg-blue-100/10 text-white border border-blue-400/30'\n          }`}\n          onClick={() => handleInteractionTypeChange('all')}\n        >\n          全部\n        </button>\n        <button\n          className={`px-4 py-2 rounded font-medium ${\n            interactionType === 'like' \n              ? 'bg-purple-600 hover:bg-purple-700 text-white' \n              : 'bg-transparent hover:bg-blue-100/10 text-white border border-blue-400/30'\n          }`}\n          onClick={() => handleInteractionTypeChange('like')}\n        >\n          我的点赞\n        </button>\n        <button\n          className={`px-4 py-2 rounded font-medium ${\n            interactionType === 'collect' \n              ? 'bg-purple-600 hover:bg-purple-700 text-white' \n              : 'bg-transparent hover:bg-blue-100/10 text-white border border-blue-400/30'\n          }`}\n          onClick={() => handleInteractionTypeChange('collect')}\n        >\n          我的收藏\n        </button>\n      </div>\n      \n      {/* 内容类型选项卡 */}\n      <div className=\"border-b border-gray-200/20 mb-6\">\n        <div className=\"-mb-px flex space-x-8\">\n          <button\n            className={`py-2 px-1 font-medium text-sm border-b-2 ${\n              activeTab === 'all'\n                ? 'border-purple-500 text-purple-300'\n                : 'border-transparent text-gray-300 hover:text-gray-100 hover:border-gray-300'\n            }`}\n            onClick={() => handleTabChange('all')}\n          >\n            全部内容\n          </button>\n          <button\n            className={`py-2 px-1 font-medium text-sm border-b-2 ${\n              activeTab === 'article'\n                ? 'border-purple-500 text-purple-300'\n                : 'border-transparent text-gray-300 hover:text-gray-100 hover:border-gray-300'\n            }`}\n            onClick={() => handleTabChange('article')}\n          >\n            文章\n          </button>\n          <button\n            className={`py-2 px-1 font-medium text-sm border-b-2 ${\n              activeTab === 'post'\n                ? 'border-purple-500 text-purple-300'\n                : 'border-transparent text-gray-300 hover:text-gray-100 hover:border-gray-300'\n            }`}\n            onClick={() => handleTabChange('post')}\n          >\n            帖子\n          </button>\n          <button\n            className={`py-2 px-1 font-medium text-sm border-b-2 ${\n              activeTab === 'action'\n                ? 'border-purple-500 text-purple-300'\n                : 'border-transparent text-gray-300 hover:text-gray-100 hover:border-gray-300'\n            }`}\n            onClick={() => handleTabChange('action')}\n          >\n            动态\n          </button>\n        </div>\n      </div>\n      \n      {/* 内容列表 */}\n      {renderContent()}\n      \n      {/* 分页控件 */}\n      {renderPagination()}\n    </div>\n  );\n};\n\nexport default UserSpacePage; "],"names":["_ref","article","_jsx","className","children","_jsxs","Link","to","id","coverImage","src","alt","title","onError","e","target","creator","avatar","username","date","now","Date","diffMs","getTime","diffMinutes","Math","floor","diffHours","diffDays","year","getFullYear","month","getMonth","day","getDate","formatDate","createdAt","post","dynamic","user","content","images","length","slice","map","image","index","UserSpacePage","token","useAuth","navigate","useNavigate","activeTab","setActiveTab","useState","interactionType","setInteractionType","interactions","setInteractions","loading","setLoading","pagination","setPagination","total","pages","page","per_page","error","setError","fetchInteractions","async","arguments","undefined","contentType","url","response","fetch","headers","ok","Error","data","json","code","message","err","console","useEffect","handlePageChange","newPage","handleTabChange","tab","handleInteractionTypeChange","type","onClick","item","SimpleArticleCard","content_id","cover_image","created_at","SimplePostCard","imagesArray","Array","isArray","trim","split","SimpleDynamicCard","content_preview","disabled"],"sourceRoot":""}