{"version":3,"file":"static/js/403.089369b7.chunk.js","mappings":"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","sources":["pages/ToolsPage.tsx","components/Chatbot.tsx","hooks/useToolsQueries.ts"],"sourcesContent":["/**\n * @file ToolsPage.tsx\n * @description 工具展示页面，允许用户浏览、按分类和标签筛选工具。\n *              使用 TanStack Query (通过自定义 Hooks: useCategories, useTags, useTools) \n *              进行数据获取和缓存管理。\n */\nimport React, { useState } from 'react'; // 移除 useEffect\n// 移除 Navbar 和 SideNavbar 的导入\n// // 已移除: import Navbar from \"../components/Navbar\";\n// import SideNavbar from '../components/SideNavbar';\nimport { Link, useNavigate } from 'react-router-dom';\nimport Chatbot from '../components/Chatbot';\nimport { useSidebar } from '../contexts/SidebarContext'; // 引入 useSidebar\n// 导入自定义 Hooks 和类型\nimport { useCategories, useTags, useTools, Tool, Category } from '../hooks/useToolsQueries';\n\n// 移除接口定义，因为它们从 Hook 文件导入\n/*\ninterface Tool { ... }\ninterface Category { ... }\n*/\n\n// 移除分页常量，因为当前 Hook 未实现分页\n// const TOOLS_PER_PAGE = 20;\n\nconst ToolsPage: React.FC = () => {\n    // 移除数据状态: tools, categories, allTags, isLoading, error\n    // const [tools, setTools] = useState<Tool[]>([]);\n    // const [categories, setCategories] = useState<Category[]>([]);\n    // const [allTags, setAllTags] = useState<string[]>([]);\n    // const [isLoading, setIsLoading] = useState<boolean>(true);\n    // const [error, setError] = useState<string | null>(null);\n    \n    const { isSidebarOpen } = useSidebar(); // 使用 Context\n    // 保留筛选状态\n    const [selectedCategory, setSelectedCategory] = useState<number | 'all'>('all');\n    const [selectedTag, setSelectedTag] = useState<string | 'all'>('all');\n    const [isChatOpen, setIsChatOpen] = useState(false);\n    const navigate = useNavigate();\n\n    // --- 使用 TanStack Query Hooks 获取数据 --- \n    const { data: categories = [], isLoading: isLoadingCategories, error: errorCategories } = useCategories();\n    const { data: allTags = [], isLoading: isLoadingTags, error: errorTags } = useTags();\n    const { data: tools = [], isLoading: isLoadingTools, error: errorTools } = useTools(selectedCategory, selectedTag);\n\n    // 合并加载状态和错误状态 (简化处理)\n    const isLoading = isLoadingCategories || isLoadingTags || isLoadingTools;\n    // 优先显示更具体的错误\n    const error = errorTools?.message ?? errorTags?.message ?? errorCategories?.message ?? null;\n\n    // 移除 useEffect 数据获取逻辑\n    /*\n    useEffect(() => {\n        const fetchData = async () => {\n           // ... (旧逻辑已移除) ...\n        };\n        fetchData();\n    }, [selectedCategory, selectedTag, categories.length, allTags.length]);\n    */\n\n    // 处理分类点击 (保持不变，但不再需要手动触发 fetch)\n    const handleCategoryClick = (categoryId: number | 'all') => {\n        setSelectedCategory(categoryId);\n        setSelectedTag('all'); // 重置标签选择\n    };\n\n    // 处理标签点击 (保持不变，但不再需要手动触发 fetch)\n    const handleTagClick = (tag: string | 'all') => {\n        setSelectedTag(tag);\n        setSelectedCategory('all'); // 重置分类选择\n    };\n\n    // 处理工具卡片点击 (保持不变)\n    const handleToolClick = (slug: string) => {\n        navigate(`/tools/${slug}`);\n    };\n\n    return (\n        <div className=\"min-h-screen flex flex-col bg-transparent text-white\">\n            {/* 移除 Navbar */}\n            \n            <div className=\"flex flex-1 overflow-hidden\"> \n              {/* 移除 SideNavbar */}\n              \n              <main className={`flex-grow overflow-y-auto transition-all duration-300 ease-in-out ${isSidebarOpen ? 'lg:ml-56' : 'ml-0'} pt-4`}> \n                 <div className=\"container mx-auto px-4 pb-4\"> \n                    {/* 分类按钮区域 - 使用 Hook 返回的 categories */}\n                    {/* 添加 categories 加载和错误处理 */} \n                    {isLoadingCategories ? (\n                        <div className=\"mb-6 text-gray-400\">加载分类中...</div>\n                    ) : errorCategories ? (\n                        <div className=\"mb-6 text-red-400\">加载分类失败: {errorCategories.message}</div>\n                    ) : (\n                    <div className=\"mb-6 flex flex-wrap gap-2\">\n                        <button\n                            onClick={() => handleCategoryClick('all')}\n                            className={`px-4 py-1.5 rounded-md text-sm font-medium transition-colors ${ \n                                selectedCategory === 'all' && selectedTag === 'all'\n                                ? 'bg-indigo-600 text-white shadow-md' \n                                : 'bg-gray-700/50 hover:bg-gray-600/80 text-gray-200'\n                            }`}\n                        >\n                            全部\n                        </button>\n                        {categories.map((category) => (\n                            <button\n                                key={category.id}\n                                onClick={() => handleCategoryClick(category.id)}\n                                className={`px-4 py-1.5 rounded-md text-sm font-medium transition-colors ${ \n                                    selectedCategory === category.id && selectedTag === 'all'\n                                    ? 'bg-indigo-600 text-white shadow-md' \n                                    : 'bg-gray-700/50 hover:bg-gray-600/80 text-gray-200'\n                                }`}\n                            >\n                                {category.name}\n                            </button>\n                        ))}\n                    </div>\n                    )}\n\n                    {/* 标签按钮区域 - 使用 Hook 返回的 allTags */}\n                    {/* 添加 allTags 加载和错误处理 */} \n                    {isLoadingTags ? (\n                        <div className=\"mb-8 text-gray-400\">加载标签中...</div>\n                    ) : errorTags ? (\n                         <div className=\"mb-8 text-red-400\">加载标签失败: {errorTags.message}</div>\n                    ) : allTags.length > 0 && (\n                        <div className=\"mb-8 flex flex-wrap gap-2\">\n                            <button\n                                onClick={() => handleTagClick('all')}\n                                className={`px-3 py-1 rounded-full text-xs font-medium transition-colors ${ \n                                    selectedTag === 'all'\n                                    ? 'bg-teal-600 text-white shadow' \n                                    : 'bg-gray-600/60 hover:bg-gray-500/80 text-gray-300'\n                                }`}\n                            >\n                                # 所有标签\n                            </button>\n                            {allTags.map((tag) => (\n                                <button\n                                    key={tag} \n                                    onClick={() => handleTagClick(tag)}\n                                    className={`px-3 py-1 rounded-full text-xs font-medium transition-colors ${ \n                                        selectedTag === tag \n                                        ? 'bg-teal-600 text-white shadow' \n                                        : 'bg-gray-600/60 hover:bg-gray-500/80 text-gray-300'\n                                    }`}\n                                >\n                                    # {tag}\n                                </button>\n                            ))}\n                        </div>\n                    )}\n\n                    {/* 工具列表区域 - 使用合并的 isLoading 和 error */} \n                    {isLoading && (\n                        <div className=\"flex justify-center items-center h-screen\" style={{\n                          backgroundColor: 'var(--bg-base-color)',\n                          backgroundImage: 'var(--bg-gradient)',\n                          width: '100%',\n                          height: '100vh',\n                        }}>\n                          <svg className=\"animate-spin h-10 w-10 text-white\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\">\n                            <circle className=\"opacity-25\" cx=\"12\" cy=\"12\" r=\"10\" stroke=\"currentColor\" strokeWidth=\"4\"></circle>\n                            <path className=\"opacity-75\" fill=\"currentColor\" d=\"M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z\"></path>\n                          </svg>\n                        </div>\n                    )}\n\n                    {/* 显示合并后的错误 */} \n                    {error && !isLoading && (\n                        <div className=\"text-center py-10 bg-red-900/30 border border-red-700 text-red-300 px-4 py-3 rounded relative\" role=\"alert\">\n                            <strong className=\"font-bold\">出错啦！</strong>\n                            <span className=\"block sm:inline\"> {error}</span>\n                        </div>\n                    )}\n\n                    {/* 使用 Hook 返回的 tools */} \n                    {!isLoading && !error && tools.length === 0 && (\n                        <div className=\"text-center py-10\">\n                            <p className=\"text-gray-400\">暂时还没有工具哦。</p>\n                        </div>\n                    )}\n\n                    {!isLoading && !error && tools.length > 0 && (\n                        <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 xl:grid-cols-5 gap-4 md:gap-5\">\n                            {tools.map((tool) => (\n                                <div \n                                    key={tool.id} \n                                    onClick={() => handleToolClick(tool.slug)}\n                                    className=\"cursor-pointer bg-white/10 backdrop-blur-md border border-white/20 rounded-lg p-4 hover:bg-white/20 transition-colors duration-200 shadow-sm hover:shadow-md\"\n                                >\n                                    <h3 className=\"text-base font-semibold text-white mb-1 truncate\" title={tool.name}>{tool.name}</h3>\n                                    <p className=\"text-xs text-gray-300 line-clamp-2\" title={tool.description}>{tool.description}</p>\n                                     {tool.tags && tool.tags.length > 0 && (\n                                         <div className=\"mt-2 flex flex-wrap gap-1\">\n                                             {tool.tags.slice(0, 3).map(tag => (\n                                                 <span key={tag} className=\"text-xs bg-teal-600/70 text-teal-100 px-1.5 py-0.5 rounded-full\">\n                                                     # {tag}\n                                                 </span>\n                                             ))}\n                                         </div>\n                                     )}\n                                </div>\n                            ))}\n                        </div>\n                    )}\n                 </div>\n              </main>\n            </div>\n\n            <Chatbot isOpen={isChatOpen} onClose={() => setIsChatOpen(false)} />\n        </div>\n    );\n};\n\nexport default ToolsPage; ","/**\n * 此文件定义了 Chatbot 组件，提供一个悬浮的聊天机器人界面。\n *\n * 主要功能:\n * - 根据 isOpen prop 控制聊天窗口的显示和隐藏。\n * - 提供聊天输入框和消息显示区域。\n * - 与后端聊天 API 进行交互，发送用户消息并接收 AI 响应。\n * - 可能包含一些预设问题或功能按钮。\n * - 作为一个独立的、可嵌入到不同页面的组件。\n *\n * 注意: 如果新增、删除或修改功能，必须在这开头的注释中同步修改，\n * 如发现功能与注释描述不同，也可以在确定后修改。\n */\nimport React, { useState, useEffect, useRef, useCallback } from 'react';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport { useChatLogic, Message } from '../hooks/useChatLogic'; // 导入Hook和Message类型\nimport { API_BASE_URL } from '../config'; // 仍然需要API_BASE_URL用于测试重连\nimport { useAuth } from '../context/AuthContext'; // 添加 useAuth 导入\n\ninterface ChatbotProps {\n  isOpen: boolean;\n  onClose: () => void;\n  toolName?: string;\n  toolDescription?: string;\n  /** 启用内联模式，适用于嵌入在其他组件中而非悬浮显示 */\n  inlineMode?: boolean;\n}\n\n// Quick message interface (可以考虑移到共享文件)\ninterface QuickMessage {\n  label: string;\n  value: string;\n}\n\nconst Chatbot: React.FC<ChatbotProps> = ({ isOpen, onClose, inlineMode = false }) => {\n  const { token, user } = useAuth(); // 获取用户认证信息\n  const [input, setInput] = useState('');\n  const [isSmallScreen, setIsSmallScreen] = useState(window.innerWidth < 768);\n  \n  // 使用自定义Hook管理核心聊天逻辑\n  const {\n    messages, \n    setMessages, // 可能需要用于重试逻辑\n    currentConversationId,\n    setCurrentConversationId, // 可能需要用于导航逻辑\n    isLoading,\n    apiError,\n    isTyping,\n    messagesEndRef,\n    handleSend: sendChatMessage, // 重命名以避免与内部函数冲突\n    loadConversation,\n    createNewChat, // Chatbot本身可能不需要这个\n    handleRetry: retryApiConnection // 重命名\n  } = useChatLogic(); // 初始对话ID由Hook管理\n\n  const closeRef = useRef(onClose);\n  \n  useEffect(() => {\n    closeRef.current = onClose;\n  }, [onClose]);\n  \n  // 处理重试连接（现在使用Hook中的逻辑，但需要额外fetch测试）\n  const handleRetry = () => {\n    retryApiConnection(); // 调用Hook中的清理错误状态逻辑\n    \n    // 这里保留测试连接的逻辑，或者可以将其移入Hook?\n    // 为了简单起见，暂时保留在这里，但理想情况是Hook处理所有API交互\n    setMessages(prev => [...prev.filter(msg => !msg.content.includes('无法连接到聊天服务') && !msg.content.includes('正在尝试重新连接')),\n      { role: 'assistant', content: '正在尝试重新连接...', displayContent: '正在尝试重新连接...' }]);\n      \n    fetch(`${API_BASE_URL}/api/chat`, {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({ message: '测试连接', conversation_id: null })\n    })\n    .then(response => {\n      if (response.ok) {\n        setMessages(prev => [...prev.filter(msg => msg.content !== '正在尝试重新连接...'),\n          { role: 'assistant', content: '连接已恢复！请问有什么需要帮助的？🥰', displayContent: '连接已恢复！请问有什么需要帮助的？🥰' }]);\n        const reader = response.body?.getReader();\n        if (reader) reader.cancel();\n      } else {\n        throw new Error('API仍然无法连接');\n      }\n    })\n    .catch(error => {\n      console.error('重试连接失败:', error);\n      setMessages(prev => [...prev.filter(msg => msg.content !== '正在尝试重新连接...'),\n        { role: 'assistant', content: '抱歉，服务器仍然无法连接。请检查后端服务是否正常运行。', displayContent: '抱歉，服务器仍然无法连接。请检查后端服务是否正常运行。' }]);\n      // Hook内部已经处理了apiError状态\n    });\n  };\n\n  // 处理发送消息（调用Hook中的函数）\n  const handleSend = async () => {\n    if (input.trim() === '' || isLoading) return;\n    const currentInput = input;\n    setInput(''); // 清空输入框\n    const newConvId = await sendChatMessage(currentInput);\n    if (newConvId && !currentConversationId) {\n      // 如果Hook创建了新对话，更新本地状态（如果需要）\n      setCurrentConversationId(newConvId);\n    }\n    // 注意：isLoading, messages, isTyping等状态由Hook自动管理\n  };\n  \n  // 处理键盘事件\n  const handleKeyDown = (e: React.KeyboardEvent) => {\n    if (e.key === 'Enter' && !e.shiftKey) {\n      e.preventDefault();\n      handleSend();\n    }\n  };\n  \n  // 快速消息（保持不变，因为这是UI特定部分）\n  const quickMessages: QuickMessage[] = [\n    { label: '推荐AI绘画工具?', value: '推荐AI绘画工具?' },\n    { label: '生成视频的AI?', value: '有什么好用的AI视频生成工具？' },\n    { label: '写代码的AI助手?', value: '有哪些适合写代码的AI助手？' }\n  ];\n\n  // --- UI Rendering ---\n  if (inlineMode) {\n    return (\n      <div className={`${isOpen ? 'block' : 'hidden'} h-full`}>\n        <motion.div \n          initial={{ opacity: 0, scale: 0.95 }}\n          animate={isOpen ? { opacity: 1, scale: 1 } : { opacity: 0, scale: 0.95 }}\n          transition={{ duration: 0.2 }}\n          className=\"h-full\"\n        >\n          <div className=\"bg-white rounded-lg shadow-xl overflow-hidden flex flex-col w-full h-full\">\n            {/* Header */} \n            <div className=\"bg-gray-100 px-4 py-3 flex justify-between items-center border-b border-gray-200 flex-shrink-0\">\n              <h3 className=\"text-gray-800 font-medium text-lg\">Lynn</h3>\n              <div className=\"flex space-x-3 items-center\">\n                {apiError && (\n                  <span className=\"text-xs text-red-500\" title={apiError}>连接错误</span>\n                )}\n                <button \n                  onClick={onClose}\n                  className=\"text-gray-500 hover:text-gray-800 transition-colors\"\n                  title=\"关闭\"\n                >\n                  <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-5 w-5\" viewBox=\"0 0 20 20\" fill=\"currentColor\">\n                    <path fillRule=\"evenodd\" d=\"M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z\" clipRule=\"evenodd\" />\n                  </svg>\n                </button>\n              </div>\n            </div>\n\n            {/* Message list */}\n            <div ref={messagesEndRef} className=\"flex-grow overflow-y-auto p-4 space-y-4 bg-gray-100\">\n              {messages.map((msg, index) => (\n                <div key={msg.id ?? `temp-${msg.role}-${index}`} className={`flex ${msg.role === 'user' ? 'justify-end' : 'justify-start'}`}>\n                  <div className={`max-w-[80%] px-4 py-2 rounded-lg text-sm shadow ${msg.role === 'user' ? 'bg-gray-200 text-black' : 'bg-white text-black'}`}>\n                    {(msg.displayContent || '').split('\\n').map((line, i) => (\n                      <span key={i} className=\"block\">{line}</span>\n                    ))}\n                    {msg.role === 'assistant' && isTyping && index === messages.length - 1 && (\n                      <span className=\"inline-block w-2 h-4 bg-gray-500 ml-0.5 animate-pulse\"></span>\n                    )}\n                    {msg.role === 'assistant' && apiError && msg.content.includes('无法连接到聊天服务') && (\n                      <button onClick={handleRetry} className=\"mt-2 text-xs text-blue-600 hover:underline\">\n                        重试连接\n                      </button>\n                    )}\n                    {msg.role === 'assistant' && apiError && !msg.content.includes('无法连接到聊天服务') && msg.content.includes('出错啦') && (\n                      <span className=\"block mt-1 text-xs text-red-500\">错误: {apiError}</span>\n                    )}\n                  </div>\n                </div>\n              ))}\n              {isLoading && !isTyping && (\n                <div className=\"flex justify-start\">\n                  <div className=\"bg-white text-black px-4 py-2 rounded-lg text-sm shadow\">\n                    <span className=\"italic text-gray-500\">Lynn 正在思考...</span>\n                  </div>\n                </div>\n              )}\n            </div>\n\n            {/* Quick messages */} \n            {messages.length <= 1 && !isLoading && ( \n              <div className=\"flex-shrink-0 p-2 border-t border-gray-200 bg-white flex flex-wrap gap-2 justify-center\">\n                {quickMessages.map((qm) => (\n                  <button\n                    key={`qm-${qm.label}-${qm.value}`}\n                    onClick={() => { setInput(qm.value); handleSend(); }} \n                    className=\"px-3 py-1 bg-gray-100 text-gray-700 rounded-full text-xs hover:bg-gray-200 transition-colors\"\n                  >\n                    {qm.label}\n                  </button>\n                ))}\n              </div>\n            )}\n\n            {/* Input area */} \n            <div className=\"p-4 border-t border-gray-200 bg-white flex-shrink-0\">\n              <div className=\"flex items-center space-x-2\">\n                <input\n                  type=\"text\"\n                  value={input}\n                  onChange={(e) => setInput(e.target.value)}\n                  onKeyDown={handleKeyDown}\n                  placeholder=\"输入你的需求...\"\n                  className=\"flex-grow px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-1 focus:ring-gray-400 text-black text-sm\"\n                  disabled={isLoading}\n                />\n                <button\n                  onClick={handleSend}\n                  className=\"px-3 py-2 bg-gray-100 text-gray-600 rounded-md hover:bg-gray-200 focus:outline-none focus:ring-1 focus:ring-gray-400 disabled:opacity-50 text-sm\"\n                  disabled={isLoading || input.trim() === ''}\n                >\n                  <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-5 w-5\" viewBox=\"0 0 20 20\" fill=\"currentColor\"> <path d=\"M10.894 2.553a1 1 0 00-1.788 0l-7 14a1 1 0 001.169 1.409l5-1.429A1 1 0 009 16.571V11.69l3.226-3.225a.5.5 0 01.707 0l1.293 1.293a.5.5 0 010 .707L10.07 13.69V16.57a1 1 0 00.725.962l5 1.428a1 1 0 001.17-1.408l-7-14z\" /> </svg>\n                </button>\n              </div>\n            </div>\n          </div>\n        </motion.div>\n      </div>\n    );\n  }\n\n  // 浮动窗口模式\n  return (\n    <div className=\"fixed bottom-6 right-6 z-50\">\n      <div className={`${isOpen ? 'block' : 'hidden'}`}>\n        <motion.div \n          initial={{ opacity: 0, y: 50, scale: 0.9 }}\n          animate={isOpen ? { opacity: 1, y: 0, scale: 1 } : { opacity: 0, y: 50, scale: 0.9 }}\n          transition={{ duration: 0.2 }}\n        >\n          <div className=\"bg-white rounded-lg shadow-xl overflow-hidden flex flex-col w-96 max-h-[80vh]\"\n            style={{ height: '600px' }}\n          >\n            {/* Header */} \n            <div className=\"bg-gray-100 px-4 py-3 flex justify-between items-center border-b border-gray-200 flex-shrink-0\">\n              <h3 className=\"text-gray-800 font-medium text-lg\">Lynn</h3>\n              <div className=\"flex space-x-3 items-center\">\n                {apiError && (\n                  <span className=\"text-xs text-red-500\" title={apiError}>连接错误</span>\n                )}\n                <button \n                  onClick={onClose}\n                  className=\"text-gray-500 hover:text-gray-800 transition-colors\"\n                  title=\"关闭\"\n                >\n                  <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-5 w-5\" viewBox=\"0 0 20 20\" fill=\"currentColor\">\n                    <path fillRule=\"evenodd\" d=\"M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z\" clipRule=\"evenodd\" />\n                  </svg>\n                </button>\n              </div>\n            </div>\n\n            {/* Message list */}\n            <div ref={messagesEndRef} className=\"flex-grow overflow-y-auto p-4 space-y-4 bg-gray-100\">\n              {messages.map((msg, index) => (\n                <div key={msg.id ?? `temp-${msg.role}-${index}`} className={`flex ${msg.role === 'user' ? 'justify-end' : 'justify-start'}`}>\n                  <div className={`max-w-[80%] px-4 py-2 rounded-lg text-sm shadow ${msg.role === 'user' ? 'bg-gray-200 text-black' : 'bg-white text-black'}`}>\n                    {(msg.displayContent || '').split('\\n').map((line, i) => (\n                      <span key={i} className=\"block\">{line}</span>\n                    ))}\n                    {msg.role === 'assistant' && isTyping && index === messages.length - 1 && (\n                      <span className=\"inline-block w-2 h-4 bg-gray-500 ml-0.5 animate-pulse\"></span>\n                    )}\n                    {msg.role === 'assistant' && apiError && msg.content.includes('无法连接到聊天服务') && (\n                      <button onClick={handleRetry} className=\"mt-2 text-xs text-blue-600 hover:underline\">\n                        重试连接\n                      </button>\n                    )}\n                    {msg.role === 'assistant' && apiError && !msg.content.includes('无法连接到聊天服务') && msg.content.includes('出错啦') && (\n                      <span className=\"block mt-1 text-xs text-red-500\">错误: {apiError}</span>\n                    )}\n                  </div>\n                </div>\n              ))}\n              {isLoading && !isTyping && (\n                <div className=\"flex justify-start\">\n                  <div className=\"bg-white text-black px-4 py-2 rounded-lg text-sm shadow\">\n                    <span className=\"italic text-gray-500\">Lynn 正在思考...</span>\n                  </div>\n                </div>\n              )}\n            </div>\n\n            {/* Quick messages */} \n            {messages.length <= 1 && !isLoading && ( \n              <div className=\"flex-shrink-0 p-2 border-t border-gray-200 bg-white flex flex-wrap gap-2 justify-center\">\n                {quickMessages.map((qm) => (\n                  <button\n                    key={`qm-${qm.label}-${qm.value}`}\n                    onClick={() => { setInput(qm.value); handleSend(); }} \n                    className=\"px-3 py-1 bg-gray-100 text-gray-700 rounded-full text-xs hover:bg-gray-200 transition-colors\"\n                  >\n                    {qm.label}\n                  </button>\n                ))}\n              </div>\n            )}\n\n            {/* Input area */} \n            <div className=\"p-4 border-t border-gray-200 bg-white flex-shrink-0\">\n              <div className=\"flex items-center space-x-2\">\n                <input\n                  type=\"text\"\n                  value={input}\n                  onChange={(e) => setInput(e.target.value)}\n                  onKeyDown={handleKeyDown}\n                  placeholder=\"输入你的需求...\"\n                  className=\"flex-grow px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-1 focus:ring-gray-400 text-black text-sm\"\n                  disabled={isLoading}\n                />\n                <button\n                  onClick={handleSend}\n                  className=\"px-3 py-2 bg-gray-100 text-gray-600 rounded-md hover:bg-gray-200 focus:outline-none focus:ring-1 focus:ring-gray-400 disabled:opacity-50 text-sm\"\n                  disabled={isLoading || input.trim() === ''}\n                >\n                  <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-5 w-5\" viewBox=\"0 0 20 20\" fill=\"currentColor\"> <path d=\"M10.894 2.553a1 1 0 00-1.788 0l-7 14a1 1 0 001.169 1.409l5-1.429A1 1 0 009 16.571V11.69l3.226-3.225a.5.5 0 01.707 0l1.293 1.293a.5.5 0 010 .707L10.07 13.69V16.57a1 1 0 00.725.962l5 1.428a1 1 0 001.17-1.408l-7-14z\" /> </svg>\n                </button>\n              </div>\n            </div>\n          </div>\n        </motion.div>\n      </div>\n    </div>\n  );\n};\n\nexport default Chatbot;\n","/**\n * @file useToolsQueries.ts\n * @description 自定义 Hooks，用于封装工具页面 (ToolsPage) 的数据获取和缓存逻辑。\n *              使用 TanStack Query (useQuery) 管理工具列表、分类和标签数据。\n */\nimport { useQuery } from '@tanstack/react-query';\nimport axios from 'axios';\nimport { API_BASE_URL } from '../config';\n\n// --- 类型定义 ---\n// Tool 类型 (与 ToolsPage.tsx 中保持一致或从共享类型文件导入)\nexport interface Tool {\n    id: number;\n    name: string;\n    description: string;\n    slug: string;\n    screenshot_url?: string | null;\n    source_url?: string | null;\n    category?: { id: number; name: string };\n    tags?: string[];\n}\n\n// Category 类型\nexport interface Category {\n    id: number;\n    name: string;\n}\n\n// --- 新增: ToolDetail 类型定义 ---\n// (与 ToolDetailPage.tsx 中保持一致)\nexport interface ToolDetail {\n  id: number;\n  name: string;\n  description: string;\n  slug: string;\n  content?: string | null;\n  screenshot_url?: string | null;\n  source_url?: string | null;\n  category?: { id: number; name: string };\n  tags?: string[];\n  is_free?: boolean;\n  features?: string[];\n  use_cases?: string[];\n  pros?: string[];\n  cons?: string[];\n  pricing_info?: any; // Adjust type if needed\n  installation_steps?: string | null;\n  created_at: string;\n  updated_at: string;\n}\n\n// --- API 获取函数 ---\n\n// 获取分类列表\nconst fetchCategories = async (): Promise<Category[]> => {\n    console.log(\"[fetchCategories] Fetching categories...\");\n    const response = await axios.get<Category[]>(`${API_BASE_URL}/api/categories/`);\n    // 添加数据校验\n    if (!Array.isArray(response.data)) {\n        console.error(\"Invalid categories data format:\", response.data);\n        throw new Error(\"无法获取分类列表，数据格式错误。\");\n    }\n    return response.data;\n};\n\n// 获取所有标签\nconst fetchTags = async (): Promise<string[]> => {\n    console.log(\"[fetchTags] Fetching all tags...\");\n    const response = await axios.get<{ tags: string[] }>(`${API_BASE_URL}/api/tools/tags`);\n     // 添加数据校验\n    if (!response.data || !Array.isArray(response.data.tags)) {\n        console.error(\"Invalid tags data format:\", response.data);\n        throw new Error(\"无法获取标签列表，数据格式错误。\");\n    }\n    return response.data.tags;\n};\n\n// 获取工具列表（支持筛选）\nconst fetchTools = async (categoryId: number | 'all', tag: string | 'all'): Promise<Tool[]> => {\n    console.log(`[fetchTools] Fetching tools with category: ${categoryId}, tag: ${tag}...`);\n    let toolsUrl = `${API_BASE_URL}/api/tools/?`;\n\n    // --- 优先使用标签筛选 ---\n    if (tag !== 'all') {\n        toolsUrl += `tag=${encodeURIComponent(tag)}&`;\n    } else if (categoryId !== 'all') { // 否则使用分类筛选\n        toolsUrl += `category_id=${categoryId}&`;\n    }\n    // --- 结束修改 ---\n\n    // 按创建时间降序排序\n    toolsUrl += `sort_by=created_at&sort_order=desc`;\n\n    // 添加 Cache-Control headers 可能不是最佳实践，因为 TanStack Query 会处理缓存\n    // 如果确实需要绕过浏览器缓存，可以添加时间戳\n    // toolsUrl += `&_=${new Date().getTime()}`;\n\n    const response = await axios.get<{ tools: Tool[]; total: number }>(toolsUrl);\n    // 添加数据校验\n    if (!response.data || !Array.isArray(response.data.tools)) {\n        console.error(\"Invalid tools data format:\", response.data);\n        throw new Error(\"无法获取工具列表，数据格式错误。\");\n    }\n    return response.data.tools;\n};\n\n// --- 新增: API 获取函数 for Tool Detail ---\nconst fetchToolDetailBySlug = async (slug: string): Promise<ToolDetail> => {\n    // 添加 slug 检查，虽然 useQuery 的 enabled 也会处理\n    if (!slug) {\n        throw new Error(\"Tool slug is required.\");\n    }\n    console.log(`[fetchToolDetailBySlug] Fetching tool detail for slug: ${slug}...`);\n    const response = await axios.get<ToolDetail>(`${API_BASE_URL}/api/tools/slug/${slug}`);\n    // 基本的数据校验\n    if (!response.data || typeof response.data.id !== 'number') {\n        console.error(\"Invalid tool detail data format:\", response.data);\n        // 考虑根据状态码抛出特定错误，例如 404\n        throw new Error(\"无法获取工具详情，数据格式错误。\");\n    }\n    return response.data;\n};\n\n// --- 自定义 Hooks ---\n\n/**\n * Hook: useCategories\n * 获取并缓存分类列表。\n * 数据被视为长时间有效 (staleTime: Infinity)，因为分类不常变动。\n */\nexport const useCategories = () => {\n    return useQuery<Category[], Error>({\n        queryKey: ['categories'], // 缓存键\n        queryFn: fetchCategories, // 获取数据的函数\n        staleTime: Infinity, // 数据永不过期，除非手动 invalidate\n        gcTime: Infinity, // 缓存永不回收，除非手动 invalidate\n        refetchOnWindowFocus: false, // 窗口聚焦时不重新获取\n    });\n};\n\n/**\n * Hook: useTags\n * 获取并缓存所有可用标签的列表。\n * 数据被视为长时间有效 (staleTime: 1 小时)。\n */\nexport const useTags = () => {\n    return useQuery<string[], Error>({\n        queryKey: ['tags'],\n        queryFn: fetchTags,\n        staleTime: 1000 * 60 * 60, // 1 小时内数据新鲜\n        gcTime: 1000 * 60 * 60 * 2, // 2 小时不活跃后回收\n        refetchOnWindowFocus: false,\n    });\n};\n\n/**\n * Hook: useTools\n * 获取并缓存工具列表，根据选定的分类和标签进行筛选。\n * 当 categoryId 或 tag 变化时，会自动重新获取数据。\n * \n * @param {number | 'all'} categoryId 选中的分类 ID 或 'all'\n * @param {string | 'all'} tag 选中的标签或 'all'\n */\nexport const useTools = (categoryId: number | 'all', tag: string | 'all') => {\n    return useQuery<Tool[], Error>({\n        // queryKey 包含筛选条件，当它们变化时，查询会自动更新\n        queryKey: ['tools', { category: categoryId, tag: tag }], \n        queryFn: () => fetchTools(categoryId, tag),\n        // 可以设置 staleTime 和 gcTime，例如 5 分钟\n        staleTime: 1000 * 60 * 5, // 5 分钟\n        gcTime: 1000 * 60 * 10, // 10 分钟\n        refetchOnWindowFocus: true, // 窗口聚焦时重新获取（可选）\n    });\n};\n\n// --- 新增: 自定义 Hook for Tool Detail ---\n\n/**\n * Hook: useToolDetail\n * 获取并缓存单个工具的详细信息。\n * 当 slug 变化时，会自动重新获取数据。\n * \n * @param {string | undefined} slug 工具的 slug\n */\nexport const useToolDetail = (slug: string | undefined) => {\n    return useQuery<ToolDetail, Error>({\n        // queryKey 包含 slug，确保每个工具详情都有独立的缓存\n        queryKey: ['toolDetail', slug], \n        // 只有当 slug 存在时才执行查询\n        queryFn: () => fetchToolDetailBySlug(slug!), // 使用 non-null assertion 因为 enabled 确保了 slug 存在\n        enabled: !!slug, // 关键：只有当 slug 有效（非 null/undefined/空字符串）时才触发查询\n        staleTime: 1000 * 60 * 10, // 10 分钟内数据新鲜\n        gcTime: 1000 * 60 * 30, // 30 分钟不活跃后回收\n        refetchOnWindowFocus: false, // 窗口聚焦时不重新获取详情（通常不需要）\n    });\n}; "],"names":["ToolsPage","_ref","_ref2","_errorTools$message","isSidebarOpen","useSidebar","selectedCategory","setSelectedCategory","useState","selectedTag","setSelectedTag","isChatOpen","setIsChatOpen","navigate","useNavigate","data","categories","isLoading","isLoadingCategories","error","errorCategories","useCategories","allTags","isLoadingTags","errorTags","useTags","tools","isLoadingTools","errorTools","useTools","message","handleCategoryClick","categoryId","handleTagClick","tag","_jsxs","className","children","_jsx","onClick","map","category","id","name","length","style","backgroundColor","backgroundImage","width","height","xmlns","fill","viewBox","cx","cy","r","stroke","strokeWidth","d","role","tool","handleToolClick","slug","title","description","tags","slice","Chatbot","isOpen","onClose","inlineMode","token","user","useAuth","input","setInput","isSmallScreen","setIsSmallScreen","window","innerWidth","messages","setMessages","currentConversationId","setCurrentConversationId","apiError","isTyping","messagesEndRef","handleSend","sendChatMessage","loadConversation","createNewChat","handleRetry","retryApiConnection","useChatLogic","closeRef","useRef","useEffect","current","prev","filter","msg","content","includes","displayContent","fetch","API_BASE_URL","method","headers","body","JSON","stringify","conversation_id","then","response","ok","Error","_response$body","reader","getReader","cancel","catch","console","async","trim","currentInput","newConvId","handleKeyDown","e","key","shiftKey","preventDefault","quickMessages","label","value","motion","div","initial","opacity","scale","animate","transition","duration","fillRule","clipRule","ref","index","_msg$id","split","line","i","qm","type","onChange","target","onKeyDown","placeholder","disabled","y","_msg$id2","fetchCategories","log","axios","get","Array","isArray","fetchTags","useQuery","queryKey","queryFn","staleTime","Infinity","gcTime","refetchOnWindowFocus","toolsUrl","encodeURIComponent","fetchTools","useToolDetail","fetchToolDetailBySlug","enabled"],"sourceRoot":""}