{"version":3,"file":"static/js/783.4e488236.chunk.js","mappings":"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","sources":["components/Skeletons/PostDetailSkeleton.tsx","pages/PostDetailPage.tsx"],"sourcesContent":["import React from 'react';\n\nconst PostDetailSkeleton: React.FC = () => {\n  const skeletonStyle: React.CSSProperties = {\n    width: '100%',\n    minHeight: '100vh',\n    // 使用CSS变量保持统一背景\n    backgroundColor: 'var(--bg-base-color)', \n    backgroundImage: 'var(--bg-gradient)',\n    padding: '20px', // 可以根据实际详情页布局调整\n    boxSizing: 'border-box',\n    color: 'white', // 确保文本占位符（如果直接用文字）是可见的\n  };\n\n  const placeholderBaseStyle: React.CSSProperties = {\n    backgroundColor: 'rgba(255, 255, 255, 0.1)', // 半透明白色作为占位符背景\n    borderRadius: '4px',\n    marginBottom: '12px', // 统一间距\n    animation: 'pulse 1.5s cubic-bezier(0.4, 0, 0.6, 1) infinite', // 添加脉冲动画\n  };\n  \n  // CSS for pulse animation (could also be in a global CSS file)\n  // 将动画定义移到<style>标签中，以便在React组件中正确应用\n  const keyframesStyle = `\n    @keyframes pulse {\n      0%, 100% {\n        opacity: 1;\n      }\n      50% {\n        opacity: .5;\n      }\n    }\n  `;\n\n  return (\n    <>\n      <style>{keyframesStyle}</style> {/* 内联动画定义 */}\n      <div style={skeletonStyle} aria-busy=\"true\" aria-live=\"polite\" role=\"status\" aria-label=\"正在加载帖子详情...\">\n        {/* 模拟帖子标题 */}\n        <div style={{ ...placeholderBaseStyle, height: '36px', width: '75%', marginBottom: '24px' }}></div>\n        \n        {/* 模拟作者信息和日期 */}\n        <div style={{ display: 'flex', alignItems: 'center', marginBottom: '24px' }}>\n          <div style={{ ...placeholderBaseStyle, width: '40px', height: '40px', borderRadius: '50%', marginRight: '12px' }}></div>\n          <div>\n            <div style={{ ...placeholderBaseStyle, height: '16px', width: '120px', marginBottom: '6px' }}></div>\n            <div style={{ ...placeholderBaseStyle, height: '12px', width: '80px' }}></div>\n          </div>\n        </div>\n        \n        {/* 模拟帖子内容段落 */}\n        <div style={{ ...placeholderBaseStyle, height: '20px', width: '100%' }}></div>\n        <div style={{ ...placeholderBaseStyle, height: '20px', width: '100%' }}></div>\n        <div style={{ ...placeholderBaseStyle, height: '20px', width: '90%' }}></div>\n        <div style={{ ...placeholderBaseStyle, height: '20px', width: '95%', marginBottom: '30px' }}></div>\n\n        {/* 模拟评论区或相关内容区域的占位 */}\n        <div style={{ ...placeholderBaseStyle, height: '28px', width: '40%', marginBottom: '16px' }}></div>\n        <div style={{ ...placeholderBaseStyle, height: '60px', width: '100%' }}></div>\n      </div>\n    </>\n  );\n};\n\nexport default PostDetailSkeleton; ","/**\n * \n * 注意: 导航栏组件(Navbar和SideNavbar)已移至全局布局，不需要在页面组件中引入\n * PostDetailPage.tsx\n * \n * 功能注释：\n * 定义展示单个帖子详情页面的 React 组件。\n * \n * 主要功能:\n * - 从 URL 参数获取帖子 slug。\n * - 使用 TanStack Query 的自定义 Hook (`usePostDetails`) 获取并缓存帖子详情。\n * - 使用 TanStack Query 的 Mutation Hooks (`useLikePost`, `useCollectPost` from usePostQueries.ts) 处理点赞/收藏操作，包含乐观更新和缓存失效。\n * - 处理帖子内容的渲染，包括 iframe 居中。\n * - 显示作者信息、发布时间、标签、浏览量等元数据。\n * - 管理用户对帖子的分享操作及状态（本地状态管理）。\n * - 如果当前用户是作者，提供编辑和删除按钮。\n * - 集成 `CommentSection` 组件用于显示和处理评论。\n * - 使用 Modal 组件处理分享操作。\n * \n * 注意: 如果新增、删除或修改功能，必须在这开头的注释中同步修改，\n * 如发现功能与注释描述不同，也可以在确定后修改。\n *\n * --- 重构说明 (重要) ---\n * 此版本已将点赞 (like) 和收藏 (collect) 的状态管理和 API 调用\n * 从本地 useState + 直接 axios 调用迁移至 TanStack Query 的 useMutation。\n * Mutation Hooks (`useLikePost`, `useCollectPost`) 已从外部文件 `../hooks/usePostQueries` 导入。\n * 状态现在直接从 usePostDetails 查询结果中读取，并通过乐观更新和缓存失效保持同步。\n */\nimport React, { useState, useEffect, useRef } from 'react';\nimport { useParams, useNavigate, Link } from 'react-router-dom';\nimport Modal from '../components/Modal';\nimport CommentSection from '../components/CommentSection';\nimport axios, { AxiosError } from 'axios';\nimport { API_BASE_URL } from '../config';\nimport { useAuth } from '../context/AuthContext';\nimport { motion } from 'framer-motion';\nimport { toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport { useSidebar } from '../contexts/SidebarContext';\nimport { useQuery, useQueryClient } from '@tanstack/react-query';\nimport { useLikePost, useCollectPost } from '../hooks/usePostQueries';\nimport PostDetailSkeleton from '../components/Skeletons/PostDetailSkeleton';\n// 添加KaTeX相关导入\n// @ts-ignore\nimport katex from 'katex';\nimport 'katex/dist/katex.min.css';\nimport ShareDynamicModal from '../components/ShareDynamicModal';\nimport { User } from '../context/AuthContext';\nimport AuthorTooltip from '../components/AuthorTooltip';\nimport { fixImageUrl, handleImageLoadError } from '../utils/imageProxy'; // 添加图片处理工具导入\n\n// 帖子详情数据类型 (保持与 usePostQueries.ts 一致)\ninterface PostDetails {\n  id: number;\n  title: string;\n  content: string;\n  author: { id: number; nickname: string | null; email: string; avatar?: string | null } | null;\n  created_at: string;\n  updated_at?: string;\n  tags?: string[];\n  view_count: number;\n  slug: string;\n  cover_image?: string;\n  is_liked?: boolean;\n  is_collected?: boolean;\n  like_action_id?: number | null;\n  collect_action_id?: number | null;\n  likes_count?: number;\n  collects_count?: number;\n  share_count?: number;\n  category_id?: number | null;\n  category_name?: string | null;\n  topic_id?: number | null;\n  topic_name?: string | null;\n  status?: string;\n  priority?: number;\n  published_at?: string | null;\n  summary?: string | null;\n}\n\n// --- Custom Hook Definition for fetching post details (remains inside this file for now) ---\nconst usePostDetails = (postSlug: string | undefined, token: string | null) => {\n    const queryKey = ['postDetails', postSlug];\n\n    const fetchPostDetailsAPI = async () => {\n        if (!postSlug) throw new Error(\"无效的帖子标识符\");\n        console.log(`[usePostDetails][Page] Fetching data for post slug: ${postSlug}`);\n        const headers: { [key: string]: string } = {};\n        if (token) {\n            headers['Authorization'] = `Bearer ${token}`;\n        }\n        const postApiUrl = `${API_BASE_URL}/api/posts/slug/${postSlug}`;\n        console.log(`[usePostDetails][Page][DEBUG] Fetching Post from: ${postApiUrl}`);\n        const response = await axios.get<PostDetails>(postApiUrl, { headers });\n        console.log(\"[usePostDetails][Page] Post Data:\", response.data);\n        return response.data;\n    };\n\n    return useQuery<PostDetails, Error>({\n        queryKey: queryKey,\n        queryFn: fetchPostDetailsAPI,\n        enabled: !!postSlug,\n        staleTime: 5 * 60 * 1000, // 5 minutes\n        gcTime: 15 * 60 * 1000, // 15 minutes\n        retry: (failureCount, error) => {\n           if ((error as any)?.response?.status === 404) {\n               console.warn(`[usePostDetails][Page] Post not found (404), not retrying.`);\n               return false;\n           }\n           console.warn(`[usePostDetails][Page] Fetch failed (attempt ${failureCount + 1}), retrying... Error:`, error.message);\n           return failureCount < 2;\n        }\n    });\n};\n\nconst PostDetailPage: React.FC = () => {\n  // Ensure postSlug defaults to an empty string if undefined\n  const { postSlug = \"\" } = useParams<{ postSlug: string }>();\n  const navigate = useNavigate();\n  const { isSidebarOpen } = useSidebar();\n  const { token, user } = useAuth();\n\n  // --- Remove useState for like/collect states ---\n  // State is now derived directly from the 'post' query data\n\n  // --- Keep useState for share modal, author status, and share count ---\n  const [shareCount, setShareCount] = useState(0); // Local state for share count (can be refactored later)\n  const [isAuthor, setIsAuthor] = useState(false);\n  const [isNewShareModalOpen, setIsNewShareModalOpen] = useState(false);\n  const [newShareComment, setNewShareComment] = useState('');\n  const [shareError, setShareError] = useState<string | null>(null);\n  const [isSubmittingNewShare, setIsSubmittingNewShare] = useState(false);\n  const contentRef = useRef<HTMLDivElement>(null); // Ref for content div (iframe centering)\n  const queryClient = useQueryClient(); // Get query client instance (needed for optional share invalidation)\n  // --- Tooltip State ---\n  const [tooltipData, setTooltipData] = useState<{ nickname: string; bio?: string | null; tags?: string[] | null; avatar?: string | null } | null>(null);\n  const [isTooltipVisible, setIsTooltipVisible] = useState(false);\n\n  // --- Use TanStack Query Hook for fetching post details ---\n  const {\n    data: post,       // The fetched post data (including like/collect status)\n    isLoading: loading, // Loading state for the query\n    isError,         // Error state for the query\n    error: queryError // The error object\n   } = usePostDetails(postSlug, token);\n\n  // --- Instantiate the imported Mutation Hooks ---\n  const likeMutation = useLikePost();\n  const collectMutation = useCollectPost();\n\n  // --- Determine effective error message ---\n  const effectiveError = isError ? (queryError instanceof Error ? queryError.message : String(queryError)) || '无法加载帖子内容。' : null;\n\n  // 添加调试信息 - 移到组件顶部\n  useEffect(() => {\n    if (post?.content) {\n      \n      // 计算Markdown图片数量\n      const imageMatches = post.content.match(/!\\[(.*?)\\]\\((https?:\\/\\/[^)]+)\\)/g);\n      \n      if (imageMatches) {\n        imageMatches.forEach((match, index) => {\n          console.log(`图片${index+1}:`, match);\n        });\n      }\n      \n      // 检查处理后的内容\n      const processedContent = processContentForVideos(post.content);\n    }\n  }, [post?.content]);\n\n  // --- Update useEffect: Set author status and initialize share count based on fetched data ---\n  useEffect(() => {\n    if (post) {\n      // Check if the logged-in user is the author of the post\n      setIsAuthor(!!(user && post.author?.id === user.id));\n      // Initialize local share count state from fetched post data\n      setShareCount(post.share_count || 0);\n    } else {\n      // Reset states if post data is not available\n      setIsAuthor(false);\n      setShareCount(0);\n    }\n  }, [post, user]); // Dependencies: re-run when post data or user changes\n\n  // --- iframe centering useEffect (使用与ArticlePage完全相同的视频处理逻辑) ---\n  useEffect(() => {\n    if (post?.content && contentRef.current) {\n      // --- 增强的内容处理 ---\n      // 1. 处理所有iframe和视频\n      const iframes = contentRef.current.querySelectorAll('iframe');\n      iframes.forEach(iframe => {\n        // 跳过已经处理过的iframe\n        if (iframe.parentElement?.classList.contains('video-processed')) return;\n        \n        // 确保iframe有一个清晰的宽高比例容器\n        const currentParent = iframe.parentElement;\n        if (!currentParent) return;\n        \n        // 重置当前父元素的样式\n        if (currentParent instanceof HTMLElement) {\n          currentParent.style.cssText = '';\n          currentParent.className = '';\n        }\n\n        // 创建新的视频容器div\n        const videoContainer = document.createElement('div');\n        videoContainer.className = 'video-container video-processed';\n        videoContainer.style.cssText = 'width: 100%; max-width: 800px; margin: 2em auto; position: relative; aspect-ratio: 16/9; background: #000; border-radius: 12px; box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06); overflow: hidden;';\n        \n        // 设置iframe样式\n        if (iframe instanceof HTMLIFrameElement) {\n          iframe.style.cssText = 'position: absolute; top: 0; left: 0; width: 100%; height: 100%; border: none; border-radius: 12px;';\n        }\n        \n        // 用新容器替换原来的父元素\n        if (currentParent.parentElement) {\n          // 创建外层容器以彻底隔离Prose样式\n          const outerContainer = document.createElement('div');\n          outerContainer.className = 'not-prose';\n          outerContainer.style.cssText = 'all: initial; display: block; text-align: center; width: 100%; margin: 2em 0; font-family: inherit; color: inherit;';\n          \n          // 构建DOM结构: outerContainer > videoContainer > iframe\n          videoContainer.appendChild(iframe.cloneNode(true));\n          outerContainer.appendChild(videoContainer);\n          currentParent.parentElement.replaceChild(outerContainer, currentParent);\n        }\n      });\n      \n      // 2. 处理图片标签\n      const images = contentRef.current.querySelectorAll('img');\n      images.forEach(img => {\n        // 处理COS图片URL\n        const originalSrc = img.getAttribute('src');\n        if (originalSrc && originalSrc.includes('synspirit-test-1313131901.cos.ap-shanghai.myqcloud.com')) {\n          img.src = `/api/upload/proxy/image?url=${encodeURIComponent(originalSrc)}`;\n          img.onerror = () => { \n              console.warn(`图片代理加载失败: ${originalSrc}`);\n          };\n        }\n        \n        // 确保图片标签有基本样式\n        if (img.style.maxWidth === '') {\n          img.style.maxWidth = '100%';\n        }\n        if (img.style.margin === '') {\n          img.style.margin = '10px auto';\n        }\n        if (img.style.display === '') {\n          img.style.display = 'block';\n        }\n      });\n      \n      // 3. 处理Markdown格式图片（![alt](url)）\n      const allElements = contentRef.current.querySelectorAll('*');\n      allElements.forEach(el => {\n        if (el.childNodes && el.childNodes.length > 0) {\n          el.childNodes.forEach(node => {\n            if (node.nodeType === Node.TEXT_NODE && node.textContent) {\n              const text = node.textContent;\n              // 查找Markdown图片格式: ![alt](url)\n              const imgRegex = /!\\[(.*?)\\]\\((https?:\\/\\/[^)]+)\\)/g;\n              let match;\n              let hasMatch = false;\n              let lastIndex = 0;\n              const fragment = document.createDocumentFragment();\n              \n              while ((match = imgRegex.exec(text)) !== null) {\n                hasMatch = true;\n                const matchStart = match.index;\n                const matchEnd = matchStart + match[0].length;\n                \n                // 添加图片前的文本\n                if (matchStart > lastIndex) {\n                  fragment.appendChild(document.createTextNode(text.substring(lastIndex, matchStart)));\n                }\n                \n                // 创建图片元素\n                const img = document.createElement('img');\n                const originalUrl = match[2]; // 图片URL\n                console.log(`(useEffect PostDetail) 处理Markdown图片: ${originalUrl.substring(0, 50)}${originalUrl.length > 50 ? '...' : ''}`);\n                \n                img.setAttribute('data-original-src', originalUrl);\n                img.src = fixImageUrl(originalUrl); // Use fixImageUrl\n                \n                img.alt = match[1]; // alt文本\n                img.className = 'markdown-image';\n                img.style.maxWidth = '100%';\n                img.style.margin = '10px auto';\n                img.style.display = 'block';\n                \n                // 添加错误处理\n                img.onerror = () => {\n                  handleImageLoadError(originalUrl, img);\n                  return true;\n                };\n                \n                // 添加图片到片段\n                fragment.appendChild(img);\n                \n                // 更新lastIndex\n                lastIndex = matchEnd;\n              }\n              \n              // 如果有匹配，替换原始节点\n              if (hasMatch) {\n                // 添加剩余文本\n                if (lastIndex < text.length) {\n                  fragment.appendChild(document.createTextNode(text.substring(lastIndex)));\n                }\n                // 替换原始节点\n                node.parentNode?.replaceChild(fragment, node);\n              }\n            }\n          });\n        }\n      });\n    }\n  }, [post?.content, fixImageUrl]); // 依赖：post内容, fixImageUrl\n\n  // --- LaTeX渲染 useEffect ---\n  useEffect(() => {\n    if (post?.content && contentRef.current) {\n      /**\n       * 重要的LaTeX公式渲染函数 - 请勿随意修改！\n       * \n       * 此函数使用KaTeX库渲染文章中的LaTeX公式，同时保留公式周围的文本内容。\n       * 它采用分段渲染策略，只替换文本中的公式部分，而保留公式前后的普通文本。\n       * \n       * 警告：早期实现会替换整个文本节点，导致公式周围的文本内容丢失。\n       * 如果修改此函数，必须保证公式周围的文本得以保留，否则会导致编辑时内容异常丢失。\n       * \n       * 支持两种公式格式：\n       * 1. $$latex ... $$ (指定latex关键字的特殊格式)\n       * 2. $$ ... $$ (标准数学公式格式)\n       * \n       * @param textNode 待处理的文本节点\n       */\n      const renderLatex = (textNode: Text) => {\n          let nodeContent = textNode.nodeValue || '';\n          \n          // 定义正则表达式匹配两种类型的LaTeX公式\n          // /g标志表示全局匹配，找出文本中所有的公式实例\n          const latexBlockRegex = /\\$\\$latex\\s*([\\s\\S]*?)\\s*\\$\\$/g;  // 匹配 $$latex ... $$ 格式\n          const standardBlockRegex = /\\$\\$([\\s\\S]*?)\\$\\$/g;  // 匹配标准 $$ ... $$ 格式\n          \n          // 创建文档片段，用于保存处理后的内容（包括公式和非公式部分）\n          const fragment = document.createDocumentFragment();\n          \n          // 跟踪处理位置，确保不会丢失公式之间的文本\n          let lastIndex = 0;\n          let match;\n          let hasMatches = false;\n          \n          // 第一步：优先处理 $$latex ... $$ 格式的公式\n          while ((match = latexBlockRegex.exec(nodeContent)) !== null) {\n              hasMatches = true;\n              const matchStart = match.index;  // 公式开始位置\n              const matchEnd = matchStart + match[0].length;  // 公式结束位置\n              \n              // 关键步骤：保留公式前的普通文本\n              if (matchStart > lastIndex) {\n                  fragment.appendChild(document.createTextNode(nodeContent.substring(lastIndex, matchStart)));\n              }\n              \n              // 提取公式内容（去除$$latex和$$标记）\n              const latexContent = match[1].trim();\n              \n              // 为公式创建容器并设置样式\n              const container = document.createElement('span');\n              container.className = 'latex-rendered-block';\n              \n              // 使用KaTeX渲染公式\n              try {\n                  // @ts-ignore\n                  katex.render(latexContent, container, {\n                      throwOnError: false,  // 错误时不抛出异常\n                      displayMode: true     // 块级显示模式\n                  });\n                  fragment.appendChild(container);  // 将渲染后的公式添加到片段\n              } catch (error) {\n                  // 渲染失败时显示错误信息\n                  console.error('LaTeX渲染错误:', error, '原始文本:', match[0]);\n                  const errorNode = document.createElement('span');\n                  errorNode.innerHTML = `<span style=\"color: red;\">LaTeX渲染错误</span>`;\n                  fragment.appendChild(errorNode);\n              }\n              \n              // 更新处理位置\n              lastIndex = matchEnd;\n          }\n          \n          // 重置正则表达式的匹配位置\n          standardBlockRegex.lastIndex = 0;\n          \n          // 第二步：如果没有找到 $$latex 格式，尝试处理标准 $$ 格式\n          if (!hasMatches) {\n              lastIndex = 0;  // 重置处理位置\n              while ((match = standardBlockRegex.exec(nodeContent)) !== null) {\n                  hasMatches = true;\n                  const matchStart = match.index;\n                  const matchEnd = matchStart + match[0].length;\n                  \n                  // 关键步骤：保留公式前的普通文本\n                  if (matchStart > lastIndex) {\n                      fragment.appendChild(document.createTextNode(nodeContent.substring(lastIndex, matchStart)));\n                  }\n                  \n                  // 提取并渲染标准公式\n                  const latexContent = match[1].trim();\n                  \n                  // 为公式创建容器\n                  const container = document.createElement('span');\n                  container.className = 'latex-rendered-block';\n                  \n                  try {\n                      // @ts-ignore\n                      katex.render(latexContent, container, {\n                          throwOnError: false,\n                          displayMode: true\n                      });\n                      fragment.appendChild(container);\n                  } catch (error) {\n                      console.error('LaTeX渲染错误:', error, '原始文本:', match[0]);\n                      const errorNode = document.createElement('span');\n                      errorNode.innerHTML = `<span style=\"color: red;\">LaTeX渲染错误</span>`;\n                      fragment.appendChild(errorNode);\n                  }\n                  \n                  // 更新处理位置\n                  lastIndex = matchEnd;\n              }\n          }\n          \n          // 第三步：添加所有剩余的文本内容\n          // 这确保了最后一个公式之后的文本也不会丢失\n          if (lastIndex < nodeContent.length) {\n              fragment.appendChild(document.createTextNode(nodeContent.substring(lastIndex)));\n          }\n          \n          // 最后，只有在确实找到公式时才替换原始节点\n          // 这避免了对不含公式的文本进行不必要的DOM操作\n          if (hasMatches) {\n              textNode.parentNode?.replaceChild(fragment, textNode);\n          }\n      };\n      \n      // --- 初始渲染和MutationObserver设置 ---\n      const observer = new MutationObserver((mutations) => {\n        mutations.forEach((mutation) => {\n          mutation.addedNodes.forEach((node) => {\n            if (node.nodeType === Node.TEXT_NODE) {\n               // 检查文本节点是否包含可能的LaTeX分隔符\n               if (node.nodeValue && (node.nodeValue.includes('$$') || node.nodeValue.includes('$latex'))) {\n                    renderLatex(node as Text);\n               }\n            } else if (node.nodeType === Node.ELEMENT_NODE) {\n              // 同时检查添加元素的子元素\n              (node as Element).querySelectorAll(':scope > *:not(script):not(style)').forEach(el => {\n                  el.childNodes.forEach(childNode => {\n                      if (childNode.nodeType === Node.TEXT_NODE && childNode.nodeValue && (childNode.nodeValue.includes('$$') || childNode.nodeValue.includes('$latex'))) {\n                          renderLatex(childNode as Text);\n                      }\n                  });\n              });\n              // 检查添加节点本身的直接文本子节点\n              node.childNodes.forEach(childNode => {\n                  if (childNode.nodeType === Node.TEXT_NODE && childNode.nodeValue && (childNode.nodeValue.includes('$$') || childNode.nodeValue.includes('$latex'))) {\n                      renderLatex(childNode as Text);\n                  }\n        });\n    }\n          });\n        });\n      });\n\n      // 对现有内容进行初始渲染\n      const initialRender = (element: Node) => {\n          if (element.nodeType === Node.TEXT_NODE && element.nodeValue && (element.nodeValue.includes('$$') || element.nodeValue.includes('$latex'))) {\n             renderLatex(element as Text);\n          } else if (element.nodeType === Node.ELEMENT_NODE) {\n              // 避免遍历已渲染的KaTeX元素或可能出问题的元素\n              if (!(element as HTMLElement).classList?.contains('katex') && \n                  !(element as HTMLElement).classList?.contains('katex-html') &&\n                  element.nodeName !== 'SCRIPT' && element.nodeName !== 'STYLE') {\n                  element.childNodes.forEach(initialRender);\n              }\n          }\n      };\n      \n      if (contentRef.current) {\n          // 处理现有内容\n          contentRef.current.childNodes.forEach(initialRender);\n          // 监听未来内容变化\n          observer.observe(contentRef.current, { childList: true, subtree: true });\n          \n          // 处理图片代理\n          const processImages = () => {\n            if (!contentRef.current) return;\n\n            // 1. 处理已有的img标签\n                  const images = contentRef.current.querySelectorAll('img');\n                  images.forEach(img => {\n              const currentSrc = img.getAttribute('src');\n              const dataOriginalSrc = img.getAttribute('data-original-src');\n\n              if (dataOriginalSrc) { // If data-original-src exists, it's our source of truth\n                const desiredSrc = fixImageUrl(dataOriginalSrc);\n                if (img.src !== desiredSrc) {\n                  console.log(`(PostDetailPage useEffect) Correcting src for ${dataOriginalSrc.substring(0, 50)}... to ${desiredSrc.substring(0, 50)}...`);\n                  img.src = desiredSrc;\n                              img.onerror = () => {\n                    handleImageLoadError(dataOriginalSrc, img);\n                                  return true;\n                              };\n                }\n              } else if (currentSrc && currentSrc.startsWith('http')) { // No data-original-src, and current src is an http URL\n                console.log(`(PostDetailPage useEffect) Initial processing for ${currentSrc.substring(0, 50)}...`);\n                img.setAttribute('data-original-src', currentSrc);\n                img.src = fixImageUrl(currentSrc);\n                img.onerror = () => {\n                  handleImageLoadError(currentSrc, img);\n                  return true;\n                };\n              }\n              // 基本样式应用\n              if (img.className === '') img.className = 'markdown-image';\n              if (img.style.maxWidth === '') img.style.maxWidth = '100%';\n              if (img.style.margin === '') img.style.margin = '10px auto';\n              if (img.style.display === '') img.style.display = 'block';\n            });\n\n            // 2. 处理Markdown格式图片（从文本节点动态创建）\n            const allElements = contentRef.current.querySelectorAll('*:not(script):not(style)');\n            allElements.forEach(el => {\n              if (el.childNodes && el.childNodes.length > 0) {\n                Array.from(el.childNodes).forEach(node => { // Iterate over a copy\n                  if (node.nodeType === Node.TEXT_NODE && node.textContent) {\n                    const text = node.textContent;\n                    const imgRegex = /!\\[(.*?)\\]\\((https?:\\/\\/[^)]+)\\)/g;\n                    let match;\n                    let lastIndex = 0;\n                    const fragment = document.createDocumentFragment();\n                    let hasMatch = false;\n\n                    while ((match = imgRegex.exec(text)) !== null) {\n                      hasMatch = true;\n                      const matchStart = match.index;\n                      const matchEnd = matchStart + match[0].length;\n\n                      if (matchStart > lastIndex) {\n                        fragment.appendChild(document.createTextNode(text.substring(lastIndex, matchStart)));\n                      }\n\n                      const img = document.createElement('img');\n                      const originalUrlFromMarkdown = match[2];\n                      console.log(`(PostDetailPage useEffect) Processing Markdown image from text node: ${originalUrlFromMarkdown.substring(0, 50)}...`);\n                      \n                      img.setAttribute('data-original-src', originalUrlFromMarkdown);\n                      img.src = fixImageUrl(originalUrlFromMarkdown);\n                      img.alt = match[1];\n                      img.className = 'markdown-image';\n                          img.style.maxWidth = '100%';\n                          img.style.margin = '10px auto';\n                          img.style.display = 'block';\n                      img.onerror = () => {\n                        handleImageLoadError(originalUrlFromMarkdown, img);\n                        return true;\n                      };\n                      fragment.appendChild(img);\n                      lastIndex = matchEnd;\n                    }\n\n                    if (hasMatch) {\n                      if (lastIndex < text.length) {\n                        fragment.appendChild(document.createTextNode(text.substring(lastIndex)));\n                      }\n                      node.parentNode?.replaceChild(fragment, node);\n                    }\n                      }\n                  });\n              }\n            });\n          };\n          processImages(); // Call directly\n      }\n      \n      // 清理函数\n      return () => {\n          if (observer) {\n              observer.disconnect();\n          }\n      };\n    }\n  }, [post?.content, fixImageUrl]); // 依赖：post内容, fixImageUrl\n\n  // --- Helper functions (no changes needed) ---\n  const getAuthorName = (author: PostDetails['author']) => {\n    if (!author) return '匿名用户';\n    return author.nickname || author.email || '匿名用户';\n  };\n\n  // 添加自定义getImageUrl函数，确保始终使用代理\n  const getImageUrl = (imagePath: string | null): string | undefined => {\n    if (!imagePath) return undefined;\n    \n    // 直接使用/api/upload/proxy/image确保使用代理，绕过全局设置\n    if (imagePath.startsWith('http')) {\n      const proxyDomain = '/api/upload/proxy/image';\n      const queryParams = new URLSearchParams();\n      queryParams.append('url', encodeURIComponent(imagePath));\n      \n      return `${proxyDomain}?${queryParams.toString()}`;\n    }\n    \n    // 非http URL直接返回（如相对路径或data:URLs）\n    return imagePath;\n  };\n\n  const formatDate = (dateString: string) => {\n    if (!dateString) return '未知日期';\n    try {\n      const date = new Date(dateString);\n      return date.toLocaleString('zh-CN', { year: 'numeric', month: 'long', day: 'numeric', hour: '2-digit', minute: '2-digit' });\n    } catch (e) {\n      return dateString;\n    }\n  };\n\n  // --- Refactor Interaction Handlers to use Imported Mutations ---\n  const handleLikeToggle = () => {\n    if (!post || !user || !token || likeMutation.isPending || !postSlug) return;\n    likeMutation.mutate({\n      postId: post.id,\n      token: token,\n      currentLikeState: post.is_liked || false,\n      currentLikeActionId: post.like_action_id || null,\n      postSlug: postSlug,\n    });\n  };\n\n  const handleCollectToggle = () => {\n    if (!post || !user || !token || collectMutation.isPending || !postSlug) return;\n    collectMutation.mutate({\n      postId: post.id,\n      token: token,\n      currentCollectState: post.is_collected || false,\n      currentCollectActionId: post.collect_action_id || null,\n      postSlug: postSlug,\n    });\n  };\n\n  // --- handleNewShareSubmit for ShareDynamicModal ---\n  const handleNewShareSubmit = async (comment: string, images?: string[]) => {\n    if (!post || !token) {\n      toast.warn('请先登录再分享');\n      setShareError('请先登录再分享');\n      return;\n    }\n    setIsSubmittingNewShare(true);\n    setShareError(null);\n    const payload = {\n      action_type: 'share',\n      target_type: 'post',\n      target_id: post.id,\n      content: comment,\n    };\n    try {\n      const response = await axios.post(`${API_BASE_URL}/api/actions`, payload, {\n        headers: { Authorization: `Bearer ${token}` },\n      });\n      if (response.status === 201 || response.status === 200) {\n        setIsNewShareModalOpen(false);\n        setNewShareComment('');\n        setShareCount(prev => prev + 1);\n        toast.success('分享成功！');\n        queryClient.invalidateQueries({ queryKey: ['postDetails', postSlug] });\n      } else {\n        const errorData = response.data?.error || '分享操作失败';\n        setShareError(errorData);\n        throw new Error(errorData);\n      }\n    } catch (err: any) {\n      console.error('分享操作失败:', err);\n      const errorMsg = err.response?.data?.error || err.message || '分享操作时出错';\n      setShareError(errorMsg);\n      toast.error(`分享失败: ${errorMsg}`);\n    } finally {\n      setIsSubmittingNewShare(false);\n    }\n  };\n\n  // --- handleDeletePost (Logic remains using direct axios call) ---\n   const handleDeletePost = async () => {\n    if (!post || !token || !isAuthor) {\n      toast.error('无法删除帖子：权限不足或帖子信息不完整。');\n      return;\n    }\n    const postIdToDelete = post.id;\n    const postTitle = post.title;\n    // Confirmation dialog\n    if (window.confirm(`您确定要删除帖子 \"${postTitle || '此帖子'}\" 吗？此操作无法撤销。`)) {\n      try {\n        // Direct axios call for deletion\n        const response = await axios.delete(`${API_BASE_URL}/api/posts/${postIdToDelete}`, { headers: { 'Authorization': `Bearer ${token}` } });\n        if (response.status === 200 || response.status === 204) {\n          toast.success('帖子已成功删除！');\n          navigate('/community'); // Navigate away after deletion\n        } else {\n          throw new Error(response.data?.error || \"删除帖子失败\");\n        }\n      } catch (err: any) {\n        console.error(`删除帖子 ${postIdToDelete} 失败:`, err);\n        const errorMsg = err.response?.data?.error || err.message || \"删除帖子时出错\";\n        toast.error(`删除失败: ${errorMsg}`);\n      }\n    }\n  };\n\n  // --- 处理视频的辅助函数 --- \n  const processContentForVideos = (htmlContent: string) => {\n    if (!htmlContent) return '';\n    \n    // 添加Markdown图片格式的正则表达式 - 更精确的版本\n    const markdownImageRegex = /!\\[(.*?)\\]\\((https?:\\/\\/[^)]+)\\)/g;\n    \n    // YouTube视频占位符的正则表达式\n    const videoPlaceholderRegex = /\\[视频占位符:\\s*(https?:\\/\\/(?:www\\.)?(?:youtu\\.be\\/|youtube\\.com\\/watch\\?v=)([a-zA-Z0-9_-]+))\\]/g;\n    \n    // Bilibili视频占位符的正则表达式\n    const bilibiliPlaceholderRegex = /\\[视频占位符:\\s*(https?:\\/\\/(?:www\\.)?bilibili\\.com\\/video\\/([A-Za-z0-9]+)(?:\\/)?.*?)\\]/g;\n    \n    // 注意：首先处理Markdown格式的图片，这样它们就不会被其他处理干扰\n    let processedContent = htmlContent.replace(markdownImageRegex, (match, altText, imgUrl) => {\n      if (!imgUrl) return match;\n      \n      console.log(`处理帖子内容中的Markdown图片 (processContentForVideos): alt=${altText}, url=${imgUrl}`);\n      \n      // 使用 fixImageUrl 来获取代理 URL\n      const processedUrl = fixImageUrl(imgUrl);\n      \n      // 构建响应式图片标签，添加data-original-src属性用于错误处理\n      return `<img src=\"${processedUrl}\" data-original-src=\"${imgUrl}\" alt=\"${altText || '图片'}\" class=\"mx-auto my-4 max-w-full rounded-lg shadow-lg markdown-image\" style=\"display: block; max-width: 100%; margin: 10px auto;\" onerror=\"if(this.getAttribute('data-original-src')){window.handleImageLoadError?.(this.getAttribute('data-original-src'),this)}\" />`;\n    });\n    \n    // 处理YouTube视频\n    processedContent = processedContent.replace(videoPlaceholderRegex, (match, originalUrl, videoId) => {\n      if (!originalUrl || !videoId) return match;\n      \n      const embedUrl = `https://www.youtube.com/embed/${videoId}`;\n      return `\n        <figure class=\"not-prose\" style=\"all: initial; display: block; text-align: center; width: 100%; margin: 2em 0; font-family: inherit; color: inherit;\">\n          <div style=\"width: 100%; max-width: 800px; margin: 0 auto; aspect-ratio: 16/9; background: #000; border-radius: 12px; box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06); overflow: hidden; position: relative;\">\n            <iframe src=\"${embedUrl}\" class=\"video-iframe\" style=\"position: absolute; top: 0; left: 0; width: 100%; height: 100%; border: none; border-radius: 12px;\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" referrerpolicy=\"strict-origin-when-cross-origin\" allowfullscreen title=\"Embedded YouTube Video\"></iframe>\n          </div>\n        </figure>\n      `;\n    });\n    \n    // 处理Bilibili视频\n    processedContent = processedContent.replace(bilibiliPlaceholderRegex, (match, originalUrl, videoId) => {\n      if (!originalUrl || !videoId) return match;\n      \n      const embedUrl = `https://player.bilibili.com/player.html?bvid=${videoId}&page=1&high_quality=1&danmaku=0`;\n      return `\n        <figure class=\"not-prose\" style=\"all: initial; display: block; text-align: center; width: 100%; margin: 2em 0; font-family: inherit; color: inherit;\">\n          <div style=\"width: 100%; max-width: 800px; margin: 0 auto; aspect-ratio: 16/9; background: #000; border-radius: 12px; box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06); overflow: hidden; position: relative;\">\n            <iframe src=\"${embedUrl}\" class=\"video-iframe\" style=\"position: absolute; top: 0; left: 0; width: 100%; height: 100%; border: none; border-radius: 12px;\" frameborder=\"0\" scrolling=\"no\" allowfullscreen title=\"Embedded Bilibili Video\"></iframe>\n          </div>\n        </figure>\n      `;\n    });\n    \n    return processedContent;\n  };\n\n  // 2. 在 return 语句的开头检查加载状态\n  if (loading) {\n    return <PostDetailSkeleton />;\n  }\n\n  if (isError || !post) { // 处理错误或帖子未找到的情况\n    return (\n      <div className=\"flex flex-col items-center justify-center min-h-screen bg-gray-900 text-white p-4\" style={{backgroundColor: 'var(--bg-base-color)', backgroundImage: 'var(--bg-gradient)'}}> {/* 使用CSS变量保持背景一致 */}\n        <h2 className=\"text-2xl font-semibold mb-4\">无法加载帖子</h2>\n        <p className=\"text-gray-400 mb-8\">{effectiveError || '帖子可能已被删除或链接无效。'}</p>\n        <button\n          onClick={() => navigate(-1)} // 返回上一页\n          className=\"px-4 py-2 bg-blue-600 hover:bg-blue-700 rounded-md text-white transition-colors\"\n        >\n          返回\n        </button>\n      </div>\n    );\n  }\n\n  // 在渲染内容之前处理视频占位符\n  const contentWithVideos = processContentForVideos(post.content);\n\n  // 正常渲染帖子内容\n  return (\n    <motion.div \n      className=\"post-detail-container pt-8 pb-16 px-2 md:px-4 lg:px-6 bg-transparent text-white min-h-screen\" // 确保背景透明以显示全局背景\n      initial={{ opacity: 0 }} // framer-motion 的初始状态\n      animate={{ opacity: 1 }} // framer-motion 动画到最终状态\n      transition={{ duration: 0.4, delay: 0.1 }} // framer-motion 动画参数\n    >\n      {/* 完全居中的容器，删除左侧偏移 */}\n      <div className=\"max-w-4xl mx-auto transition-all duration-300 ease-in-out\">\n        <motion.div\n          initial={{ opacity: 0 }}\n          animate={{ opacity: 1 }}\n          transition={{ duration: 0.5 }}\n          className=\"max-w-4xl mx-auto pb-8\"\n        >\n          {/* Header */}\n          <header className=\"mb-6 pb-4\">\n            {/* 标题单独一行 */}\n            <div className=\"mb-3\">\n              <h1 className=\"text-3xl md:text-4xl font-bold text-white break-words\">\n                {post.title}\n              </h1>\n            </div>\n\n            {/* 作者信息、浏览量、标签、按钮在同一行，两端对齐 */}\n            <div className=\"flex flex-wrap justify-between items-center text-sm text-gray-400 gap-x-4 gap-y-2\">\n              {/* 左侧：作者、发布日期、浏览量 - 缩小间距 */}\n              <div className=\"flex items-center flex-wrap gap-x-3 gap-y-1\"> {/* Reduced gap-x from 4 to 3 */}\n                {/* 添加作者头像和名字 - 使用 AuthorTooltip 包裹 */}\n                <div \n                  className=\"flex items-center relative\" // 添加 relative 定位\n                  onMouseEnter={() => {\n                    if (post?.author) {\n                      setTooltipData({\n                        nickname: post.author.nickname || post.author.email?.split('@')[0] || '匿名用户',\n                        // 假设 post.author 也有 bio, tags, avatar，需要确保 PostDetails 类型同步\n                        bio: (post.author as any).bio, \n                        tags: (post.author as any).tags,\n                        avatar: post.author.avatar\n                      });\n                      setIsTooltipVisible(true);\n                    }\n                  }}\n                  onMouseLeave={() => {\n                    setIsTooltipVisible(false);\n                  }}\n                >\n                  <img \n                    src={post.author?.avatar || `https://via.placeholder.com/40/374151/FFFFFF?text=${(post.author?.nickname || post.author?.email || 'U').charAt(0).toUpperCase()}`}\n                    alt={post.author?.nickname || post.author?.email || '作者头像'} \n                    className=\"w-6 h-6 rounded-full mr-2 object-cover bg-gray-700\" /* Reduced size from w-8 h-8 */\n                  />\n                  <Link \n                    to={`/profile/${post.author?.id}`} \n                    className=\"text-blue-400 hover:text-blue-300 hover:underline\"\n                  >\n                    {getAuthorName(post.author)}\n                  </Link>\n                </div>\n                {/* 中间的点 • */}\n                <span className=\"hidden sm:inline text-gray-500\">•</span>\n                {/* 发布日期 */}\n                <span>{formatDate(post.created_at)}</span>\n                {/* 中间的点 • */}\n                <span className=\"hidden sm:inline text-gray-500\">•</span>\n                {/* 浏览量 */}\n                <span>浏览量: {post.view_count}</span>\n             </div>\n\n              {/* 右侧：标签和按钮 */}\n              <div className=\"flex items-center space-x-4 flex-shrink-0\">\n                {/* Tags */} \n                {post.tags && post.tags.length > 0 && (\n                  <div className=\"flex flex-wrap gap-2\">\n                    {post.tags.map(tag => (\n                      <span key={tag} className=\"bg-indigo-600 text-white text-xs font-medium px-2.5 py-1 rounded-full\">\n                        {tag}\n                      </span>\n                    ))}\n                  </div>\n                )}\n                {/* Author Actions: Edit/Delete Buttons - 移到这里并移除绝对定位 */}\n            {isAuthor && (\n                  <div className=\"flex items-center space-x-2 flex-shrink-0\">\n                   <button \n                     onClick={() => navigate(`/edit-post/${post.slug}`)} \n                     className=\"px-3 py-1 text-xs font-medium text-gray-300 hover:text-white \n                                bg-transparent border border-gray-500/70 hover:border-white/70 \n                                rounded-full transition-all duration-200 \n                                disabled:opacity-50 disabled:cursor-not-allowed\"\n                     title=\"编辑帖子\" \n                      disabled={!post?.slug || loading} \n                   >\n                       编辑\n                   </button>\n                   <button \n                     onClick={handleDeletePost} \n                     className=\"px-3 py-1 text-xs font-medium text-gray-300 hover:text-white \n                                bg-transparent border border-gray-500/70 hover:border-white/70 \n                                rounded-full transition-all duration-200 \n                                disabled:opacity-50 disabled:cursor-not-allowed\"\n                     title=\"删除帖子\" \n                      disabled={!post?.id || loading} \n                   >\n                       删除\n                   </button>\n               </div>\n             )}\n              </div>\n            </div>\n          </header>\n          \n          {/* Content */}\n          <div\n            ref={contentRef}\n            className=\"prose prose-lg prose-invert max-w-none ck-content-output text-gray-300 prose-headings:font-semibold prose-headings:text-white prose-a:text-blue-400 prose-strong:text-white mt-6 prose-blockquote:border-l-blue-500 prose-blockquote:text-gray-400\"\n            dangerouslySetInnerHTML={{ __html: contentWithVideos || '<p>内容加载失败或为空。</p>' }} // Fallback content\n          />\n\n          {/* Comment Section - Passed updated props */}\n          <div className=\"mt-12 pt-8\">\n              <CommentSection\n                  targetType=\"post\"\n                  targetId={post.id}\n                  apiBaseUrl={API_BASE_URL}\n                  token={token}\n                  currentUser={user}\n                  isLiked={post.is_liked || false}\n                  isCollected={post.is_collected || false}\n                  likeCount={post.likes_count || 0}\n                  collectCount={post.collects_count || 0}\n                  shareCount={shareCount}\n                  handleLikeToggle={handleLikeToggle}\n                  handleCollectToggle={handleCollectToggle}\n                  handleShareClick={() => setIsNewShareModalOpen(true)}\n                  isSubmittingAction={likeMutation.isPending || collectMutation.isPending}\n              />\n          </div>\n        </motion.div>\n      </div>\n\n      {/* Share Dynamic Modal */}\n      {post && (\n        <ShareDynamicModal\n          isOpen={isNewShareModalOpen}\n          onClose={() => {\n            setIsNewShareModalOpen(false);\n            setNewShareComment('');\n            setShareError(null);\n          }}\n          onSubmit={handleNewShareSubmit}\n          comment={newShareComment}\n          setComment={setNewShareComment}\n          error={shareError}\n          isLoading={isSubmittingNewShare}\n          dynamicToShare={post}\n          username={user?.nickname || '当前用户'}\n          altText={`分享帖子: ${post.title}`}\n        />\n      )}\n\n      {/* Author Tooltip */} \n      {tooltipData && (\n        <AuthorTooltip \n          nickname={tooltipData.nickname}\n          bio={tooltipData.bio}\n          tags={tooltipData.tags}\n          avatar={tooltipData.avatar}\n          isVisible={isTooltipVisible}\n        />\n      )}\n    </motion.div>\n  );\n};\n\nexport default PostDetailPage; "],"names":["PostDetailSkeleton","placeholderBaseStyle","backgroundColor","borderRadius","marginBottom","animation","_jsxs","_Fragment","children","_jsx","style","width","minHeight","backgroundImage","padding","boxSizing","color","role","height","display","alignItems","marginRight","PostDetailPage","_post$author2","_post$author3","_post$author4","_post$author5","_post$author6","_post$author7","postSlug","useParams","navigate","useNavigate","isSidebarOpen","useSidebar","token","user","useAuth","shareCount","setShareCount","useState","isAuthor","setIsAuthor","isNewShareModalOpen","setIsNewShareModalOpen","newShareComment","setNewShareComment","shareError","setShareError","isSubmittingNewShare","setIsSubmittingNewShare","contentRef","useRef","queryClient","useQueryClient","tooltipData","setTooltipData","isTooltipVisible","setIsTooltipVisible","data","post","isLoading","loading","isError","error","queryError","usePostDetails","queryKey","useQuery","queryFn","async","Error","console","log","headers","postApiUrl","API_BASE_URL","response","axios","get","enabled","staleTime","gcTime","retry","failureCount","_response","status","warn","message","likeMutation","useLikePost","collectMutation","useCollectPost","effectiveError","String","useEffect","content","imageMatches","match","forEach","index","processContentForVideos","_post$author","author","id","share_count","current","querySelectorAll","iframe","_iframe$parentElement","parentElement","classList","contains","currentParent","HTMLElement","cssText","className","videoContainer","document","createElement","HTMLIFrameElement","outerContainer","appendChild","cloneNode","replaceChild","img","originalSrc","getAttribute","includes","src","encodeURIComponent","onerror","maxWidth","margin","el","childNodes","length","node","nodeType","Node","TEXT_NODE","textContent","text","imgRegex","hasMatch","lastIndex","fragment","createDocumentFragment","exec","matchStart","matchEnd","createTextNode","substring","originalUrl","setAttribute","fixImageUrl","alt","handleImageLoadError","_node$parentNode","parentNode","renderLatex","textNode","nodeContent","nodeValue","latexBlockRegex","standardBlockRegex","hasMatches","latexContent","trim","container","katex","throwOnError","displayMode","errorNode","innerHTML","_textNode$parentNode","observer","MutationObserver","mutations","mutation","addedNodes","ELEMENT_NODE","childNode","initialRender","element","_classList","_classList2","nodeName","observe","childList","subtree","processImages","currentSrc","dataOriginalSrc","desiredSrc","startsWith","Array","from","originalUrlFromMarkdown","_node$parentNode2","disconnect","htmlContent","processedContent","replace","altText","imgUrl","videoId","onClick","contentWithVideos","motion","div","initial","opacity","animate","transition","duration","delay","title","onMouseEnter","_post$author$email","nickname","email","split","bio","tags","avatar","onMouseLeave","charAt","toUpperCase","Link","to","dateString","Date","toLocaleString","year","month","day","hour","minute","e","formatDate","created_at","view_count","map","tag","slug","disabled","toast","postIdToDelete","postTitle","window","confirm","delete","_response$data2","success","err","_err$response2","_err$response2$data","errorMsg","ref","dangerouslySetInnerHTML","__html","CommentSection","targetType","targetId","apiBaseUrl","currentUser","isLiked","is_liked","isCollected","is_collected","likeCount","likes_count","collectCount","collects_count","handleLikeToggle","isPending","mutate","postId","currentLikeState","currentLikeActionId","like_action_id","handleCollectToggle","currentCollectState","currentCollectActionId","collect_action_id","handleShareClick","isSubmittingAction","ShareDynamicModal","isOpen","onClose","onSubmit","comment","images","payload","action_type","target_type","target_id","Authorization","_response$data","errorData","prev","invalidateQueries","_err$response","_err$response$data","setComment","dynamicToShare","username","AuthorTooltip","isVisible"],"sourceRoot":""}