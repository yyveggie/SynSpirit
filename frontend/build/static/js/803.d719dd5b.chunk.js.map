{"version":3,"file":"static/js/803.d719dd5b.chunk.js","mappings":"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","sources":["pages/RelationshipTopicPage.tsx","hooks/useRelationshipTopicQueries.ts"],"sourcesContent":["import React, { useState, useEffect, useRef, useCallback } from 'react';\nimport { useParams, Link, useNavigate } from 'react-router-dom';\nimport { useAuth } from '../context/AuthContext';\nimport CommunityContentPageLayout from '../components/CommunityContentPageLayout';\nimport { toast } from 'react-toastify';\nimport CommunityChatPanel from '../components/CommunityChatPanel';\nimport { useSidebar } from '../contexts/SidebarContext';\n// --- TanStack Query Import ---\nimport { useQuery, useQueryClient } from '@tanstack/react-query';\n// --- Import Custom Hooks ---\nimport { useRelationshipTopicDetails, useRelationshipTopicPosts, useToggleRelationshipTopicFavorite } from '../hooks/useRelationshipTopicQueries';\n\nconst RelationshipTopicPage: React.FC = () => {\n  const { slug } = useParams<{ slug: string }>();\n  const navigate = useNavigate();\n  const { user, token } = useAuth();\n  const { isSidebarOpen } = useSidebar();\n  const queryClient = useQueryClient();\n\n  // --- Use TanStack Query Hooks --- \n  const {\n    data: relationshipTopicDetails,\n    isLoading: loadingTopic,\n    isError: isTopicError,\n    error: topicError\n  } = useRelationshipTopicDetails(slug);\n\n  const {\n    data: postsData,\n    isLoading: loadingPosts,\n    isError: isPostsError,\n    error: postsError\n  } = useRelationshipTopicPosts(relationshipTopicDetails?.id);\n\n  // --- Instantiate Mutation Hook --- \n  const toggleFavoriteMutation = useToggleRelationshipTopicFavorite(); \n\n  // Extract posts from postsData\n  const posts = postsData?.posts || [];\n\n  // Determine overall loading and error states\n  const isLoadingPage = loadingTopic;\n  const pageError = isTopicError ? (topicError as Error)?.message || '加载关系主题详情时出错'\n                   : isPostsError ? (postsError as Error)?.message || '加载帖子列表时出错'\n                   : null;\n\n  // --- Update toggleFavorite function --- \n  const toggleFavorite = useCallback(async () => {\n    if (!relationshipTopicDetails || !user || toggleFavoriteMutation.isPending || !token) { \n      console.log(\"[DEBUG RelFav] toggleFavorite prerequisite not met or mutation is pending.\");\n      return;\n    }\n\n    const currentRelTopicId = relationshipTopicDetails.id;\n    const currentRelTopicName = relationshipTopicDetails.name;\n    // 直接从 relationshipTopicDetails 读取当前状态\n    const currentlyFavorited = relationshipTopicDetails.is_favorited || false;\n\n    // --- Call the mutation --- \n    toggleFavoriteMutation.mutate(\n      {\n        relTopicId: currentRelTopicId,\n        token: token,\n        currentFavoriteState: currentlyFavorited,\n        relTopicName: currentRelTopicName,\n      },\n      {\n        onSuccess: () => {\n          // --- 成功后 invalidate 关系主题详情查询 --- \n          console.log(`[Toggle RelTopic Favorite Success] Invalidating relationshipTopicDetails for slug: ${slug}`);\n          queryClient.invalidateQueries({ queryKey: ['relationshipTopicDetails', slug] });\n        },\n        onError: () => {\n          // 错误信息由 hook 处理\n          // 不再需要本地回滚\n        },\n      }\n    );\n  }, [relationshipTopicDetails, user, token, toggleFavoriteMutation, queryClient, slug]); // Add dependencies\n\n  // --- 创建帖子回调 (基本不变, 确认依赖) ---\n  const handleCreatePost = useCallback(() => {\n    if (relationshipTopicDetails) {\n      navigate(`/community/${relationshipTopicDetails.slug}/new-post`, {\n            state: {\n                relationshipTopicId: relationshipTopicDetails.id,\n                relationshipTopicName: relationshipTopicDetails.name,\n                parentType: 'relationship' // Ensure correct parentType is passed\n            }\n      });\n    } else {\n        console.error(\"无法创建帖子，关系主题详情未加载。\");\n    }\n  }, [navigate, relationshipTopicDetails]);\n\n  // --- 渲染逻辑 ---\n  return (\n    <>\n      <CommunityContentPageLayout\n        isLoading={isLoadingPage}\n        error={pageError}\n        topicDetails={relationshipTopicDetails ? {\n            id: relationshipTopicDetails.id,\n            name: relationshipTopicDetails.name,\n            slug: relationshipTopicDetails.slug,\n            description: relationshipTopicDetails.description,\n            // is_favorited 不直接属于 CommonTopicInfo，但在下面单独传递\n        } : null}\n        posts={posts}\n        isLoadingPosts={loadingPosts}\n        parentType='relationship'\n        parentSlug={relationshipTopicDetails?.slug}\n        showFavoriteButton={true}\n        // 直接从 relationshipTopicDetails 读取收藏状态\n        isFavorited={relationshipTopicDetails?.is_favorited || false} \n        isLoadingFavorite={toggleFavoriteMutation.isPending}\n        onToggleFavorite={toggleFavorite}\n        onCreatePost={handleCreatePost}\n        showChatButton={true}\n        isChatAvailable={true}\n        />\n    </>\n  );\n};\n\nexport default RelationshipTopicPage; ","import axios from 'axios';\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\nimport { API_BASE_URL } from '../config';\nimport { toast } from 'react-toastify';\n\n// --- 接口定义 ---\n// 注意：Post 和 Topic 接口可能在多个 Hook 文件中重复，未来可以考虑提取到共享类型文件\n// 帖子数据类型\ninterface Post {\n  id: number;\n  title: string;\n  author: any;\n  content?: string;\n  summary?: string;\n  excerpt?: string;\n  upvotes?: number;\n  comments?: number;\n  created_at?: string;\n  timestamp?: string;\n  cover_image?: string;\n  imageUrl?: string;\n  slug: string;\n  // 添加互动数据字段\n  likes_count?: number;\n  collects_count?: number;\n  comments_count?: number;\n  shares_count?: number;\n  // 后端API也可能使用不同的命名格式，添加兼容字段\n  like_count?: number;\n  collect_count?: number;\n  comment_count?: number;\n  share_count?: number;\n}\n\n// 主题数据类型 (用于 RelationshipTopic 的 participant_topics)\ninterface Topic {\n  id: number;\n  name: string;\n  slug: string;\n}\n\n// 关系主题数据类型\ninterface RelationshipTopic {\n    id: number;\n    name: string;\n    slug: string;\n    description: string | null;\n    created_at: string;\n    updated_at: string;\n    relation_type: string | null;\n    participant_topics?: Topic[];\n    is_favorited?: boolean;\n}\n// --- 结束接口定义 ---\n\n\n// --- Hook for fetching Relationship Topic Details ---\nexport const useRelationshipTopicDetails = (slug: string | undefined) => {\n    const queryKey = ['relationshipTopicDetails', slug];\n    const queryFn = async () => {\n        if (!slug) throw new Error(\"无效的关系主题标识符\");\n        console.log(`[useRelationshipTopicDetails] Fetching details for slug: ${slug}`);\n        const response = await axios.get<RelationshipTopic>(`${API_BASE_URL}/api/relationship-topics/slug/${slug}`);\n        if (!response.data || typeof response.data !== 'object' || !response.data.id) {\n           throw new Error(\"从后端获取的关系主题数据格式不正确或缺少 ID\");\n        }\n        console.log(\"[useRelationshipTopicDetails] Fetched details:\", response.data);\n        return response.data;\n    };\n    return useQuery<RelationshipTopic, Error>({\n        queryKey: queryKey,\n        queryFn: queryFn,\n        enabled: !!slug,\n        // --- 缓存配置 ---\n        // staleTime: 15 分钟。关系主题详情通常不频繁变动。\n        staleTime: 15 * 60 * 1000,\n        // gcTime: 30 分钟。\n        gcTime: 30 * 60 * 1000,\n        // --- 结束缓存配置 ---\n        retry: (failureCount, error) => {\n           if ((error as any)?.response?.status === 404) {\n               return false;\n           }\n           return failureCount < 3;\n        }\n    });\n};\n\n// --- Hook for fetching Posts for a Relationship Topic ---\nexport const useRelationshipTopicPosts = (relationshipTopicId: number | undefined) => {\n    const queryKey = ['relationshipTopicPosts', relationshipTopicId];\n    const queryFn = async () => {\n        if (!relationshipTopicId) return { posts: [], total: 0 };\n        console.log(`[useRelationshipTopicPosts] Fetching posts for relationship topic ID: ${relationshipTopicId}`);\n        // 添加字段参数，确保包含content字段\n        const fieldsToFetch = 'id,title,content,summary,category,tags,author,cover_image,slug,view_count,created_at,like_count,collect_count,share_count,comment_count';\n        \n        // 添加时间戳防止缓存问题\n        const timestamp = new Date().getTime();\n        const url = `${API_BASE_URL}/api/relationship-topics/${relationshipTopicId}/posts?fields=${fieldsToFetch}&_=${timestamp}`;\n        \n        console.log(`[useRelationshipTopicPosts] Request URL: ${url}`);\n        \n        const response = await axios.get<{ posts: Post[], total: number }>(url, {\n            headers: {\n                'Cache-Control': 'no-cache, no-store, must-revalidate',\n                'Pragma': 'no-cache',\n                'Expires': '0'\n            }\n        });\n        \n        // 添加调试日志，检查返回的帖子数据是否包含content字段\n        if (response.data && Array.isArray(response.data.posts)) {\n            const postsWithoutContent = response.data.posts.filter(post => !post.content);\n            if (postsWithoutContent.length > 0) {\n                console.warn(`[useRelationshipTopicPosts] 警告: ${postsWithoutContent.length}/${response.data.posts.length} 帖子缺少content字段`);\n                // 记录第一个没有content的帖子ID，帮助调试\n                if (postsWithoutContent.length > 0) {\n                    console.warn(`[useRelationshipTopicPosts] 第一个缺少content的帖子ID: ${postsWithoutContent[0].id}, 标题: ${postsWithoutContent[0].title}`);\n                    // 记录更多字段，帮助调试\n                    console.warn(`[useRelationshipTopicPosts] 该帖子所有字段:`, JSON.stringify(postsWithoutContent[0], null, 2));\n                }\n            } else {\n                console.log(`[useRelationshipTopicPosts] 所有帖子都包含content字段，共 ${response.data.posts.length} 篇`);\n                // 记录第一个帖子的content长度\n                if (response.data.posts.length > 0) {\n                    const firstPost = response.data.posts[0];\n                    console.log(`[useRelationshipTopicPosts] 第一个帖子ID: ${firstPost.id}, 标题: ${firstPost.title}, content长度: ${firstPost.content?.length || 0}`);\n                }\n            }\n        }\n        \n        console.log(\"[useRelationshipTopicPosts] Fetched posts:\", response.data.posts);\n        return response.data;\n    };\n    return useQuery<{ posts: Post[], total: number }, Error>(\n        {\n        queryKey: queryKey,\n        queryFn: queryFn,\n        enabled: !!relationshipTopicId,\n            staleTime: 5 * 60 * 1000, // 5分钟内不重新获取\n            gcTime: 10 * 60 * 1000, // 10分钟后清除缓存\n            // 减少缓存，强制刷新\n            refetchOnMount: true,\n            refetchOnWindowFocus: true\n        }\n    );\n};\n\n// --- Mutation Hook: Toggle Relationship Topic Favorite Status ---\ninterface ToggleRelationshipTopicFavoriteVariables {\n  relTopicId: number;\n  token: string | null;\n  currentFavoriteState: boolean;\n  relTopicName: string; // For toast messages\n}\n\nexport const useToggleRelationshipTopicFavorite = () => {\n    const queryClient = useQueryClient();\n\n    const mutationFn = async ({ relTopicId, token, currentFavoriteState }: ToggleRelationshipTopicFavoriteVariables) => {\n        if (!token) throw new Error('用户未登录');\n\n        const headers = { Authorization: `Bearer ${token}` };\n        const endpointBase = `${API_BASE_URL}/api/users/favorites/relationship-topics`;\n\n        if (currentFavoriteState) {\n            // --- Remove Favorite --- \n            console.log(`[useToggleRelTopicFav] Attempting DELETE for relTopic ID: ${relTopicId}`);\n            await axios.delete(`${endpointBase}/${relTopicId}`, { headers });\n        } else {\n            // --- Add Favorite --- \n            console.log(`[useToggleRelTopicFav] Attempting POST for relTopic ID: ${relTopicId}`);\n            await axios.post(endpointBase, { relationship_topic_id: relTopicId }, { headers });\n        }\n    };\n\n    return useMutation<void, Error, ToggleRelationshipTopicFavoriteVariables>({\n        mutationFn: mutationFn,\n        onSuccess: (data, variables) => {\n            const action = variables.currentFavoriteState ? '取消收藏' : '收藏';\n            toast.success(`已${action} \"${variables.relTopicName}\"`);\n            console.log(`[useToggleRelTopicFav Success] Toggled favorite for RelTopic ID: ${variables.relTopicId}`);\n            \n            // --- Invalidate relevant queries --- \n            // --- Invalidate 关系主题详情查询 --- \n            // 同样缺少 slug\n            // queryClient.invalidateQueries({ queryKey: ['relationshipTopicDetails', variables.relTopicSlug] }); // 这里需要 slug!\n\n            queryClient.invalidateQueries({ queryKey: ['userFavoritesList'] });\n        },\n        onError: (error, variables) => {\n            console.error(\"[useToggleRelTopicFav Error]:\", error);\n            toast.error('操作失败，请稍后重试');\n        },\n    });\n}; "],"names":["RelationshipTopicPage","slug","useParams","navigate","useNavigate","user","token","useAuth","isSidebarOpen","useSidebar","queryClient","useQueryClient","data","relationshipTopicDetails","isLoading","loadingTopic","isError","isTopicError","error","topicError","queryKey","useQuery","queryFn","async","Error","console","log","response","axios","get","API_BASE_URL","id","enabled","staleTime","gcTime","retry","failureCount","_response","status","useRelationshipTopicDetails","postsData","loadingPosts","isPostsError","postsError","relationshipTopicId","posts","total","timestamp","Date","getTime","url","headers","Array","isArray","postsWithoutContent","filter","post","content","length","warn","title","JSON","stringify","_firstPost$content","firstPost","refetchOnMount","refetchOnWindowFocus","useRelationshipTopicPosts","toggleFavoriteMutation","useToggleRelationshipTopicFavorite","useMutation","mutationFn","relTopicId","currentFavoriteState","_ref","Authorization","endpointBase","delete","relationship_topic_id","onSuccess","variables","action","toast","success","relTopicName","invalidateQueries","onError","isLoadingPage","pageError","message","toggleFavorite","useCallback","isPending","currentRelTopicId","currentRelTopicName","name","currentlyFavorited","is_favorited","mutate","handleCreatePost","state","relationshipTopicName","parentType","_jsx","_Fragment","children","CommunityContentPageLayout","topicDetails","description","isLoadingPosts","parentSlug","showFavoriteButton","isFavorited","isLoadingFavorite","onToggleFavorite","onCreatePost","showChatButton","isChatAvailable"],"sourceRoot":""}