{"version":3,"file":"static/js/367.3a021728.chunk.js","mappings":"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","sources":["pages/AuthPage.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useNavigate, useLocation, Link } from 'react-router-dom';\nimport axios from 'axios';\nimport { useAuth } from '../context/AuthContext';\nimport { API_BASE_URL } from '../config';\nimport '../assets/css/AuthPage.css'; // 我们将在这里编写新的CSS\n\nconst AuthPage: React.FC = () => {\n  const location = useLocation(); // 在这里获取 location\n  // 根据路径设置 isSignUpActive 的初始值\n  const [isSignUpActive, setIsSignUpActive] = useState(location.pathname === '/register');\n  const navigate = useNavigate();\n  const { login, token } = useAuth();\n\n  // --- 登录表单状态 ---\n  const [loginEmail, setLoginEmail] = useState('');\n  const [loginPassword, setLoginPassword] = useState('');\n  const [loginError, setLoginError] = useState('');\n  const [loginSuccessMessage, setLoginSuccessMessage] = useState('');\n  const [loginLoading, setLoginLoading] = useState(false);\n\n  // --- 注册表单状态 (稍后从 RegisterPage.tsx 迁移) ---\n  const [registerEmail, setRegisterEmail] = useState('');\n  const [registerPassword, setRegisterPassword] = useState('');\n  const [registerConfirmPassword, setRegisterConfirmPassword] = useState('');\n  const [registerError, setRegisterError] = useState('');\n  const [registerLoading, setRegisterLoading] = useState(false);\n  \n  // --- 游客登录状态 ---\n  const [guestLoading, setGuestLoading] = useState(false);\n\n  // 清除所有提示消息的辅助函数\n  const clearAllMessages = () => {\n    setLoginError('');\n    setLoginSuccessMessage('');\n    setRegisterError('');\n  };\n\n  const fromPath = location.state?.from || '/';\n\n  useEffect(() => {\n    // 组件挂载时添加 class 到 body\n    document.body.classList.add('auth-active');\n    // 组件卸载时移除 class\n    return () => {\n      document.body.classList.remove('auth-active');\n    };\n  }, []); // 空依赖数组，确保只在挂载和卸载时运行\n\n  useEffect(() => {\n    if (token) {\n      navigate(fromPath);\n    }\n  }, [token, navigate, fromPath]);\n\n  // 新增 useEffect 以响应路径变化，确保直接访问 /register 时激活注册面板\n  useEffect(() => {\n    if (location.pathname === '/register') {\n      setIsSignUpActive(true);\n      clearAllMessages(); // 路径切换时清除消息\n    } else if (location.pathname === '/login') {\n      setIsSignUpActive(false);\n      clearAllMessages(); // 路径切换时清除消息\n    }\n  }, [location.pathname]);\n\n  const handleLoginSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    clearAllMessages(); // 尝试登录时清除所有消息\n    setLoginLoading(true);\n    // ... (登录逻辑，从 LoginPage.tsx 迁移)\n    try {\n      const response = await axios.post(`${API_BASE_URL}/api/auth/login`, { email: loginEmail, password: loginPassword });\n      const result = await login(response.data.token, response.data.user);\n      if (result.success) {\n        navigate(fromPath);\n      }\n    } catch (err: any) {\n      setLoginError(err.response?.data?.message || err.message || '登录失败');\n    } finally {\n      setLoginLoading(false);\n    }\n  };\n\n  const handleRegisterSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    clearAllMessages(); // 尝试注册时清除所有消息\n    setRegisterError('');\n    if (registerPassword !== registerConfirmPassword) {\n      setRegisterError('两次输入的密码不一致');\n      return;\n    }\n    setRegisterLoading(true);\n    // ... (注册逻辑，从 RegisterPage.tsx 迁移)\n    try {\n      await axios.post(`${API_BASE_URL}/api/auth/register`, { email: registerEmail, password: registerPassword });\n      // 注册成功后，通常建议用户登录，或者也可以直接切换到登录面板并填充邮箱\n      setIsSignUpActive(false); // 切换到登录面板\n      setLoginEmail(registerEmail); // 预填邮箱\n      // 清空注册表单和错误\n      setRegisterPassword('');\n      setRegisterConfirmPassword('');\n      setRegisterError('');\n      // 可以给一个提示，比如 \"注册成功，请输入密码登录\"\n      setLoginSuccessMessage('注册成功！请使用上面预填的邮箱登录。');\n    } catch (err: any) {\n      setRegisterError(err.response?.data?.message || err.message || '注册失败');\n    } finally {\n      setRegisterLoading(false);\n    }\n  };\n  \n  const handleGuestLogin = async () => {\n    setGuestLoading(true);\n    setLoginError(''); // 清除之前的登录错误\n    setRegisterError(''); // 清除之前的注册错误\n\n    try {\n      const response = await axios.post(`${API_BASE_URL}/api/auth/guest-login`);\n      const guestUser = {\n        id: 0, \n        email: 'guest@example.com',\n        nickname: '游客',\n        is_admin: false,\n        avatar: null,\n        bio: null,\n        tags: []\n      };\n      await login(response.data.token, guestUser);\n      localStorage.setItem('isGuest', 'true');\n      navigate(fromPath);\n    } catch (err: any) {\n      // 根据当前活动的面板显示错误，或者一个通用的地方\n      if (isSignUpActive) {\n        setRegisterError(err.response?.data?.message || '游客登录失败，请重试');\n      } else {\n        setLoginError(err.response?.data?.message || '游客登录失败，请重试');\n      }\n    } finally {\n      setGuestLoading(false);\n    }\n  };\n\n\n  return (\n    <div className=\"auth-page-container\"> {/* 全屏背景容器 */}\n      <div className={`container ${isSignUpActive ? 'right-panel-active' : ''}`} id=\"auth-container\">\n        {/* Sign Up Container (注册表单) */}\n        <div className=\"form-container sign-up-container\">\n          <form onSubmit={handleRegisterSubmit}>\n            <h1>创建账户</h1>\n            {/* <div className=\"social-container\">\n              <a href=\"#\" className=\"social\"><i className=\"fab fa-facebook-f\"></i></a>\n              <a href=\"#\" className=\"social\"><i className=\"fab fa-google-plus-g\"></i></a>\n              <a href=\"#\" className=\"social\"><i className=\"fab fa-linkedin-in\"></i></a>\n            </div>\n            <span>或使用您的邮箱注册</span> */}\n            {/* 注册字段，稍后从 RegisterPage.tsx 详细填充 */}\n            <input type=\"email\" placeholder=\"邮箱\" value={registerEmail} onChange={(e) => setRegisterEmail(e.target.value)} required />\n            <input type=\"password\" placeholder=\"密码\" value={registerPassword} onChange={(e) => setRegisterPassword(e.target.value)} required />\n            <input type=\"password\" placeholder=\"确认密码\" value={registerConfirmPassword} onChange={(e) => setRegisterConfirmPassword(e.target.value)} required />\n            {registerError && <p className=\"error-message\">{registerError}</p>}\n            <button type=\"submit\" disabled={registerLoading || guestLoading}>\n              {registerLoading ? '注册中...' : '立即注册'}\n            </button>\n          </form>\n        </div>\n\n        {/* Sign In Container (登录表单) */}\n        <div className=\"form-container sign-in-container\">\n          <form onSubmit={handleLoginSubmit}>\n            <h1>登录</h1>\n            {/* <div className=\"social-container\">\n              <a href=\"#\" className=\"social\"><i className=\"fab fa-facebook-f\"></i></a>\n              <a href=\"#\" className=\"social\"><i className=\"fab fa-google-plus-g\"></i></a>\n              <a href=\"#\" className=\"social\"><i className=\"fab fa-linkedin-in\"></i></a>\n            </div>\n            <span>或使用您的账户</span> */}\n            {/* 登录字段，已初步填充 */}\n            <input \n              type=\"email\" \n              placeholder=\"邮箱\" \n              value={loginEmail} \n              onChange={(e) => {\n                setLoginEmail(e.target.value);\n                setLoginSuccessMessage('');\n                setLoginError('');\n              }} \n              required \n            />\n            <input \n              type=\"password\" \n              placeholder=\"密码\" \n              value={loginPassword} \n              onChange={(e) => {\n                setLoginPassword(e.target.value);\n                setLoginSuccessMessage('');\n                setLoginError('');\n              }} \n              required \n            />\n            {/* <Link to=\"/forgot-password\" className=\"forgot-password-link\">忘记密码？</Link> */}\n            {loginError && <p className=\"error-message\">{loginError}</p>}\n            {loginSuccessMessage && <p className=\"success-message\">{loginSuccessMessage}</p>}\n            <button type=\"submit\" disabled={loginLoading || guestLoading}>\n              {loginLoading ? '登录中...' : '立即登录'}\n            </button>\n            \n            {/* 游客登录按钮 - 放置在登录表单内部或外部，取决于设计 */}\n            <button \n              type=\"button\" \n              onClick={handleGuestLogin} \n              disabled={loginLoading || registerLoading || guestLoading} \n              className=\"ghost guest-login-button\" // 稍后添加样式\n            >\n              {guestLoading ? '处理中...' : '作为游客继续'}\n            </button>\n          </form>\n        </div>\n\n        {/* Overlay Container (覆盖层) */}\n        <div className=\"overlay-container\">\n          <div className=\"overlay\">\n            {/* Left Overlay Panel (当注册激活时，在左侧显示，提示去登录) */}\n            <div className=\"overlay-panel overlay-left\">\n              <h1>欢迎回来！</h1>\n              <p>要与我们保持联系，请使用您的个人信息登录</p>\n              <button className=\"ghost\" id=\"signInButton\" onClick={() => {\n                setIsSignUpActive(false);\n                clearAllMessages(); // 点击按钮切换时清除消息\n              }}>\n                登录\n              </button>\n            </div>\n            {/* Right Overlay Panel (当登录激活时，在右侧显示，提示去注册) */}\n            <div className=\"overlay-panel overlay-right\">\n              <h1>你好，朋友！</h1>\n              <p>输入您的个人详细信息，与我们一起开始旅程</p>\n              <button className=\"ghost\" id=\"signUpButton\" onClick={() => {\n                setIsSignUpActive(true);\n                clearAllMessages(); // 点击按钮切换时清除消息\n              }}>\n                注册\n              </button>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default AuthPage; "],"names":["AuthPage","_location$state","location","useLocation","isSignUpActive","setIsSignUpActive","useState","pathname","navigate","useNavigate","login","token","useAuth","loginEmail","setLoginEmail","loginPassword","setLoginPassword","loginError","setLoginError","loginSuccessMessage","setLoginSuccessMessage","loginLoading","setLoginLoading","registerEmail","setRegisterEmail","registerPassword","setRegisterPassword","registerConfirmPassword","setRegisterConfirmPassword","registerError","setRegisterError","registerLoading","setRegisterLoading","guestLoading","setGuestLoading","clearAllMessages","fromPath","state","from","useEffect","document","body","classList","add","remove","_jsxs","className","children","id","_jsx","onSubmit","async","e","preventDefault","axios","post","API_BASE_URL","email","password","err","_err$response2","_err$response2$data","response","data","message","type","placeholder","value","onChange","target","required","disabled","user","success","_err$response","_err$response$data","onClick","guestUser","nickname","is_admin","avatar","bio","tags","localStorage","setItem","_err$response3","_err$response3$data","_err$response4","_err$response4$data"],"sourceRoot":""}