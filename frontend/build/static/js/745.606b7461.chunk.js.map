{"version":3,"file":"static/js/745.606b7461.chunk.js","mappings":"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","sources":["components/ToastEditor.tsx","components/ToastEditorWrapper.tsx"],"sourcesContent":["/**\n * ToastEditor.tsx - 富文本编辑器组件\n * \n * 功能描述:\n * - 基于Toast UI Editor实现的富文本编辑器\n * - 提供Markdown和WYSIWYG(所见即所得)两种编辑模式\n * - 支持文本格式化(粗体、斜体、下划线、标题等)\n * - 支持图片上传至服务器\n * - 支持LaTeX公式渲染(优化渲染体验，减少刷新感)\n * - 支持视频嵌入(YouTube、Bilibili)(优化嵌入体验，减少刷新感)\n * - 支持自定义文本颜色\n * \n * 技术实现:\n * - 使用@toast-ui/react-editor作为基础\n * - 使用KaTeX渲染数学公式\n * - 自定义工具栏和编辑器行为\n * - 防止表单误提交和编辑器内容错误渲染\n * - 优化了LaTeX公式和视频嵌入的渲染过程，减少明显的刷新感\n */\nimport React, { useRef, useEffect, useState, useMemo, useCallback } from 'react';\nimport { Editor } from '@toast-ui/react-editor';\nimport '@toast-ui/editor/dist/toastui-editor.css';\n// 引入中文语言包\nimport '@toast-ui/editor/dist/i18n/zh-cn';\nimport axios from 'axios';\nimport { API_BASE_URL } from '../config';\n// 引入KaTeX相关样式\nimport 'katex/dist/katex.min.css';\nimport katex from 'katex';\n// 引入颜色选择器相关样式和插件\nimport 'tui-color-picker/dist/tui-color-picker.css';\nimport '@toast-ui/editor-plugin-color-syntax/dist/toastui-editor-plugin-color-syntax.css';\nimport colorSyntax from '@toast-ui/editor-plugin-color-syntax';\n\n//=============================================================================\n// 类型定义\n//=============================================================================\n\n/**\n * 视频平台类型枚举\n */\nenum VideoPlatform {\n  YouTube = 'youtube',\n  Bilibili = 'bilibili',\n  Unknown = 'unknown'\n}\n\n/**\n * 视频信息接口\n */\ninterface VideoInfo {\n  platform: VideoPlatform;\n  videoId: string;\n  embedUrl: string; \n}\n\n/**\n * 编辑器属性接口\n */\ninterface ToastEditorProps {\n  initialData?: string;         // 初始内容\n  onChange: (data: string) => void; // 内容变化回调\n  token: string | null;         // 用户认证令牌\n  onReady?: (editor: any) => void; // 编辑器就绪回调\n  placeholder?: string;         // 占位符文本 - 已弃用\n  height?: string;              // 编辑器高度\n  initialEditType?: 'markdown' | 'wysiwyg'; // 初始编辑模式\n}\n\n//=============================================================================\n// 图片上传适配器\n//=============================================================================\n\n/**\n * 图片上传处理类\n * 负责将图片文件上传到服务器并返回URL\n */\nclass ImageUploader {\n  token: string | null;\n  maxFileSize: number;\n  \n  /**\n   * 构造函数\n   * @param token 认证令牌\n   */\n  constructor(token: string | null) {\n    this.token = token;\n    this.maxFileSize = 10 * 1024 * 1024; // 10MB 最大文件大小限制\n  }\n\n  /**\n   * 上传图片到服务器\n   * @param file 图片文件对象\n   * @returns 上传成功后的图片URL\n   */\n  async upload(file: File): Promise<string> {\n    if (!file) {\n      throw new Error('无效的文件对象');\n    }\n\n    if (file.size > this.maxFileSize) {\n      throw new Error(`图片太大，请上传小于10MB的图片（当前大小: ${(file.size / (1024 * 1024)).toFixed(2)}MB）`);\n    }\n\n    const formData = new FormData();\n    formData.append('image', file);\n\n    try {\n      // 创建请求头，仅当有token时才添加Authorization头\n      const headers: Record<string, string> = {\n          'Content-Type': 'multipart/form-data'\n      };\n      \n      // 仅当token存在且非空时才添加Authorization头\n      if (this.token) {\n        headers['Authorization'] = `Bearer ${this.token}`;\n      }\n      \n      console.log('准备上传图片, 请求URL:', `${API_BASE_URL}/api/upload/image`);\n      console.log('是否有token:', this.token ? '是' : '否');\n      \n      const response = await axios.post(`${API_BASE_URL}/api/upload/image`, formData, {\n        headers,\n        timeout: 30000,\n        onUploadProgress: (progressEvent) => {\n          const percentCompleted = Math.round((progressEvent.loaded * 100) / (progressEvent.total || 1));\n          console.log(`上传进度: ${percentCompleted}%`);\n        }\n      });\n\n      if (response.data && response.data.imageUrl) {\n        console.log('图片上传成功:', response.data.imageUrl);\n        return response.data.imageUrl;\n      } else {\n        console.error('Upload failed: Invalid response format', response.data);\n        throw new Error('上传成功，但服务器返回的数据格式无效');\n      }\n    } catch (error: any) {\n      console.error('Upload failed:', error.response?.data || error.message);\n      throw new Error(error.response?.data?.error || '图片上传失败');\n    }\n  }\n}\n\n//=============================================================================\n// 视频处理工具\n//=============================================================================\n\n/**\n * 视频处理工具对象\n * 用于解析视频URL并生成嵌入代码\n */\nconst videoUtils = {\n  /**\n   * 解析视频URL，提取平台和视频ID信息\n   * @param url 视频URL\n   * @returns 视频平台和ID信息\n   */\n  parseVideoUrl(url: string): VideoInfo {\n    if (!url || typeof url !== 'string') {\n      return {\n        platform: VideoPlatform.Unknown,\n        videoId: '',\n        embedUrl: ''\n      };\n    }\n\n    // YouTube正则表达式\n    const youtubeRegex = /(?:youtube\\.com\\/(?:[^\\/]+\\/.+\\/|(?:v|e(?:mbed)?)\\/|.*[?&]v=)|youtu\\.be\\/)([^\"&?\\/\\s]{11})/i;\n    // Bilibili正则表达式 - 支持多种格式\n    const bilibiliRegex = /(?:bilibili\\.com\\/video\\/(?:av|BV)([a-zA-Z0-9]+)|b23\\.tv\\/([a-zA-Z0-9]+))/i;\n    \n    // 尝试匹配YouTube\n    const youtubeMatch = url.match(youtubeRegex);\n    if (youtubeMatch && youtubeMatch[1]) {\n      const videoId = youtubeMatch[1];\n      return {\n        platform: VideoPlatform.YouTube,\n        videoId,\n        // 使用更多参数确保不自动播放\n        embedUrl: `https://www.youtube.com/embed/${videoId}?autoplay=0&mute=0&controls=1`\n      };\n    }\n    \n    // 尝试匹配Bilibili\n    const bilibiliMatch = url.match(bilibiliRegex);\n    if (bilibiliMatch) {\n      const videoId = bilibiliMatch[1] || bilibiliMatch[2] || '';\n      let bvid = videoId;\n      \n      if (!videoId.startsWith('BV') && !videoId.startsWith('av')) {\n        bvid = `BV${videoId}`;\n      }\n      \n      // 使用更多参数确保不自动播放\n      return {\n        platform: VideoPlatform.Bilibili,\n        videoId: bvid,\n        embedUrl: `https://player.bilibili.com/player.html?bvid=${bvid}&page=1&autoplay=0&danmaku=0&high_quality=0&as_wide=0`\n      };\n    }\n    \n    return {\n      platform: VideoPlatform.Unknown,\n      videoId: '',\n      embedUrl: ''\n    };\n  },\n  \n  /**\n   * 生成嵌入代码\n   * @param videoInfo 视频信息对象\n   * @returns HTML嵌入代码\n   */\n  generateEmbedCode(videoInfo: VideoInfo): string {\n    // 如果无法识别视频平台，返回空字符串\n    if (!videoInfo || videoInfo.platform === VideoPlatform.Unknown || !videoInfo.videoId) {\n      return '';\n    }\n    \n    // 为了避免空文本节点错误，使用div包装iframe\n    const iframeContainer = '<div class=\"iframe-container\">';\n    const containerEnd = '</div>';\n    \n    // 确保embedUrl中已经包含autoplay=0参数，不再重复添加\n    // 此处依赖parseVideoUrl方法已正确设置autoplay=0\n    const embedUrl = videoInfo.embedUrl;\n    \n    // 根据不同平台生成不同的嵌入代码\n    if (videoInfo.platform === VideoPlatform.YouTube) {\n      return `${iframeContainer}<iframe src=\"${embedUrl}\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; clipboard-write; encrypted-media; gyroscope; picture-in-picture; fullscreen\" allowfullscreen></iframe>${containerEnd}`;\n    } else if (videoInfo.platform === VideoPlatform.Bilibili) {\n      return `${iframeContainer}<iframe src=\"${embedUrl}\" title=\"Bilibili video player\" frameborder=\"0\" allow=\"accelerometer; clipboard-write; encrypted-media; gyroscope; picture-in-picture; fullscreen\" allowfullscreen scrolling=\"no\"></iframe>${containerEnd}`;\n    }\n    \n    return '';\n  }\n};\n\n//=============================================================================\n// 自定义按钮图标\n//=============================================================================\n\n/**\n * 自定义工具栏按钮文本图标\n */\nconst icons = {\n  // 纯文本LaTeX公式图标\n  latex: `TeX`,\n  \n  // 纯文本视频图标\n  video: `视频`\n};\n\n//=============================================================================\n// 主组件实现\n//=============================================================================\n\n/**\n * ToastEditor组件\n * 富文本编辑器实现，支持多种格式和特性\n */\nconst ToastEditor: React.FC<ToastEditorProps> = ({\n  initialData = '',\n  onChange,\n  token,\n  onReady,\n  // placeholder 已弃用\n  height = '1000px',\n  initialEditType = 'wysiwyg'\n}) => {\n  // 编辑器引用与状态\n  const editorRef = useRef<any>(null);\n  const [isReady, setIsReady] = useState(false);\n  const [currentMode, setCurrentMode] = useState<'markdown' | 'wysiwyg'>(initialEditType);\n  const imageUploader = useMemo(() => new ImageUploader(token), [token]);\n  const [uploadingImage, setUploadingImage] = useState(false);\n  \n  // 添加全局事件监听，防止编辑器内空格键引起表单提交\n  useEffect(() => {\n    const preventSpaceSubmit = (e: KeyboardEvent) => {\n      if (e.key === ' ' && e.target && \n          ((e.target as Element).closest('.toastui-editor-defaultUI') || \n           hasClass(e.target as Element, 'toastui-editor-contents'))) {\n        // 阻止空格键引起的表单提交\n        e.stopPropagation();\n      }\n    };\n    \n    // 在捕获阶段添加事件监听，确保先于其他事件处理\n    document.addEventListener('keydown', preventSpaceSubmit, true);\n    \n    return () => {\n      document.removeEventListener('keydown', preventSpaceSubmit, true);\n    };\n  }, []);\n  \n  // 颜色选择器配置选项\n  const colorSyntaxOptions = useMemo(() => ({\n    preset: [\n      '#000000', '#2c2c2c', '#515151', '#7b7b7b', '#a8a8a8', '#d9d9d9', '#ffffff',\n      '#ff4747', '#ff7575', '#ff9d9d', '#ffcece', '#ff4500', '#ff8142', '#ffb47a', '#ffd2a8',\n      '#ffdc3c', '#ffe978', '#fff2a8', '#4a86e8', '#7aa3ed', '#a8c3f1', '#cedef9',\n      '#6aa84f', '#8dbd77', '#b6d7a8', '#d8e9cf', '#9b30ff', '#ac67f2', '#cc99ff', '#e6d4f9'\n    ]\n  }), []);\n\n  //=============================================================================\n  // 编辑器初始化和生命周期钩子\n  //=============================================================================\n  \n  /**\n   * 添加模式切换监听\n   * 处理Markdown和WYSIWYG模式之间的切换\n   */\n  useEffect(() => {\n    if (!editorRef.current || !isReady) return;\n\n    const instance = editorRef.current.getInstance();\n    if (!instance) return;\n    \n    /**\n     * 模式切换处理函数\n     * 确保内容在不同模式间正确转换，优化LaTeX公式和视频的渲染体验\n     * @param mode 目标模式\n     */\n    const handleModeChange = (mode: string) => {\n      setCurrentMode(mode as 'markdown' | 'wysiwyg');\n      \n        try {\n        // 保存滚动位置\n        const editorElement = editorRef.current?.getRootElement();\n        const currentScrollContainer = editorElement?.querySelector(\n          mode === 'markdown' ? '.toastui-editor-ww-container' : '.toastui-editor-md-container'\n        );\n        const scrollPosition = currentScrollContainer?.scrollTop || 0;\n        \n        // 应用过渡动画到所有公式和视频元素\n        const toastElements = editorElement?.querySelectorAll('.katex-wrapper, .iframe-container');\n        toastElements?.forEach((el: Element) => {\n          if (el instanceof HTMLElement) {\n            el.style.opacity = '0.5';\n            el.style.transition = 'opacity 0.3s ease';\n          }\n        });\n        \n        // 延迟足够短的时间让过渡效果开始，但不会被用户感知到延迟\n              setTimeout(() => {\n                try {\n            // 获取当前内容\n            const currentContent = mode === 'markdown' \n              ? instance.getHTML() \n              : instance.getMarkdown();\n            \n            // 设置内容，避免重复转换\n            if (mode === 'markdown') {\n              instance.setMarkdown(instance.getMarkdown());\n            } else {\n              instance.setHTML(instance.getHTML());\n            }\n            \n            // 恢复滚动位置并完成过渡动画\n              setTimeout(() => {\n                try {\n                const newScrollContainer = editorElement?.querySelector(\n                  mode === 'markdown' ? '.toastui-editor-md-container' : '.toastui-editor-ww-container'\n                );\n                if (newScrollContainer) {\n                  newScrollContainer.scrollTop = scrollPosition;\n                }\n                \n                // 恢复元素不透明度\n                const updatedElements = editorElement?.querySelectorAll('.katex-wrapper, .iframe-container');\n                updatedElements?.forEach((el: Element) => {\n                  if (el instanceof HTMLElement) {\n                    el.style.opacity = '1';\n                  }\n                });\n              } catch (scrollError) {\n                console.warn('恢复滚动位置时出错:', scrollError);\n                }\n            }, 50);\n          } catch (contentError) {\n            console.error('设置内容时出错:', contentError);\n            }\n        }, 20);\n        } catch (error) {\n          console.error('模式切换处理时出错:', error);\n      }\n    };\n    \n    // 添加模式切换事件监听\n    if (instance.on) {\n      instance.on('changeMode', handleModeChange);\n    }\n    \n    // 清理函数\n    return () => {\n      if (instance.off) {\n        instance.off('changeMode', handleModeChange);\n      }\n    };\n  }, [isReady]);\n\n  /**\n   * 修复编辑器菜单项和样式问题\n   */\n  useEffect(() => {\n    if (!editorRef.current || !isReady) return;\n\n    /**\n     * 防抖函数包装的样式修复\n     * 解决下拉菜单颜色和重复菜单项问题\n     */\n    const fixStyles = debounce(() => {\n      // 修复标题下拉菜单颜色\n      document.querySelectorAll('.toastui-editor-dropdown-toolbar .toastui-editor-dropdown-toolbar-item').forEach((item) => {\n        if (item instanceof HTMLElement) {\n          item.style.color = '#333';\n          item.style.fontWeight = 'normal';\n        }\n      });\n      \n      // 修复重复菜单项\n      document.querySelectorAll('.toastui-editor-context-menu').forEach((menu) => {\n        const items = menu.querySelectorAll('li');\n        const seenText = new Set<string>();\n        \n        items.forEach((item) => {\n          const text = item.textContent?.trim() || '';\n          if (seenText.has(text)) {\n            item.remove();\n          } else {\n            seenText.add(text);\n            if (item instanceof HTMLElement) {\n              item.style.color = '#333';\n            }\n          }\n        });\n      });\n    }, 50);\n    \n    // 初始修复\n    fixStyles();\n    \n    // 获取编辑器实例\n    const instance = editorRef.current.getInstance();\n    \n    // 添加事件监听器\n    if (instance && instance.on) {\n      instance.on('changeMode', fixStyles);\n    }\n    \n    // 创建事件监听器引用以便于清理\n    const handleClick = () => fixStyles();\n    document.addEventListener('click', handleClick);\n    \n    // 清理函数\n    return () => {\n      if (instance && instance.off) {\n        instance.off('changeMode', fixStyles);\n      }\n      document.removeEventListener('click', handleClick);\n    };\n  }, [isReady]);\n\n  /**\n   * 全局样式注入\n   * 添加编辑器所需的各种样式\n   */\n  useEffect(() => {\n    const style = document.createElement('style');\n    style.textContent = `\n      /* 修复标题下拉菜单颜色问题 */\n      .toastui-editor-dropdown-toolbar .toastui-editor-dropdown-toolbar-item {\n        color: #333 !important;\n        font-weight: normal !important;\n      }\n      \n      /* 标题选项悬停效果 */\n      .toastui-editor-dropdown-toolbar .toastui-editor-dropdown-toolbar-item:hover {\n        background-color: #f1f3f5 !important;\n      }\n      \n      /* 修复下拉菜单箭头颜色 */\n      .toastui-editor-toolbar .toastui-editor-toolbar-icons.heading::after {\n        border-top-color: #333 !important;\n      }\n\n      /* KaTeX相关样式 */\n      .katex-wrapper {\n        margin: 1.5em 0;\n        overflow-x: auto;\n        background-color: #f8f9fa;\n        padding: 15px;\n        border-radius: 4px;\n        border-left: 4px solid #4b7bec;\n        transition: opacity 0.3s ease, transform 0.2s ease;\n        opacity: 1;\n        transform: translateY(0);\n      }\n      \n      .katex-wrapper.rendering {\n        opacity: 0.7;\n        transform: translateY(5px);\n      }\n      \n      .katex-error {\n        margin: 1.5em 0;\n        padding: 15px;\n        color: #e74c3c;\n        background-color: #fdecea;\n        border-radius: 4px;\n        border-left: 4px solid #e74c3c;\n        font-family: monospace;\n        white-space: pre-wrap;\n        transition: opacity 0.3s ease;\n      }\n      \n      /* 视频和iframe相关样式 */\n      .toastui-editor-contents iframe, \n      .article-content iframe {\n        max-width: 100%;\n        width: 560px;\n        height: 315px;\n        border: none;\n        margin: 1.5em 0;\n        display: block;\n        /* 禁止自动播放的关键样式 */\n        visibility: visible !important;\n        pointer-events: auto !important;\n        transition: opacity 0.5s ease, transform 0.3s ease;\n        will-change: opacity;\n        transform: translateZ(0);\n      }\n      \n      /* 全站iframe防自动播放保护 */\n      iframe[src*=\"bilibili.com\"],\n      iframe[src*=\"youtube.com\"] {\n        autoplay: false !important;\n        allow: clipboard-write; encrypted-media; gyroscope; picture-in-picture !important;\n      }\n      \n      /* iframe容器样式增强 */\n      .iframe-container {\n        position: relative;\n        margin: 1.5em 0;\n        padding-top: 56.25%;\n        height: 0;\n        overflow: hidden;\n        /* 增加防自动播放保护层 */\n        isolation: isolate;\n        transition: opacity 0.5s ease, transform 0.3s ease;\n      }\n      \n      .iframe-container iframe {\n        position: absolute;\n        top: 0;\n        left: 0;\n        width: 100%;\n        height: 100%;\n        border: 0;\n        /* 确保iframe不被隐藏元素覆盖触发自动播放 */\n        z-index: 1;\n        transition: opacity 0.3s ease;\n      }\n      \n      /* 视频和LaTeX占位符样式 */\n      .video-placeholder,\n      .latex-placeholder {\n        padding: 15px;\n        background: #f8f9fa;\n        border-radius: 4px;\n        margin: 1.5em 0;\n        text-align: center;\n        border-left: 4px solid #4b7bec;\n        transition: opacity 0.3s ease, transform 0.2s ease;\n      }\n      \n      .video-placeholder-content,\n      .latex-placeholder-content {\n        color: #4b7bec;\n        font-style: italic;\n      }\n      \n      /* 平滑渲染过渡效果 */\n      @keyframes fadeIn {\n        from { opacity: 0; transform: translateY(5px); }\n        to { opacity: 1; transform: translateY(0); }\n      }\n      \n      .toastui-editor-contents .katex-wrapper,\n      .toastui-editor-contents .iframe-container {\n        animation: fadeIn 0.3s ease-out forwards;\n        will-change: opacity, transform;\n        backface-visibility: hidden;\n        transform: translateZ(0);\n      }\n      \n      /* 避免在编辑器中的渲染闪烁 */\n      .ProseMirror-hideselection .katex-wrapper,\n      .ProseMirror-hideselection .iframe-container {\n        transition: none !important;\n        animation: none !important;\n      }\n      \n      /* 自定义按钮样式 */\n      .custom-toolbar-button {\n        display: inline-flex !important;\n        align-items: center !important;\n        justify-content: center !important;\n        width: 32px;\n        height: 32px;\n        margin: 0 3px;\n        border-radius: 4px;\n        background-color: transparent;\n        border: 1px solid transparent;\n        color: #333 !important;\n        font-family: 'Times New Roman', serif;\n        font-weight: bold;\n        font-size: 14px;\n        cursor: pointer;\n        position: relative;\n        overflow: hidden;\n        padding: 0;\n        box-shadow: none;\n        text-shadow: none;\n        outline: none;\n        -webkit-appearance: none;\n        -moz-appearance: none;\n        appearance: none;\n        /* 防止按钮触发表单提交 */\n        pointer-events: auto;\n        user-select: none;\n        touch-action: manipulation;\n      }\n      \n      .custom-toolbar-button:hover {\n        background-color: #f1f3f5;\n        border-color: #dee2e6;\n      }\n      \n      /* 编辑器占位符样式 */\n      .toastui-editor .ProseMirror::before,\n      .toastui-editor .ProseMirror .placeholder::before {\n        color: #adb5bd !important;\n        font-style: italic;\n        opacity: 0.8;\n      }\n      \n      /* 上传中动画 */\n      .image-uploading {\n        position: relative;\n      }\n      \n      .image-uploading:after {\n        content: '上传中...';\n        position: absolute;\n        top: 0;\n        left: 0;\n        width: 100%;\n        height: 100%;\n        background-color: rgba(255, 255, 255, 0.7);\n        display: flex;\n        align-items: center;\n        justify-content: center;\n        font-size: 14px;\n        color: #4b7bec;\n      }\n      \n      /* 文件选择按钮优化 */\n      .toastui-editor-file-select-button {\n        position: relative;\n        overflow: hidden;\n      }\n      \n      .toastui-editor-file-select-button input[type=file] {\n        position: absolute;\n        top: 0;\n        right: 0;\n        min-width: 100%;\n        min-height: 100%;\n        font-size: 100px;\n        text-align: right;\n        filter: alpha(opacity=0);\n        opacity: 0;\n        outline: none;\n        background: white;\n        cursor: pointer;\n        display: block;\n      }\n      \n      /* 防止按钮误触发表单提交的防护层 */\n      .toast-editor-container {\n        position: relative;\n        z-index: 1;\n        /* 防止编辑器内的点击传递到外部 */\n        isolation: isolate;\n      }\n      \n      /* 确保按钮不会触发任何祖先元素的表单提交 */\n      .toastui-editor-toolbar button {\n        pointer-events: auto;\n        user-select: none;\n        touch-action: manipulation;\n      }\n      \n      /* 其他编辑器修复 */\n      .empty-node-placeholder {\n        display: none !important;\n      }\n      \n      .toastui-editor-context-menu .toastui-editor-dropdown-menu li {\n        color: #333 !important;\n        font-weight: normal !important;\n      }\n      \n      .toastui-editor-context-menu .toastui-editor-dropdown-menu li a {\n        color: #333 !important;\n      }\n      \n      .toastui-editor-toolbar-item {\n        position: relative;\n      }\n      \n      .toastui-editor-context-menu .toastui-editor-dropdown-menu li:nth-child(n+7):nth-child(-n+8) {\n        display: none !important;\n      }\n\n      /* --- Editor Background & Theme Harmonization --- */\n      /* 统一编辑器背景为白色 */\n      .toastui-editor-ww-container .ProseMirror,\n      .toastui-editor-md-container .toastui-editor,\n      .toastui-editor-md-preview {\n        background-color: #ffffff !important; \n        color: #333333 !important; /* 确保文本在白色背景上可见 */\n      }\n\n      /* 调整编辑器边框颜色以适应浅色主题 */\n      .toastui-editor-defaultUI {\n        border: 1px solid #d1d5db !important; /* 更浅的边框 */\n      }\n\n      /* 调整工具栏背景和边框 */\n      .toastui-editor-toolbar {\n         background-color: #f9fafb !important; /* 浅灰色工具栏 */\n         border-bottom: 1px solid #d1d5db !important;\n      }\n\n      /* 调整工具栏图标颜色 */\n      .toastui-editor-toolbar-icons {\n          color: #374151 !important; /* 深灰色图标 */\n      }\n      .toastui-editor-toolbar-icons:hover {\n          background-color: #e5e7eb !important; /* 轻微悬停效果 */\n      }\n      .toastui-editor-toolbar-icons.active {\n          background-color: #d1d5db !important; /* 激活状态 */\n      }\n      \n      /* 调整自定义按钮样式以适应浅色主题 */\n      .custom-toolbar-button {\n         color: #374151 !important;\n         border: 1px solid transparent;\n      }\n      .custom-toolbar-button:hover {\n         background-color: #e5e7eb !important; \n         border-color: #d1d5db !important;\n      }\n\n      /* 调整模式切换按钮样式 */\n      .toastui-editor-mode-switch {\n         background-color: #f9fafb !important; \n         border-top: 1px solid #d1d5db !important;\n      }\n      .toastui-editor-mode-switch .toastui-editor-mode-switch-button {\n         color: #374151 !important;\n         border: 1px solid #d1d5db !important;\n         background-color: #ffffff !important;\n      }\n      .toastui-editor-mode-switch .toastui-editor-mode-switch-button.active {\n         background-color: #e5e7eb !important; \n         color: #1f2937 !important;\n      }\n      /* --- End Editor Background & Theme Harmonization --- */\n    `;\n    document.head.appendChild(style);\n\n    return () => {\n      document.head.removeChild(style);\n    };\n  }, []);\n\n  /**\n   * 图片上传钩子函数\n   * 处理编辑器的图片上传请求\n   */\n  const uploadImageHook = useCallback(async (blob: Blob, callback: Function) => {\n    try {\n      if (uploadingImage) {\n        console.warn('已有图片正在上传中，请等待完成');\n        callback('', 'image');\n        return;\n      }\n      \n      setUploadingImage(true);\n      \n      let imageFile: File;\n      if (!(blob instanceof File)) {\n        imageFile = new File([blob], `clipboard_image_${Date.now()}.png`, { \n          type: blob.type || 'image/png'\n        });\n      } else {\n        imageFile = blob;\n      }\n      \n      if (imageFile.size > imageUploader.maxFileSize) {\n        alert(`图片太大，请上传小于10MB的图片（当前大小: ${(imageFile.size / (1024 * 1024)).toFixed(2)}MB）`);\n        setUploadingImage(false);\n        callback('', 'image');\n        return;\n      }\n\n      try {\n        const imageUrl = await imageUploader.upload(imageFile);\n        callback(imageUrl, 'image');\n      } catch (error: any) {\n        console.error('图片上传失败:', error);\n        alert(`图片上传失败: ${error.message || '未知错误'}`);\n        callback('', 'image');\n      } finally {\n        setUploadingImage(false);\n      }\n    } catch (error: any) {\n      console.error('处理图片上传错误:', error);\n      setUploadingImage(false);\n      callback('', 'image');\n    }\n  }, [uploadingImage, imageUploader]);\n\n  /**\n   * 优化图片上传对话框\n   * 替换默认上传按钮行为，提供更好的用户体验\n   */\n  useEffect(() => {\n    if (!isReady || !editorRef.current) return;\n    \n    const editorContainer = editorRef.current.getRootElement();\n    if (!editorContainer) return;\n    \n    const imageButton = editorContainer.querySelector('.toastui-editor-toolbar-item.toastui-editor-toolbar-image');\n    if (!imageButton) return;\n    \n    /**\n     * 图片上传处理函数\n     * 实现自定义的图片选择和上传逻辑\n     */\n    const handleImageUpload = (e: Event) => {\n      e.stopPropagation();\n      e.preventDefault();\n      \n      const fileInput = document.createElement('input');\n      fileInput.type = 'file';\n      fileInput.accept = 'image/*';\n      fileInput.style.position = 'absolute';\n      fileInput.style.opacity = '0';\n      fileInput.style.visibility = 'hidden';\n      document.body.appendChild(fileInput);\n      \n      // 使用requestAnimationFrame避免UI卡顿\n      requestAnimationFrame(() => {\n        fileInput.click();\n      });\n      \n      // 文件选择处理\n      fileInput.onchange = async () => {\n        if (!fileInput.files || !fileInput.files[0]) {\n          document.body.removeChild(fileInput);\n          return;\n        }\n        \n        const file = fileInput.files[0];\n        if (file.size > imageUploader.maxFileSize) {\n          alert(`图片太大，请上传小于10MB的图片（当前大小: ${(file.size / (1024 * 1024)).toFixed(2)}MB）`);\n          document.body.removeChild(fileInput);\n          return;\n        }\n        \n        setUploadingImage(true);\n        try {\n          const imageUrl = await imageUploader.upload(file);\n          if (imageUrl && editorRef.current) {\n            const instance = editorRef.current.getInstance();\n            if (instance.isMarkdownMode()) {\n              instance.insertText(`![${file.name}](${imageUrl})`);\n            } else if (typeof instance.insertHTML === 'function') {\n              instance.insertHTML(`<img src=\"${imageUrl}\" alt=\"${file.name}\">`);\n            }\n          }\n        } catch (error: any) {\n          console.error('图片上传失败:', error);\n          alert(`图片上传失败: ${error.message || '未知错误'}`);\n        } finally {\n          setUploadingImage(false);\n          document.body.removeChild(fileInput);\n        }\n      };\n    };\n    \n    imageButton.addEventListener('click', handleImageUpload, true);\n    \n    return () => {\n      imageButton.removeEventListener('click', handleImageUpload, true);\n    };\n  }, [isReady, imageUploader]);\n\n  /**\n   * 修复视频嵌入后的编辑器错误\n   * 处理iframe相关的DOM问题\n   */\n  useEffect(() => {\n    if (!isReady || !editorRef.current) return;\n    \n    const instance = editorRef.current.getInstance();\n    if (!instance) return;\n    \n    /**\n     * 内容变化处理函数\n     * 修复iframe和空文本节点问题\n     */\n    const handleContentChange = debounce(() => {\n      try {\n        const editorEl = editorRef.current?.getRootElement();\n        if (!editorEl) return;\n        \n        const iframes = editorEl.querySelectorAll('iframe');\n        if (iframes.length === 0) return;\n        \n        // 修复可能的空文本节点\n        iframes.forEach((iframe: HTMLIFrameElement) => {\n          const parent = iframe.parentElement;\n          if (!parent) return;\n          \n          Array.from(parent.childNodes).forEach((node: Node) => {\n            if (node.nodeType === Node.TEXT_NODE && node.textContent?.trim() === '') {\n              const placeholder = document.createElement('span');\n              placeholder.className = 'empty-node-placeholder';\n              placeholder.style.display = 'none';\n              parent.replaceChild(placeholder, node);\n            }\n          });\n        });\n      } catch (error) {\n        console.warn('修复编辑器内容时出错:', error);\n      }\n    }, 100);\n    \n    // 为编辑器添加内容变化监听\n    if (instance.on) {\n      instance.on('change', handleContentChange);\n    }\n    \n    return () => {\n      if (instance.off) {\n        instance.off('change', handleContentChange);\n      }\n    };\n  }, [isReady]);\n\n  // --- 定义按钮点击处理函数 (移到组件主体) ---\n  const handleLatexClickInternal = useCallback(() => {\n      const editor = editorRef.current?.getInstance();\n      if (!editor) { alert('无法获取编辑器实例 (LaTeX)'); return; }\n      // Restore $$latex marker\n      const latexTemplate = [\n        '$$latex', // Restore marker\n        //'\\\\begin{document}', \n        //'$', \n        'f(x) = \\\\int_{-\\\\infty}^\\\\infty \\\\hat f(\\\\xi)\\\\,e^{2 \\\\pi i \\\\xi x} \\\\, d\\\\xi',\n        //'$', \n        //'\\\\end{document}',\n        '$$' // Keep standard closing delimiter\n      ].join('\\n');\n      try {\n        if (editor.isMarkdownMode()) {\n          editor.insertText(`\\n${latexTemplate}\\n`);\n        } else {\n          const currentContent = editor.getMarkdown();\n          editor.setMarkdown(currentContent + `\\n${latexTemplate}\\n`);\n        }\n      } catch (error) {\n        console.error('插入LaTeX时出错:', error);\n        alert('插入LaTeX失败，请手动复制:\\n' + latexTemplate);\n      }\n  }, [editorRef]); // 依赖 editorRef (虽然 ref 本身不变，但明确依赖关系)\n\n  const handleVideoClickInternal = useCallback(() => {\n      const editor = editorRef.current?.getInstance();\n      if (!editor) { alert('无法获取编辑器实例 (Video)'); return; }\n      const videoUrl = prompt('请输入视频链接 (支持YouTube和Bilibili):', '');\n      if (!videoUrl) return;\n      const videoInfo = videoUtils.parseVideoUrl(videoUrl);\n      if (videoInfo.platform === VideoPlatform.Unknown) { alert('无法识别的视频链接'); return; }\n      const iframeCode = videoUtils.generateEmbedCode(videoInfo);\n      if (!iframeCode) { alert('生成嵌入代码失败'); return; }\n      try {\n        const wrappedIframe = `<div class=\"iframe-container\" style=\"opacity: 0; transition: opacity 0.6s ease 0.1s;\">${iframeCode}</div>`; // Keep for potential Markdown preview\n        const markdownIframeCode = '\\n' + iframeCode + '\\n';\n        const placeholderText = `\\n[视频占位符: ${videoUrl}]\\n`; // WYSIWYG placeholder\n\n        if (editor.isMarkdownMode()) {\n          // Markdown 模式插入完整的 iframe 代码\n          editor.insertText(markdownIframeCode);\n        } else {\n          // --- WYSIWYG 模式: 插入占位符文本 --- \n          editor.insertText(placeholderText); // Use insertText for plain text\n          console.log(\"WYSIWYG: Video placeholder inserted.\");\n        }\n      } catch (error) {\n        console.error('插入视频时出错:', error);\n        alert('插入视频失败，请手动复制:\\n' + iframeCode);\n      }\n  }, [editorRef]); // 依赖 editorRef\n  // --- 结束定义按钮点击处理函数 ---\n\n  /**\n   * 编辑器就绪处理函数\n   * 设置编辑器初始化后的状态和清理\n   */\n  const handleEditorReady = useCallback(() => {\n    if (!editorRef.current) return;\n    \n    setIsReady(true);\n    const instance = editorRef.current.getInstance();\n    if (!instance) return;\n\n    // --- 新增：强制在加载后将内容处理为 Markdown --- \n    if (initialData) {\n      try {\n        // 延迟执行以确保编辑器完全准备好处理内容\n        setTimeout(() => {\n          try {\n            console.log(\"[ToastEditor] Forcing content re-process as Markdown on load.\");\n            const currentMd = instance.getMarkdown(); // 获取当前（可能基于HTML加载的）内容的Markdown\n            instance.setMarkdown(currentMd); // 用获取到的Markdown重新设置内容，强制内部状态统一\n            console.log(\"[ToastEditor] Content re-processed as Markdown.\");\n          } catch (reprocessError) {\n            console.error('[ToastEditor] Error forcing content re-process as Markdown:', reprocessError);\n          }\n        }, 100); // 短暂延迟\n      } catch (outerError) {\n        console.error('[ToastEditor] Error accessing editor instance for re-processing:', outerError);\n      }\n    }\n    // --- 结束新增 --- \n\n    // 清理可能存在的UI文本（保留之前的逻辑）\n    try {\n      // 移除可能被误添加到编辑区域的UI文本\n      setTimeout(() => {\n        try {\n          // 确保编辑器已经完全初始化\n          if (instance.isMarkdownMode()) {\n            const content = instance.getMarkdown();\n            // 移除编辑器UI相关的文本\n            const cleanedContent = content\n              .replace(/^(编辑|预览|Markdown|所见即所得)\\s*/g, '')\n              .trim();\n            \n            if (content !== cleanedContent) {\n              instance.setMarkdown(cleanedContent);\n            }\n          } else {\n            const content = instance.getHTML();\n            // 替换HTML内容中可能存在的UI文本\n            const cleanedContent = content\n              .replace(/<p>(编辑|预览|Markdown|所见即所得)(<br>|\\s)*<\\/p>/g, '')\n              .replace(/<p><br><\\/p>/g, '')\n              .trim();\n            \n            if (content !== cleanedContent && cleanedContent) {\n              instance.setHTML(cleanedContent);\n            }\n          }\n        } catch (cleanError) {\n          console.warn('清理编辑器内容时出错:', cleanError);\n        }\n      }, 50);\n      \n      const editorElement = editorRef.current.getRootElement();\n      if (editorElement) {\n        const placeholders = editorElement.querySelectorAll('.placeholder');\n        placeholders.forEach((placeholder: Element) => {\n          if (placeholder instanceof HTMLElement) {\n            placeholder.style.color = '#adb5bd';\n            placeholder.style.fontStyle = 'italic';\n            placeholder.style.opacity = '0.8';\n          }\n        });\n      }\n    } catch (error) {\n      console.warn('设置placeholder样式时出错:', error);\n    }\n    \n    if (onReady) {\n      onReady(instance);\n    }\n  }, [onReady, initialData]);\n\n  // 防抖处理编辑器内容变化回调\n  const debouncedOnChange = useMemo(() => \n    debounce((content: string) => {\n      onChange(content);\n    }, 300), // 300ms 防抖延迟\n    [onChange]\n  );\n\n  /**\n   * 编辑器内容变化处理函数（现在调用防抖版本）\n   * 将编辑器内容传递给父组件\n   */\n  const handleEditorChange = useCallback(() => {\n    if (!editorRef.current) return;\n    \n    try {\n      const instance = editorRef.current.getInstance();\n      if (!instance) return;\n      \n      // --- 修改：始终获取并传递 Markdown 源码 --- \n      const content = instance.getMarkdown();\n      debouncedOnChange(content);\n    } catch (error) {\n      console.error('处理编辑器内容变化时出错:', error);\n    }\n  }, [debouncedOnChange]);\n\n  /**\n   * 自定义HTML渲染器\n   * 处理LaTeX公式和iframe渲染\n   */\n  const customHTMLRenderer = useMemo(() => ({\n    /**\n     * LaTeX渲染器\n     * 使用KaTeX渲染数学公式\n     */\n    latex(node: any) {\n      try {\n        if (!node || !node.literal) {\n          return [\n            { type: 'openTag' as const, tagName: 'div', outerNewLine: true, attributes: { class: 'katex-error' } },\n            { type: 'text' as const, content: '无效的LaTeX公式' },\n            { type: 'closeTag' as const, tagName: 'div', outerNewLine: true }\n          ];\n        }\n        \n        let latexCode = node.literal.trim();\n        \n        // 移除可能导致解析问题的多余标记\n        latexCode = latexCode.replace(/\\\\documentclass\\{article\\}|\\\\begin\\{document\\}|\\\\end\\{document\\}/g, '').trim();\n        \n        // 提取$...$或$$...$$中的公式部分\n        const dollarMatch = latexCode.match(/\\$([\\s\\S]*?)\\$/) || latexCode.match(/\\$\\$([\\s\\S]*?)\\$\\$/);\n        if (dollarMatch && dollarMatch[1]) {\n          latexCode = dollarMatch[1].trim();\n        }\n        \n        // 处理反斜杠转义问题\n        latexCode = latexCode.replace(/\\\\\\\\([a-zA-Z]+)/g, '\\\\$1');\n        \n        // 渲染选项，添加更多容错性\n        const renderOptions = {\n            throwOnError: false,\n            errorColor: '#e74c3c',\n            displayMode: true,\n            strict: false,\n            trust: true,\n            maxSize: 200,\n            maxExpand: 1000,\n            output: 'html' as 'html' | 'mathml' | 'htmlAndMathml'\n        };\n        \n        try {\n          // 使用异步方式渲染LaTeX，避免阻塞UI线程\n          const renderedHTML = katex.renderToString(latexCode, renderOptions);\n          \n          // 返回带有过渡动画的包装元素\n          return [\n            { \n              type: 'openTag' as const, \n              tagName: 'div', \n              outerNewLine: true, \n              attributes: { \n                class: 'katex-wrapper', \n                'data-katex-source': latexCode.replace(/\"/g, '&quot;'),\n                style: 'opacity: 0; animation: fadeIn 0.4s ease-out 0.1s forwards; transform: translateZ(0);'\n              } \n            },\n            { type: 'html' as const, content: renderedHTML },\n            { type: 'closeTag' as const, tagName: 'div', outerNewLine: true }\n          ];\n        } catch (katexError) {\n          console.error('KaTeX渲染错误:', katexError);\n          \n          // 返回更详细的错误信息\n          return [\n            { \n              type: 'openTag' as const, \n              tagName: 'div', \n              outerNewLine: true, \n              attributes: { \n                class: 'katex-error',\n                style: 'animation: fadeIn 0.3s ease-out forwards;'\n              } \n            },\n            { type: 'text' as const, content: `LaTeX渲染错误: ${(katexError as Error).message || '未知错误'}\\n\\n请检查公式语法。原始公式:\\n${latexCode.slice(0, 100)}${latexCode.length > 100 ? '...' : ''}` },\n            { type: 'closeTag' as const, tagName: 'div', outerNewLine: true }\n          ];\n        }\n      } catch (error) {\n        console.error('LaTeX处理错误:', error);\n        return [\n          { type: 'openTag' as const, tagName: 'div', outerNewLine: true, attributes: { class: 'katex-error' } },\n          { type: 'text' as const, content: `LaTeX处理错误: ${(error as Error).message || '未知错误'}\\n请尝试刷新页面或减少公式复杂度。` },\n          { type: 'closeTag' as const, tagName: 'div', outerNewLine: true }\n        ];\n      }\n    },\n    /**\n     * iframe处理\n     * 处理嵌入视频iframe的属性和安全性，添加平滑过渡效果\n     */\n    htmlBlock: {\n      iframe(node: any) {\n        try {\n          if (!node || typeof node !== 'object') {\n            throw new Error('无效的节点对象');\n          }\n          \n          const attrs = node.attrs ? { ...node.attrs } : {};\n          \n          if (!attrs.src) {\n            console.warn('iframe缺少src属性:', attrs);\n          }\n          \n          attrs.allowfullscreen = 'true';\n          // 只允许必要的功能，移除autoplay\n          attrs.allow = 'clipboard-write; encrypted-media; gyroscope; picture-in-picture; fullscreen';\n          \n          if (!attrs.frameborder) {\n            attrs.frameborder = '0';\n          }\n          \n          // 添加额外属性阻止自动播放\n          attrs.loading = 'lazy';\n          attrs.scrolling = 'no';\n          attrs.referrerpolicy = 'no-referrer-when-downgrade';\n          \n          // 添加平滑加载相关属性\n          attrs.style = 'opacity: 0; transition: opacity 0.5s ease;';\n          attrs.onload = 'this.style.opacity=1;';\n          \n          if (attrs.src) {\n            // 处理YouTube链接\n            if (attrs.src.includes('youtube.com')) {\n              // 确保设置了autoplay=0和其他限制参数\n              const baseUrl = attrs.src.split('?')[0];\n              const searchParams = new URLSearchParams(attrs.src.includes('?') ? attrs.src.split('?')[1] : '');\n              \n              // 强制设置参数\n              searchParams.set('autoplay', '0');\n              searchParams.set('mute', '0');\n              searchParams.set('controls', '1');\n              \n              attrs.src = `${baseUrl}?${searchParams.toString()}`;\n            }\n            \n            // 处理Bilibili链接\n            if (attrs.src.includes('bilibili.com')) {\n              // 确保设置了autoplay=0和其他限制参数\n              const baseUrl = attrs.src.split('?')[0];\n              const searchParams = new URLSearchParams(attrs.src.includes('?') ? attrs.src.split('?')[1] : '');\n              \n              // 强制设置参数\n              searchParams.set('autoplay', '0');\n              searchParams.set('danmaku', '0');\n              searchParams.set('high_quality', '0');\n              searchParams.set('as_wide', '0');\n              \n              attrs.src = `${baseUrl}?${searchParams.toString()}`;\n            }\n          }\n          \n          return [\n            { type: 'openTag' as const, tagName: 'iframe', outerNewLine: true, attributes: attrs },\n            { type: 'closeTag' as const, tagName: 'iframe', outerNewLine: true }\n          ];\n        } catch (error) {\n          console.error('iframe渲染错误:', error);\n          return [\n            { type: 'openTag' as const, tagName: 'div', outerNewLine: true, attributes: { class: 'video-error' } },\n            { type: 'text' as const, content: `视频渲染错误: ${(error as Error).message || '未知错误'}` },\n            { type: 'closeTag' as const, tagName: 'div', outerNewLine: true }\n          ];\n        }\n      }\n    }\n  }), []);\n\n  /**\n   * 添加编辑器内容初始化修复\n   * 防止UI元素文本泄漏到编辑内容\n   */\n  useEffect(() => {\n    if (!isReady || !editorRef.current) return;\n    \n    /**\n     * 修复编辑器内容\n     * 清除可能混入的UI元素文本\n     */\n    const fixEditorContent = () => {\n      try {\n        const instance = editorRef.current.getInstance();\n        if (!instance) return;\n        \n        // 检查当前内容是否包含UI元素文本\n        let content = instance.isMarkdownMode() ? instance.getMarkdown() : instance.getHTML();\n        \n        // 定义需要清理的UI元素文本模式\n        const uiTextPatterns = [\n          /^(编辑|预览)\\s*$/m,\n          /^(Markdown|所见即所得)\\s*$/m,\n          /<p>(编辑|预览|Markdown|所见即所得)(<br>|\\s)*<\\/p>/g,\n          // 添加更多模式以匹配不同场景下的UI文本\n          /编辑\\s*预览/g,\n          /Markdown\\s*所见即所得/g,\n          /<div>(编辑|预览|Markdown|所见即所得)(<br>|\\s)*<\\/div>/g,\n          /<[^>]*>(编辑|预览|Markdown|所见即所得)(<br>|\\s)*<\\/[^>]*>/g\n        ];\n        \n        // 检查是否需要清理\n        let needsCleaning = false;\n        for (const pattern of uiTextPatterns) {\n          if (pattern.test(content)) {\n            needsCleaning = true;\n            break;\n          }\n        }\n        \n        if (needsCleaning) {\n          // 延长等待时间，确保编辑器完全渲染\n          setTimeout(() => {\n            try {\n              // 重新获取内容\n              content = instance.isMarkdownMode() ? instance.getMarkdown() : instance.getHTML();\n              \n              // 清理UI元素文本\n              let cleanedContent = content;\n              for (const pattern of uiTextPatterns) {\n                cleanedContent = cleanedContent.replace(pattern, '');\n              }\n              \n              // 移除额外的空行和多余空格\n              cleanedContent = cleanedContent.replace(/^\\s*[\\r\\n]/gm, '').trim();\n              cleanedContent = cleanedContent.replace(/(<p>\\s*<\\/p>)+/g, '<p></p>');\n              \n              // 如果内容有变化，设置回编辑器\n              if (cleanedContent !== content) {\n                console.log('清理编辑器UI文本元素');\n                if (instance.isMarkdownMode()) {\n                  instance.setMarkdown(cleanedContent);\n                } else {\n                  instance.setHTML(cleanedContent || '<p></p>');\n                }\n                \n                // 额外操作：聚焦编辑器\n                setTimeout(() => {\n                  try {\n                    instance.focus();\n                  } catch (e) {\n                    console.warn('聚焦编辑器失败:', e);\n                  }\n                }, 50);\n              }\n            } catch (error) {\n              console.warn('修复编辑器内容时出错:', error);\n            }\n          }, 200); // 增加延时以确保编辑器已完全初始化\n        }\n      } catch (error) {\n        console.warn('检查编辑器内容时出错:', error);\n      }\n    };\n    \n    // 初始修复\n    fixEditorContent();\n    \n    // 监听编辑器事件\n    const instance = editorRef.current.getInstance();\n    if (instance && instance.on) {\n      // 模式切换时修复\n      instance.on('changeMode', fixEditorContent);\n      // 加载完成后也修复\n      instance.on('load', () => {\n        // 延迟执行，确保内容已加载\n        setTimeout(fixEditorContent, 300);\n      });\n    }\n    \n    // 返回清理函数\n    return () => {\n      if (instance && instance.off) {\n        instance.off('changeMode', fixEditorContent);\n        instance.off('load', fixEditorContent);\n      }\n    };\n  }, [isReady]);\n\n  /**\n   * 组件渲染\n   */\n  return (\n    <div \n      className=\"toast-editor-container\" \n      onClick={(e) => {\n        // 阻止冒泡，防止编辑器内的点击影响外部表单\n        e.stopPropagation();\n      }}\n      onSubmit={(e) => {\n        // 阻止可能的表单提交\n        e.preventDefault();\n        return false;\n      }}\n    >\n      <Editor\n        ref={editorRef}\n        initialValue={initialData}\n        previewStyle=\"vertical\"\n        height={height}\n        initialEditType={initialEditType}\n        useCommandShortcut={true}\n        usageStatistics={false}\n        hideModeSwitch={false}\n        language=\"zh-CN\"\n        toolbarItems={[\n          ['heading', 'bold', 'italic', 'strike'],\n          ['hr', 'quote'],\n          ['ul', 'ol', 'task', 'indent', 'outdent'],\n          ['table', 'image', 'link'],\n          ['code', 'codeblock'],\n          // --- 使用 el 属性创建自定义按钮 --- \n          [{\n            name: 'customDivider', // 分隔符名称\n            el: createToolbarDivider(), // 创建分隔符\n            tooltip: '' // tooltip 必须提供，即使为空\n          },\n          {\n            name: 'customLatexButton', // 按钮名称\n            tooltip: '插入LaTeX公式',\n            el: (() => {\n              const button = document.createElement('button');\n              button.className = 'toastui-editor-toolbar-icons custom-latex-button';\n              button.textContent = '∑';\n              button.type = 'button'; // 重要：防止触发表单提交\n              button.style.fontSize = '18px';\n              button.style.margin = '0 2px';\n              button.addEventListener('click', (e: MouseEvent) => {\n                e.preventDefault(); // 再次确保阻止默认行为\n                e.stopPropagation();\n                handleLatexClickInternal(); // 调用我们定义的处理函数\n              });\n              return button;\n            })()\n          },\n          {\n            name: 'customVideoButton', // 按钮名称\n            tooltip: '插入视频',\n            el: (() => {\n              const button = document.createElement('button');\n              button.className = 'toastui-editor-toolbar-icons custom-video-button';\n              button.textContent = '▶';\n              button.type = 'button'; // 重要\n              button.style.fontSize = '16px';\n              button.style.margin = '0 2px';\n              button.addEventListener('click', (e: MouseEvent) => {\n                e.preventDefault();\n                e.stopPropagation();\n                handleVideoClickInternal(); // 调用我们定义的处理函数\n              });\n              return button;\n            })()\n          }]\n          // --- 结束自定义按钮 --- \n        ]}\n        plugins={[[colorSyntax, colorSyntaxOptions]]}\n        hooks={{ addImageBlobHook: uploadImageHook }}\n        onChange={handleEditorChange}\n        onLoad={handleEditorReady}\n        customHTMLRenderer={customHTMLRenderer}\n      />\n    </div>\n  );\n};\n\n/**\n * 防抖函数\n * 用于优化高频率事件处理\n * @param func 需要防抖的函数\n * @param wait 等待时间(毫秒)\n * @returns 防抖处理后的函数\n */\nfunction debounce(func: Function, wait: number) {\n  let timeout: ReturnType<typeof setTimeout> | null = null;\n  \n  return function(this: unknown, ...args: any[]) {\n    if (timeout) {\n      clearTimeout(timeout);\n    }\n    \n    timeout = setTimeout(() => {\n      func(...args);\n      timeout = null;\n    }, wait);\n  };\n}\n\n/**\n * 判断DOM元素是否有特定类名\n * 防止对非标准DOM元素操作导致类型错误\n * @param element DOM元素\n * @param className 类名\n * @returns 是否包含该类名\n */\nfunction hasClass(element: Element | null, className: string): boolean {\n  if (!element || !className) return false;\n\n  try {\n    // 优先使用 classList API (最安全可靠)\n    if (element.classList && typeof element.classList.contains === 'function') {\n      return element.classList.contains(className);\n    }\n\n    // 处理 className 是字符串的情况\n    if (typeof element.className === 'string') {\n      // 使用空格作为分隔符进行精确匹配\n      return (' ' + element.className + ' ').indexOf(' ' + className + ' ') > -1;\n    }\n\n    // 处理 SVGElement 的 className (SVGAnimatedString)\n    // 检查 baseVal 是否存在且为字符串\n    if (element.className && typeof element.className === 'object' && typeof (element.className as any).baseVal === 'string') {\n      return (' ' + (element.className as SVGAnimatedString).baseVal + ' ').indexOf(' ' + className + ' ') > -1;\n    }\n\n    // 其他未知情况，安全返回 false\n    console.warn('hasClass: Encountered unexpected element.className type:', typeof element.className, 'on element:', element);\n    return false;\n  } catch (error) {\n    // 捕获任何意外错误，防止整个应用崩溃\n    console.error('Error in hasClass function:', error, 'Element:', element, 'ClassName:', className);\n    return false;\n  }\n}\n\n// 辅助函数：创建工具栏分隔符\nfunction createToolbarDivider(): HTMLElement {\n  const divider = document.createElement('div');\n  divider.className = 'toastui-editor-toolbar-divider';\n  return divider;\n}\n\nexport default ToastEditor; ","/**\n * 此文件定义了 ToastEditorWrapper 组件，作为SharedEditor的替代品。\n * 它将保持与SharedEditor完全相同的API接口，但内部使用ToastEditor实现。\n * 这种设计允许我们在不改变现有代码的情况下，实现从CKEditor到Toast UI Editor的平滑过渡。\n */\nimport React from 'react';\nimport ToastEditor from './ToastEditor';\n\ninterface SharedEditorProps {\n  initialData?: string; // 编辑时传入的初始数据\n  onChange: (data: string) => void; // 内容变化时的回调\n  token: string | null; // 用户认证令牌，用于上传\n  onReady?: (editor: any) => void; // 编辑器就绪时的回调\n  placeholder?: string; // 添加占位符属性\n}\n\n// 保持与SharedEditor相同的接口，但使用ToastEditor实现\nconst ToastEditorWrapper: React.FC<SharedEditorProps> = ({\n  initialData = '',\n  onChange,\n  token,\n  onReady,\n  placeholder = '请输入内容'\n}) => {\n  return (\n    <div className=\"toast-editor-wrapper\">\n      <ToastEditor\n        initialData={initialData}\n        onChange={onChange}\n        token={token}\n        onReady={onReady}\n        placeholder={placeholder}\n        height=\"400px\" // 可以根据需要调整高度\n        initialEditType=\"wysiwyg\" // 默认使用所见即所得模式\n      />\n    </div>\n  );\n};\n\nexport default ToastEditorWrapper; "],"names":["VideoPlatform","ImageUploader","constructor","token","maxFileSize","this","upload","file","Error","size","toFixed","formData","FormData","append","headers","console","log","API_BASE_URL","response","axios","post","timeout","onUploadProgress","progressEvent","percentCompleted","Math","round","loaded","total","data","imageUrl","error","_error$response","_error$response2","_error$response2$data","message","videoUtils","parseVideoUrl","url","platform","Unknown","videoId","embedUrl","youtubeMatch","match","YouTube","bilibiliMatch","bvid","startsWith","Bilibili","generateEmbedCode","videoInfo","iframeContainer","containerEnd","debounce","func","wait","_len","arguments","length","args","Array","_key","clearTimeout","setTimeout","createToolbarDivider","divider","document","createElement","className","_ref","initialData","onChange","onReady","height","initialEditType","editorRef","useRef","isReady","setIsReady","useState","currentMode","setCurrentMode","imageUploader","useMemo","uploadingImage","setUploadingImage","useEffect","preventSpaceSubmit","e","key","target","closest","element","classList","contains","indexOf","baseVal","warn","hasClass","stopPropagation","addEventListener","removeEventListener","colorSyntaxOptions","preset","current","instance","getInstance","handleModeChange","mode","_editorRef$current","editorElement","getRootElement","currentScrollContainer","querySelector","scrollPosition","scrollTop","toastElements","querySelectorAll","forEach","el","HTMLElement","style","opacity","transition","getHTML","getMarkdown","setMarkdown","setHTML","newScrollContainer","updatedElements","scrollError","contentError","on","off","fixStyles","item","color","fontWeight","menu","items","seenText","Set","_item$textContent","text","textContent","trim","has","remove","add","handleClick","head","appendChild","removeChild","uploadImageHook","useCallback","async","blob","callback","imageFile","File","Date","now","type","alert","editorContainer","imageButton","handleImageUpload","preventDefault","fileInput","accept","position","visibility","body","requestAnimationFrame","click","onchange","files","isMarkdownMode","insertText","name","insertHTML","handleContentChange","_editorRef$current2","editorEl","iframes","iframe","parent","parentElement","from","childNodes","node","_node$textContent","nodeType","Node","TEXT_NODE","placeholder","display","replaceChild","handleLatexClickInternal","_editorRef$current3","editor","latexTemplate","join","currentContent","handleVideoClickInternal","_editorRef$current4","videoUrl","prompt","iframeCode","markdownIframeCode","placeholderText","handleEditorReady","currentMd","reprocessError","outerError","content","cleanedContent","replace","cleanError","fontStyle","debouncedOnChange","handleEditorChange","customHTMLRenderer","latex","literal","tagName","outerNewLine","attributes","class","latexCode","dollarMatch","renderOptions","throwOnError","errorColor","displayMode","strict","trust","maxSize","maxExpand","output","renderedHTML","katex","katexError","slice","htmlBlock","attrs","src","allowfullscreen","allow","frameborder","loading","scrolling","referrerpolicy","onload","includes","baseUrl","split","searchParams","URLSearchParams","set","toString","fixEditorContent","uiTextPatterns","needsCleaning","pattern","test","focus","_jsx","onClick","onSubmit","children","Editor","ref","initialValue","previewStyle","useCommandShortcut","usageStatistics","hideModeSwitch","language","toolbarItems","tooltip","button","fontSize","margin","plugins","colorSyntax","hooks","addImageBlobHook","onLoad","ToastEditor"],"sourceRoot":""}