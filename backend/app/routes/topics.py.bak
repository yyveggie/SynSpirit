from flask import Blueprint, jsonify, request, current_app
from app import db
from app.models import Topic, TopicRelation, Article, Post
from sqlalchemy.exc import IntegrityError
import re
from sqlalchemy.orm import joinedload

# 创建蓝图
topics_bp = Blueprint('topics_bp', __name__)

def generate_slug(name):
    # 简单的 slug 生成器，移除特殊字符，转小写，用连字符连接
    slug = name.lower()
    slug = re.sub(r'[^\w\s-]', '', slug) # 移除非字母数字、空格、连字符
    slug = re.sub(r'[\s_]+', '-', slug) # 替换空格和下划线为连字符
    slug = re.sub(r'^-+|-+$', '', slug) # 移除开头和结尾的连字符
    return slug

@topics_bp.route('/topics/network', methods=['GET'])
def get_topic_network():
    """获取用于 React Flow 的节点和边数据"""
    try:
        topics = Topic.query.all()
        relations = TopicRelation.query.all()

        nodes = []
        for topic in topics:
            node_style = {
                'backgroundColor': topic.style_bgcolor,
                'color': topic.style_fgcolor,
                'width': topic.style_width,
                'height': topic.style_height,
                'borderRadius': '50%' if topic.style_shape == 'circle' else '5px', # 根据形状设置圆角
                 # 为了文字居中，添加 flex 布局样式
                'display': 'flex',
                'alignItems': 'center',
                'justifyContent': 'center',
                'textAlign': 'center',
                'border': '1px solid #888' # 默认边框，可以后续添加到模型
            }
            nodes.append({
                'id': str(topic.id), # React Flow 需要字符串 ID
                'position': {'x': topic.pos_x, 'y': topic.pos_y},
                'data': { 
                    'label': topic.name,
                    'slug': topic.slug # 将 slug 也放入 data
                },
                'style': node_style # 应用节点样式
                # 可以根据需要添加 type: 'input' 或 'output' 等
            })

        edges = []
        for relation in relations:
            edge_style = {
                'strokeWidth': relation.style_thickness,
                'stroke': relation.style_color
            }
            edges.append({
                'id': f'e{relation.source_topic_id}-{relation.target_topic_id}', # 生成边 ID
                'source': str(relation.source_topic_id),
                'target': str(relation.target_topic_id),
                'label': relation.label,
                'animated': relation.style_animated,
                'style': edge_style # 应用边样式
            })

        return jsonify({'nodes': nodes, 'edges': edges})
    
    except Exception as e:
        # 添加日志记录会更好
        print(f"Error fetching topic network: {e}") 
        return jsonify({'error': '获取主题网络数据失败'}), 500


@topics_bp.route('/', methods=['POST'])
def create_topic():
    """创建新主题"""
    data = request.get_json()
    if not data or not data.get('name'):
        return jsonify({'error': '缺少主题名称'}), 400

    name = data['name']
    # 如果前端没提供 slug，自动生成一个
    slug = data.get('slug', generate_slug(name))
    
    # 检查 slug 是否已存在
    if Topic.query.filter_by(slug=slug).first():
         # 如果自动生成的 slug 冲突，尝试添加后缀 (简单处理)
         if not data.get('slug'): 
             count = 1
             original_slug = slug
             while Topic.query.filter_by(slug=slug).first():
                 slug = f"{original_slug}-{count}"
                 count += 1
         else:
             return jsonify({'error': '主题 slug 已存在'}), 409 # 409 Conflict

    new_topic = Topic(
        name=name,
        slug=slug,
        description=data.get('description'),
        pos_x=float(data.get('pos_x', 0.0)),
        pos_y=float(data.get('pos_y', 0.0)),
        style_bgcolor=data.get('style_bgcolor', '#ffffff'),
        style_fgcolor=data.get('style_fgcolor', '#333333'),
        style_width=int(data.get('style_width', 70)),
        style_height=int(data.get('style_height', 70)),
        style_shape=data.get('style_shape', 'rectangle')
    )
    
    try:
        db.session.add(new_topic)
        db.session.commit()
        return jsonify(new_topic.to_dict()), 201
    except IntegrityError as e:
        db.session.rollback()
        # 可能是其他唯一约束冲突，虽然我们已经检查了 slug
        print(f"Database integrity error: {e}")
        return jsonify({'error': '创建主题时数据库出错'}), 500
    except Exception as e:
        db.session.rollback()
        print(f"Error creating topic: {e}")
        return jsonify({'error': '创建主题失败'}), 500

# --- 实现 Topic CRUD --- 

@topics_bp.route('/', methods=['GET'])
def get_topics():
    """获取所有主题列表"""
    try:
        topics = Topic.query.order_by(Topic.name).all()
        return jsonify([topic.to_dict() for topic in topics])
    except Exception as e:
        print(f"Error fetching topics: {e}")
        return jsonify({'error': '获取主题列表失败'}), 500

@topics_bp.route('/<int:topic_id>', methods=['GET'])
def get_topic(topic_id):
    """获取单个主题详情"""
    try:
        topic = Topic.query.get_or_404(topic_id)
        return jsonify(topic.to_dict())
    except Exception as e:
        print(f"Error fetching topic {topic_id}: {e}")
        return jsonify({'error': '获取主题详情失败'}), 500

@topics_bp.route('/<int:topic_id>', methods=['PUT'])
def update_topic(topic_id):
    """更新主题信息"""
    topic = Topic.query.get_or_404(topic_id)
    data = request.get_json()
    if not data:
        return jsonify({'error': '缺少更新数据'}), 400

    # 逐个更新字段，提供默认值或保留原值
    topic.name = data.get('name', topic.name)
    topic.description = data.get('description', topic.description)
    topic.pos_x = float(data.get('pos_x', topic.pos_x))
    topic.pos_y = float(data.get('pos_y', topic.pos_y))
    topic.style_bgcolor = data.get('style_bgcolor', topic.style_bgcolor)
    topic.style_fgcolor = data.get('style_fgcolor', topic.style_fgcolor)
    topic.style_width = int(data.get('style_width', topic.style_width))
    topic.style_height = int(data.get('style_height', topic.style_height))
    topic.style_shape = data.get('style_shape', topic.style_shape)

    # 处理 slug 更新，检查唯一性
    new_slug = data.get('slug')
    if new_slug and new_slug != topic.slug:
        new_slug = generate_slug(new_slug) # 清理 slug
        if not new_slug:
             return jsonify({'error': '提供的 slug 无效'}), 400
        existing_topic = Topic.query.filter(Topic.slug == new_slug, Topic.id != topic_id).first()
        if existing_topic:
            return jsonify({'error': f'Slug "{new_slug}" 已被其他主题使用'}), 409
        topic.slug = new_slug
    elif not topic.slug: # 如果原 slug 为空且未提供新 slug，尝试从 name 生成
        topic.slug = generate_slug(topic.name)
        # 确保生成的 slug 唯一
        if Topic.query.filter(Topic.slug == topic.slug, Topic.id != topic_id).first():
           count = 1
           original_slug = topic.slug
           while Topic.query.filter(Topic.slug == topic.slug, Topic.id != topic_id).first():
               topic.slug = f"{original_slug}-{count}"
               count += 1

    try:
        db.session.commit()
        return jsonify(topic.to_dict())
    except Exception as e:
        db.session.rollback()
        print(f"Error updating topic {topic_id}: {e}")
        return jsonify({'error': '更新主题失败'}), 500

@topics_bp.route('/<int:topic_id>', methods=['DELETE'])
def delete_topic(topic_id):
    """删除主题"""
    topic = Topic.query.get_or_404(topic_id)
    try:
        # 删除关联关系由 cascade='all, delete-orphan' 处理
        db.session.delete(topic)
        db.session.commit()
        return '', 204 # No Content
    except Exception as e:
        db.session.rollback()
        print(f"Error deleting topic {topic_id}: {e}")
        return jsonify({'error': '删除主题失败'}), 500

# --- 实现 TopicRelation CRUD --- 

@topics_bp.route('/topic_relations', methods=['POST'])
def create_topic_relation():
    """创建新的主题关系"""
    data = request.get_json()
    if not data or 'source_topic_id' not in data or 'target_topic_id' not in data:
        return jsonify({'error': '缺少源主题ID或目标主题ID'}), 400

    source_id = data['source_topic_id']
    target_id = data['target_topic_id']

    # 检查主题是否存在
    source_topic = Topic.query.get(source_id)
    target_topic = Topic.query.get(target_id)
    if not source_topic or not target_topic:
        return jsonify({'error': '源主题或目标主题不存在'}), 404
        
    # 检查关系是否已存在 (可选，根据业务逻辑决定是否允许重复关系)
    existing_relation = TopicRelation.query.filter_by(source_topic_id=source_id, target_topic_id=target_id).first()
    if existing_relation:
        return jsonify({'error': '该主题关系已存在'}), 409

    new_relation = TopicRelation(
        source_topic_id=source_id,
        target_topic_id=target_id,
        label=data.get('label'),
        style_animated=bool(data.get('style_animated', False)),
        style_thickness=int(data.get('style_thickness', 1)),
        style_color=data.get('style_color', '#aaa')
    )

    try:
        db.session.add(new_relation)
        db.session.commit()
        return jsonify(new_relation.to_dict()), 201
    except Exception as e:
        db.session.rollback()
        print(f"Error creating topic relation: {e}")
        return jsonify({'error': '创建主题关系失败'}), 500

@topics_bp.route('/topic_relations', methods=['GET'])
def get_topic_relations():
    """获取所有主题关系列表"""
    try:
        relations = TopicRelation.query.all()
        return jsonify([relation.to_dict() for relation in relations])
    except Exception as e:
        print(f"Error fetching topic relations: {e}")
        return jsonify({'error': '获取主题关系列表失败'}), 500

@topics_bp.route('/topic_relations/<int:relation_id>', methods=['PUT'])
def update_topic_relation(relation_id):
    """更新主题关系信息"""
    relation = TopicRelation.query.get_or_404(relation_id)
    data = request.get_json()
    if not data:
        return jsonify({'error': '缺少更新数据'}), 400

    relation.label = data.get('label', relation.label)
    relation.style_animated = bool(data.get('style_animated', relation.style_animated))
    relation.style_thickness = int(data.get('style_thickness', relation.style_thickness))
    relation.style_color = data.get('style_color', relation.style_color)
    # 通常不建议修改 source/target id，如果需要，应该删除重建

    try:
        db.session.commit()
        return jsonify(relation.to_dict())
    except Exception as e:
        db.session.rollback()
        print(f"Error updating topic relation {relation_id}: {e}")
        return jsonify({'error': '更新主题关系失败'}), 500

@topics_bp.route('/topic_relations/<int:relation_id>', methods=['DELETE'])
def delete_topic_relation(relation_id):
    """删除主题关系"""
    relation = TopicRelation.query.get_or_404(relation_id)
    try:
        db.session.delete(relation)
        db.session.commit()
        return '', 204 # No Content
    except Exception as e:
        db.session.rollback()
        print(f"Error deleting topic relation {relation_id}: {e}")
        return jsonify({'error': '删除主题关系失败'}), 500

# --- 新增：按 slug 获取主题 --- 
@topics_bp.route('/slug/<string:slug>', methods=['GET'])
def get_topic_by_slug(slug):
    """通过 slug 获取主题详情"""
    # --- 修改：移除 flush=True ---
    current_app.logger.info(f"[DEBUG] Received request for slug: '{slug}' (Type: {type(slug)}, Length: {len(slug)})")
    # --- 结束修改 ---
    try:
        topic = Topic.query.filter_by(slug=slug).first()
        # --- 修改：移除 flush=True ---
        current_app.logger.info(f"[DEBUG] Query result for slug '{slug}': {topic}")
        # --- 结束修改 ---
        if topic:
            return jsonify(topic.to_dict())
        else:
            return jsonify({'error': '无效的主题标识符。'}), 404
    except Exception as e:
        # --- 修改：使用 Flask logger，移除 flush=True ---
        current_app.logger.error(f"Error fetching topic by slug {slug}: {e}")
        # --- 结束修改 ---
        return jsonify({'error': '获取主题详情失败'}), 500

# --- 新增：获取特定主题下的文章列表 --- 
@topics_bp.route('/<int:topic_id>/articles', methods=['GET'])
def get_topic_articles(topic_id):
    """获取指定主题下的所有已发布文章"""
    topic = Topic.query.get_or_404(topic_id)
    
    # 获取分页参数
    page = request.args.get('page', 1, type=int)
    per_page = request.args.get('per_page', 10, type=int)
    
    try:
        # --- 修改：查询 Post 模型而不是 Article --- 
        pagination = Post.query.filter_by(topic_id=topic_id, is_published=True)\
                                .order_by(Post.created_at.desc())\
                                .paginate(page=page, per_page=per_page, error_out=False)
        # --- 结束修改 --- 
                                
        posts = pagination.items # 变量名改为 posts
        total_posts = pagination.total # 变量名改为 total_posts
        
        # --- 修改：使用 post.to_dict ---
        return jsonify({
            'posts': [post.to_dict(include_content=False) for post in posts], # 返回 posts 列表
            'total': total_posts,
            'page': page,
            'per_page': per_page,
            'pages': pagination.pages
        })
        # --- 结束修改 ---
    except Exception as e:
        # --- 修改：日志记录和错误信息 ---
        current_app.logger.error(f"获取主题 {topic_id} 的帖子列表失败: {e}")
        return jsonify({'error': '获取主题帖子列表失败'}), 500
        # --- 结束修改 ---

# --- 新增：按 Topic Slug 获取帖子列表 (从 posts.py 移动过来) ---
@topics_bp.route('/topics/<string:topic_slug>/posts', methods=['GET'])
def get_posts_by_topic_slug(topic_slug):
    '''根据主题的 slug 获取该主题下的所有帖子列表'''
    try:
        # 1. 根据 slug 查找 Topic
        topic = Topic.query.filter_by(slug=topic_slug).first()
        if not topic:
            return jsonify({'error': '指定的主题不存在'}), 404

        # 2. 查询该 Topic 下的所有 Post，按创建时间降序
        #    预加载作者信息以减少数据库查询次数
        posts_query = Post.query.options(joinedload(Post.author)) \
                              .filter_by(topic_id=topic.id) \
                              .order_by(Post.created_at.desc())
        
        # --- 可选：添加分页 ---
        page = request.args.get('page', 1, type=int)
        per_page = request.args.get('limit', 10, type=int) # 默认每页10条
        pagination = posts_query.paginate(page=page, per_page=per_page, error_out=False)
        posts = pagination.items
        total = pagination.total
        # --- 结束分页 ---

        # 3. 返回结果
        return jsonify({
            'posts': [post.to_dict(include_content=False) for post in posts], # 列表默认不包含完整内容
            'topic': topic.to_dict(), # 同时返回主题信息
            # --- 如果使用了分页 ---
            'total': total,
            'page': page,
            'per_page': per_page,
            'pages': pagination.pages
            # --- 结束分页 ---
        })
    except Exception as e:
        current_app.logger.error(f"Error fetching posts for topic {topic_slug}: {e}")
        import traceback
        traceback.print_exc() # 打印详细错误堆栈
        return jsonify({'error': f'获取主题 {topic_slug} 的帖子列表失败'}), 500
# --- 结束新增 ---

# --- TODO: 添加其他 CRUD 路由 --- 
# GET /topics
# GET /topics/<id>
# PUT /topics/<id>
# DELETE /topics/<id>
# POST /topic_relations
# GET /topic_relations
# PUT /topic_relations/<id>
# DELETE /topic_relations/<id> 