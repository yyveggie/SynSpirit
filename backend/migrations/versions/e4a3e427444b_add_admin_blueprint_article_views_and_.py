"""Add admin blueprint, article views, and slug generation

Revision ID: e4a3e427444b
Revises: 
Create Date: 2025-04-11 16:42:23.910469

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql
import pgvector.sqlalchemy

# revision identifiers, used by Alembic.
revision = 'e4a3e427444b'
down_revision = None
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('articles',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('title', sa.String(length=200), nullable=False),
    sa.Column('content', sa.Text(), nullable=False),
    sa.Column('summary', sa.Text(), nullable=True),
    sa.Column('category', sa.String(length=100), nullable=True),
    sa.Column('tags', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('author', sa.String(length=100), nullable=True),
    sa.Column('cover_image', sa.String(length=255), nullable=True),
    sa.Column('vector_embedding', pgvector.sqlalchemy.Vector(dim=1536), nullable=True),
    sa.Column('slug', sa.String(length=200), nullable=True),
    sa.Column('is_published', sa.Boolean(), nullable=True),
    sa.Column('view_count', sa.Integer(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('articles', schema=None) as batch_op:
        batch_op.create_index('idx_article_vector', ['vector_embedding'], unique=False, postgresql_using='ivfflat')
        batch_op.create_index(batch_op.f('ix_articles_slug'), ['slug'], unique=True)
        batch_op.create_index(batch_op.f('ix_articles_title'), ['title'], unique=False)

    op.create_table('categories',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=100), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('parent_id', sa.Integer(), nullable=True),
    sa.Column('icon', sa.String(length=100), nullable=True),
    sa.Column('slug', sa.String(length=100), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['parent_id'], ['categories.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('categories', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_categories_name'), ['name'], unique=False)
        batch_op.create_index(batch_op.f('ix_categories_slug'), ['slug'], unique=True)

    op.create_table('tools',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=100), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('source_url', sa.String(length=255), nullable=True),
    sa.Column('category_id', sa.Integer(), nullable=False),
    sa.Column('tags', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('content', sa.Text(), nullable=True),
    sa.Column('features', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('use_cases', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('pros', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('cons', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('rating', sa.Float(), nullable=True),
    sa.Column('popularity', sa.Integer(), nullable=True),
    sa.Column('is_free', sa.Boolean(), nullable=True),
    sa.Column('pricing_info', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('screenshot_url', sa.String(length=255), nullable=True),
    sa.Column('vector_embedding', pgvector.sqlalchemy.Vector(dim=1536), nullable=True),
    sa.Column('slug', sa.String(length=100), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['category_id'], ['categories.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('tools', schema=None) as batch_op:
        batch_op.create_index('idx_tool_vector', ['vector_embedding'], unique=False, postgresql_using='ivfflat')
        batch_op.create_index(batch_op.f('ix_tools_name'), ['name'], unique=False)
        batch_op.create_index(batch_op.f('ix_tools_slug'), ['slug'], unique=True)

    op.create_table('feedback',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('tool_id', sa.Integer(), nullable=False),
    sa.Column('rating', sa.Integer(), nullable=False),
    sa.Column('comment', sa.Text(), nullable=True),
    sa.Column('user_email', sa.String(length=100), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['tool_id'], ['tools.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('feedback')
    with op.batch_alter_table('tools', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_tools_slug'))
        batch_op.drop_index(batch_op.f('ix_tools_name'))
        batch_op.drop_index('idx_tool_vector', postgresql_using='ivfflat')

    op.drop_table('tools')
    with op.batch_alter_table('categories', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_categories_slug'))
        batch_op.drop_index(batch_op.f('ix_categories_name'))

    op.drop_table('categories')
    with op.batch_alter_table('articles', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_articles_title'))
        batch_op.drop_index(batch_op.f('ix_articles_slug'))
        batch_op.drop_index('idx_article_vector', postgresql_using='ivfflat')

    op.drop_table('articles')
    # ### end Alembic commands ###
