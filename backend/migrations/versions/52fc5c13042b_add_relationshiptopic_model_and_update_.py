"""Add RelationshipTopic model and update Post

Revision ID: 52fc5c13042b
Revises: 49a1b4633a22
Create Date: 2025-04-23 19:09:26.827277

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql
from sqlalchemy.sql import table, column
from sqlalchemy import String, Integer, Boolean # Add other necessary types

# revision identifiers, used by Alembic.
revision = '52fc5c13042b'
down_revision = '49a1b4633a22'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###

    # # Try dropping relationship_topics first in case it exists from a partial run
    # # --- COMMENTED OUT because we know it doesn't exist and dropping caused transaction abort ---
    # try:
    #     op.drop_table('relationship_topics')
    #     print("Dropped existing relationship_topics table.")
    # except Exception as e:
    #     # Ignore if table doesn't exist
    #     print(f"Could not drop relationship_topics (may not exist): {e}")
    #     pass

    op.create_table('relationship_topics',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('post_id', sa.Integer(), nullable=False),
        sa.Column('topic_id', sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(['post_id'], ['posts.id'], name='fk_relationship_topics_post_id'),
        sa.ForeignKeyConstraint(['topic_id'], ['topics.id'], name='fk_relationship_topics_topic_id'),
        sa.PrimaryKeyConstraint('id', name='pk_relationship_topics')
    )

    # Drop post_tags and tags (ensure this is intended)
    op.drop_table('post_tags')
    op.drop_table('tags')

    # Handle paragraph_comments nulls and NOT NULL constraint
    paragraph_comments_table = table('paragraph_comments',
        column('paragraph_id', Integer)
    )
    with op.batch_alter_table('paragraph_comments', schema=None) as batch_op:
        print("Deleting paragraph_comments where paragraph_id is NULL.")
        batch_op.execute(
            paragraph_comments_table.delete().where(paragraph_comments_table.c.paragraph_id == None)
        )
        print("Setting paragraph_comments.paragraph_id to NOT NULL.")
        batch_op.alter_column('paragraph_id',
               existing_type=sa.INTEGER(),
               nullable=False)

    # --- Handle post_comments idempotency OUTSIDE batch ---
    print("Attempting to drop existing post_comments parent_id constraint and column if they exist...")
    try:
        op.execute('ALTER TABLE post_comments DROP CONSTRAINT IF EXISTS fk_post_comments_parent_id;')
        print("Ensured fk_post_comments_parent_id constraint is dropped.")
    except Exception as e:
        print(f"Error trying to drop constraint fk_post_comments_parent_id: {e}")
        pass # Continue even if dropping fails (might not exist)
    try:
        op.execute('ALTER TABLE post_comments DROP COLUMN IF EXISTS parent_id;')
        print("Ensured parent_id column is dropped from post_comments.")
    except Exception as e:
        print(f"Error trying to drop column parent_id from post_comments: {e}")
        pass # Continue even if dropping fails (might not exist)

    # --- Now perform the batch alter table for post_comments ---
    with op.batch_alter_table('post_comments', schema=None) as batch_op:
        print("Adding parent_id column and fk_post_comments_parent_id constraint.")
        batch_op.add_column(sa.Column('parent_id', sa.Integer(), nullable=True))
        batch_op.create_foreign_key('fk_post_comments_parent_id', 'post_comments', ['parent_id'], ['id'])

    # Handle posts table changes
    # Note: Making this section idempotent too by dropping first might be safer
    #       but let's try without it first unless errors occur.
    with op.batch_alter_table('posts', schema=None) as batch_op:
        print("Updating posts table schema.")
        # Try dropping potentially conflicting items first (safer for reruns)
        try: op.execute('ALTER TABLE posts DROP CONSTRAINT IF EXISTS fk_posts_topic_id;')
        except Exception: pass
        try: op.execute('ALTER TABLE posts DROP COLUMN IF EXISTS topic_id;')
        except Exception: pass
        try: op.execute('ALTER TABLE posts DROP COLUMN IF EXISTS password;')
        except Exception: pass
        try: op.execute('ALTER TABLE posts DROP COLUMN IF EXISTS scheduled_publish_time;')
        except Exception: pass
        try: op.execute('ALTER TABLE posts DROP COLUMN IF EXISTS allow_comments;')
        except Exception: pass
        try: op.execute('ALTER TABLE posts DROP COLUMN IF EXISTS access_level;')
        except Exception: pass
        try: op.execute('ALTER TABLE posts DROP COLUMN IF EXISTS publication_status;')
        except Exception: pass

        # Add the new columns and constraint
        batch_op.add_column(sa.Column('publication_status', sa.String(length=50), server_default='draft', nullable=False))
        batch_op.add_column(sa.Column('access_level', sa.String(length=50), server_default='public', nullable=False))
        batch_op.add_column(sa.Column('allow_comments', sa.Boolean(), server_default=sa.text('true'), nullable=False))
        batch_op.add_column(sa.Column('scheduled_publish_time', sa.DateTime(), nullable=True))
        batch_op.add_column(sa.Column('password', sa.String(length=128), nullable=True))
        batch_op.add_column(sa.Column('topic_id', sa.Integer(), nullable=True))
        batch_op.create_foreign_key('fk_posts_topic_id', 'topics', ['topic_id'], ['id'])

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('posts', schema=None) as batch_op:
        # Use explicit names
        batch_op.drop_constraint('fk_posts_topic_id', type_='foreignkey')
        batch_op.drop_column('topic_id')
        batch_op.drop_column('password')
        batch_op.drop_column('scheduled_publish_time')
        batch_op.drop_column('allow_comments')
        batch_op.drop_column('access_level')
        batch_op.drop_column('publication_status')

    with op.batch_alter_table('post_comments', schema=None) as batch_op:
        # Use explicit name
        batch_op.drop_constraint('fk_post_comments_parent_id', type_='foreignkey')
        batch_op.drop_column('parent_id')

    with op.batch_alter_table('paragraph_comments', schema=None) as batch_op:
        batch_op.alter_column('paragraph_id',
               existing_type=sa.INTEGER(),
               nullable=True)

    # Recreate tags and post_tags (ensure correct schema if needed)
    op.create_table('tags',
        sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
        sa.Column('name', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
        sa.PrimaryKeyConstraint('id', name='tags_pkey'),
        sa.UniqueConstraint('name', name='tags_name_key')
    )
    op.create_table('post_tags',
    sa.Column('post_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('tag_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['post_id'], ['posts.id'], name='post_tags_post_id_fkey'),
    sa.ForeignKeyConstraint(['tag_id'], ['tags.id'], name='post_tags_tag_id_fkey'),
    sa.PrimaryKeyConstraint('post_id', 'tag_id', name='post_tags_pkey')
    )
    # Drop the table (no constraints needed to drop first if CASCADE is not used, or handled by DB)
    op.drop_table('relationship_topics')

    # ### end Alembic commands ###
